[
  {
    "objectID": "Take_home_Ex/Take_home_Ex03/Take_home_Ex03.html",
    "href": "Take_home_Ex/Take_home_Ex03/Take_home_Ex03.html",
    "title": "Take home Exercise03",
    "section": "",
    "text": "Setting the SceneThe Task\n\n\nHousing is an essential component of household wealth worldwide. Buying a housing has always been a major investment for most people. The price of housing is affected by many factors. Some of them are global in nature such as the general economy of a country or inflation rate. Others can be more specific to the properties themselves. These factors can be further divided to structural and locational factors. Structural factors are variables related to the property themselves such as the size, fitting, and tenure of the property. Locational factors are variables related to the neighbourhood of the properties such as proximity to childcare centre, public transport service and shopping centre.\nConventional, housing resale prices predictive models were built by using Ordinary Least Square (OLS) method. However, this method failed to take into consideration that spatial autocorrelation and spatial heterogeneity exist in geographic data sets such as housing transactions. With the existence of spatial autocorrelation, the OLS estimation of predictive housing resale pricing models could lead to biased, inconsistent, or inefficient results (Anselin 1998). In view of this limitation, Geographical Weighted Models were introduced to better calibrate predictive models for housing resale prices.\nIn this study, we focus on key residential areas—Jurong East, Woodlands, Yishun, Tampines, Kallang, and Queenstown—alongside HDB projects for 2024. This targeted approach aims to offer valuable insights for prospective homebuyers, helping them make well-informed decisions and better prepare for the housing market.\n\n\nIn this take-home exercise, we are required to calibrate a predictive model to predict HDB resale prices between July-September 2024 by using HDB resale transaction records in 2023."
  },
  {
    "objectID": "Take_home_Ex/Take_home_Ex03/Take_home_Ex03.html#predicting-hdb-resale-prices-with-geographically-weighted-machine-learning-methods",
    "href": "Take_home_Ex/Take_home_Ex03/Take_home_Ex03.html#predicting-hdb-resale-prices-with-geographically-weighted-machine-learning-methods",
    "title": "Take home Exercise03",
    "section": "",
    "text": "Setting the SceneThe Task\n\n\nHousing is an essential component of household wealth worldwide. Buying a housing has always been a major investment for most people. The price of housing is affected by many factors. Some of them are global in nature such as the general economy of a country or inflation rate. Others can be more specific to the properties themselves. These factors can be further divided to structural and locational factors. Structural factors are variables related to the property themselves such as the size, fitting, and tenure of the property. Locational factors are variables related to the neighbourhood of the properties such as proximity to childcare centre, public transport service and shopping centre.\nConventional, housing resale prices predictive models were built by using Ordinary Least Square (OLS) method. However, this method failed to take into consideration that spatial autocorrelation and spatial heterogeneity exist in geographic data sets such as housing transactions. With the existence of spatial autocorrelation, the OLS estimation of predictive housing resale pricing models could lead to biased, inconsistent, or inefficient results (Anselin 1998). In view of this limitation, Geographical Weighted Models were introduced to better calibrate predictive models for housing resale prices.\nIn this study, we focus on key residential areas—Jurong East, Woodlands, Yishun, Tampines, Kallang, and Queenstown—alongside HDB projects for 2024. This targeted approach aims to offer valuable insights for prospective homebuyers, helping them make well-informed decisions and better prepare for the housing market.\n\n\nIn this take-home exercise, we are required to calibrate a predictive model to predict HDB resale prices between July-September 2024 by using HDB resale transaction records in 2023."
  },
  {
    "objectID": "Take_home_Ex/Take_home_Ex03/Take_home_Ex03.html#the-data",
    "href": "Take_home_Ex/Take_home_Ex03/Take_home_Ex03.html#the-data",
    "title": "Take home Exercise03",
    "section": "1.The Data",
    "text": "1.The Data\n\nAspatial dataset:\n\nHDB Resale data: a list of HDB resale transacted prices in Singapore from Jan 2017 onwards. It is in csv format which can be downloaded from Data.gov.sg.\n\nGeospatial dataset:\n\nMP14_SUBZONE_WEB_PL: a polygon feature data providing information of URA 2014 Master Plan Planning Subzone boundary data. It is in ESRI shapefile format. This data set was also downloaded from Data.gov.sg\n\nLocational factors with geographic coordinates:\n\nDownloaded from Data.gov.sg.\n\nEldercare data is a list of eldercare in Singapore. It is in shapefile format.\nHawker Centre data is a list of hawker centres in Singapore. It is in geojson format.\nParks data is a list of parks in Singapore. It is in geojson format.\nSupermarket data is a list of supermarkets in Singapore. It is in geojson format.\nCHAS clinics data is a list of CHAS clinics in Singapore. It is in geojson format.\nKindergartens data is a list of kindergartens in Singapore. It is in geojson format.\n\n\n\n\n\n\n\n\nNote\n\n\n\nIf we need to display the prediction results on a web application or map, GeoJSON is more convenient because most web map libraries (such as Leaflet and Mapbox) directly support GeoJSON data.\nWhen visualizing the analysis results, we can directly export them to GeoJSON, which is convenient for displaying the prediction results on various online map applications.\n\n\n\nDownloaded from Datamall.lta.gov.sg.\n\nMRT data is a list of MRT/LRT stations in Singapore with the station names and codes. It is in shapefile format.\nBus stops data is a list of bus stops in Singapore. It is in shapefile format.\n\n\nLocational factors without geographic coordinates:\n\nRetrieved/Scraped from other sources\n\nCBD coordinates obtained from Google.\nShopping malls data is a list of Shopping malls in Singapore obtained from Wikipedia.\nGood primary schools is a list of primary schools that are ordered in ranking in terms of popularity and this can be found at Local Salary Forum."
  },
  {
    "objectID": "Take_home_Ex/Take_home_Ex03/Take_home_Ex03.html#getting-start",
    "href": "Take_home_Ex/Take_home_Ex03/Take_home_Ex03.html#getting-start",
    "title": "Take home Exercise03",
    "section": "2.Getting start",
    "text": "2.Getting start\n\nInstalling and Loading R packages\n\npacman::p_load(sf, spdep, GWmodel, SpatialML, tmap, rsample, Metrics, tidyverse,stringr,httr, jsonlite, rvest,knitr,kableExtra)\n\n\n\nImporting Resale Data\nUsing HDB resale transaction records in 2023 and the future data from July to September for comparison.\n\nresale &lt;- read_csv(\"data/rawdata/aspatial/resale.csv\") %&gt;%\n  filter((month &gt;= \"2023-01\" & month &lt; \"2024-01\") | \n         (month &gt;= \"2024-07\" & month &lt;= \"2024-09\"))\n\nRows: 192234 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (8): month, town, flat_type, block, street_name, storey_range, flat_mode...\ndbl (3): floor_area_sqm, lease_commence_date, resale_price\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\nData Processing for HDB Resale\nThe specific steps are as follows:\n\nCreate a new column address: Combine the address information into a new column address by splicing the block and street_name columns.\nExtract and convert the remaining lease time: Extract the year and month from the remaining_lease column and create integer columns remaining_lease_yr and remaining_lease_mth to represent the remaining lease years and months respectively.\nRemove columns that are no longer needed: Delete the block, street_name, and remaining_lease columns because they have been integrated or decomposed into other variables.\nClean the flat_type column: Remove the word “ROOM” in the flat_type column and represent the room type as a pure number.\nConvert the resale_price column to an integer: Convert the data type of the resale price resale_price column to an integer.\nSeparate the storey_range column: Split the floor range information from the storey_range column into two columns, min_storey and max_storey, and convert them to integer type.\nCalculate the middle value of the floor: Create a storey_mid column, calculate the average of min_storey and max_storey, and represent the middle number of the floor.\nRemove redundant floor columns: Delete the min_storey and max_storey columns because their middle values ​​are already represented by the storey_mid column.\n\n\nresale_tidy &lt;- resale %&gt;%\n  mutate(address = paste(block,street_name)) %&gt;% \n  mutate(remaining_lease_yr = as.integer(    \n    str_sub(remaining_lease, 0, 2)))%&gt;%  \n  mutate(remaining_lease_mth = as.integer(\n    str_sub(remaining_lease, 9, 11))) %&gt;% \n  mutate(total_remaining_months = remaining_lease_yr * 12 + remaining_lease_mth)  %&gt;% \n  select(-block, -street_name,-remaining_lease,-remaining_lease_yr,-remaining_lease_mth) %&gt;% \n  mutate(flat_type = str_replace(flat_type, \" ROOM\", \"\")) %&gt;% \n  mutate(resale_price = as.integer(resale_price)) %&gt;% \n  separate(storey_range, into = c(\"min_storey\", \"max_storey\"), sep = \" TO \", convert = TRUE) %&gt;%\n  mutate(storey_mid = (min_storey + max_storey) / 2) %&gt;%\n  select(-min_storey, -max_storey)     \n\n\n\nConvert into categorical variables\nFactor is a data type used to represent categorical variables. And they can store discrete, finite categories.\n\nresale_tidy$town &lt;- as.factor(resale_tidy$town)\n\nSee how many categories of the flat_type.\n\nunique(resale_tidy$flat_type)\n\n[1] \"2\"                \"3\"                \"4\"                \"5\"               \n[5] \"EXECUTIVE\"        \"MULTI-GENERATION\" \"1\"               \n\n\nSee how many categories of the flat_model.\n\nunique(resale_tidy$flat_model)\n\n [1] \"Improved\"               \"New Generation\"         \"Model A\"               \n [4] \"DBSS\"                   \"Standard\"               \"Apartment\"             \n [7] \"Simplified\"             \"Premium Apartment\"      \"Model A-Maisonette\"    \n[10] \"Maisonette\"             \"Model A2\"               \"Type S1\"               \n[13] \"Type S2\"                \"2-room\"                 \"Adjoined flat\"         \n[16] \"Terrace\"                \"Premium Apartment Loft\" \"Multi Generation\"      \n[19] \"Improved-Maisonette\"    \"3Gen\"                  \n\n\n\n\nNumerical categorical variables for flat_model.\n\nresale_tidy$flat_model_numeric &lt;- as.numeric(factor(resale_tidy$flat_model))\n\nfactor_levels &lt;- levels(factor(resale_tidy$flat_model))\nmapping &lt;- data.frame(Number = 1:length(factor_levels), Model = factor_levels)\nprint(mapping)\n\n   Number                  Model\n1       1                 2-room\n2       2                   3Gen\n3       3          Adjoined flat\n4       4              Apartment\n5       5                   DBSS\n6       6               Improved\n7       7    Improved-Maisonette\n8       8             Maisonette\n9       9                Model A\n10     10     Model A-Maisonette\n11     11               Model A2\n12     12       Multi Generation\n13     13         New Generation\n14     14      Premium Apartment\n15     15 Premium Apartment Loft\n16     16             Simplified\n17     17               Standard\n18     18                Terrace\n19     19                Type S1\n20     20                Type S2\n\n\n\n\nNumerical categorical variables flat_type.\n\nresale_tidy$flat_type_numeric &lt;- as.numeric(factor(resale_tidy$flat_type))\n\nfactor_levels2 &lt;- levels(factor(resale_tidy$flat_type))\nmapping &lt;- data.frame(Number = 1:length(factor_levels2), Model = factor_levels2)\nprint(mapping)\n\n  Number            Model\n1      1                1\n2      2                2\n3      3                3\n4      4                4\n5      5                5\n6      6        EXECUTIVE\n7      7 MULTI-GENERATION\n\n\n\nresale_tidy&lt;-resale_tidy %&gt;% select(-flat_type,-flat_model)\n\n\n\n\n\n\n\nNote\n\n\n\nAfter conversion to factors, the model can generate different coefficients for each category, which makes it easier to interpret the specific impact of each category on the result. For example, for a variable like “flat_model” (house model), the model can provide the impact of each house model on price, rather than simply encoding the house model.\n\n\n\n\nGetting coords\nWe firstly extract the unique address from dataset,which will be more quickly to get the result.\n\nadd_list &lt;- sort(unique(resale_tidy$address))\n\nUsing the code provided by Professor Kam ,which created the function to get the coordinates from onemap website.\n\n\nShow the code\nget_coords &lt;- function(add_list){\n  \n  # Create a data frame to store all retrieved coordinates\n  postal_coords &lt;- data.frame()\n    \n  for (i in add_list){\n    #print(i)\n\n    r &lt;- GET('https://www.onemap.gov.sg/api/common/elastic/search?',\n           query=list(searchVal=i,\n                     returnGeom='Y',\n                     getAddrDetails='Y'))\n    data &lt;- fromJSON(rawToChar(r$content))\n    found &lt;- data$found\n    res &lt;- data$results\n    \n    # Create a new data frame for each address\n    new_row &lt;- data.frame()\n    \n    # If single result, append \n    if (found == 1){\n      postal &lt;- res$POSTAL \n      lat &lt;- res$LATITUDE\n      lng &lt;- res$LONGITUDE\n      new_row &lt;- data.frame(address= i, \n                            postal = postal, \n                            latitude = lat, \n                            longitude = lng)\n    }\n    \n    # If multiple results, drop NIL and append top 1\n    else if (found &gt; 1){\n      # Remove those with NIL as postal\n      res_sub &lt;- res[res$POSTAL != \"NIL\", ]\n      \n      # Set as NA first if no Postal\n      if (nrow(res_sub) == 0) {\n          new_row &lt;- data.frame(address= i, \n                                postal = NA, \n                                latitude = NA, \n                                longitude = NA)\n      }\n      \n      else{\n        top1 &lt;- head(res_sub, n = 1)\n        postal &lt;- top1$POSTAL \n        lat &lt;- top1$LATITUDE    # return x and y\n        lng &lt;- top1$LONGITUDE\n        new_row &lt;- data.frame(address= i, \n                              postal = postal, \n                              latitude = lat, \n                              longitude = lng)\n      }\n    }\n\n    else {\n      new_row &lt;- data.frame(address= i, \n                            postal = NA,  \n                            latitude = NA, # take care of any possible data \n                            longitude = NA)\n    }\n    \n    # Add the row\n    postal_coords &lt;- rbind(postal_coords, new_row)\n  }\n  return(postal_coords)\n}\n\n\n\n\n\n\n\n\nNote\n\n\n\nIn this exercise,we mainly use the detail address to get the coordinate and there is another method,which is using the postal,and the result is also the similar.\n\n\nStart to get coordinates of each asset.\n\ncoords_resale2 &lt;- get_coords(add_list)\n\nNext saving and reading the data for later convenient analysis\n\nsaveRDS(coords_resale2, \"data/rds/coords_resale2.rds\")\n\n\ncoords_resale2 &lt;- readRDS(\"data/rds/coords_resale2.rds\")\n\n\nsaveRDS(coords_resale, \"data/rds/coords_resale.rds\")\n\n\ncoords_resale &lt;- readRDS(\"data/rds/coords_resale.rds\")\n\n\n\nIntegrate data by using left join\n\nresale_tidy &lt;- resale_tidy %&gt;%\n  left_join(coords_resale2, by = \"address\")\n\nDelete the useless postal columns\n\nresale_tidy2 &lt;- resale_tidy %&gt;%\n  select(-postal) \n\nHere we check that there is no coordinate information in the dataset ,so we manually add on and transfer into Singapore coordinate.\n\nprint(st_crs(resale_tidy2))\n\nCoordinate Reference System: NA\n\n\n\nresale_tidy2 &lt;- st_as_sf(resale_tidy2, coords = c(\"longitude\", \"latitude\"), crs = 4326) %&gt;%\n  st_transform(crs = 3414)\n\nNow we can see it is successfully converted.\n\nst_crs(resale_tidy2)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\n\nImporting Geospatial Data\n\nmpsz &lt;- st_read(dsn = \"data/rawdata/geospatial\", \n                layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `/Users/yangyayong/Downloads/学校文件/smu文件/Term 3/G/yyyirene/ISSS626-GAA/Take_home_Ex/Take_home_Ex03/data/rawdata/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\n\nImporting Locational factors :\nImporting Locational factors with geographic coordinates\n\neldercare &lt;- st_read(dsn = \"data/rawdata/geospatial\", layer = \"ELDERCARE\")   #meter\n\nReading layer `ELDERCARE' from data source \n  `/Users/yangyayong/Downloads/学校文件/smu文件/Term 3/G/yyyirene/ISSS626-GAA/Take_home_Ex/Take_home_Ex03/data/rawdata/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 133 features and 18 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 14481.92 ymin: 28218.43 xmax: 41665.14 ymax: 46804.9\nProjected CRS: SVY21\n\nhawker_centres &lt;- st_read(\"data/rawdata/geospatial/HawkerCentresGEOJSON.geojson\")\n\nReading layer `HawkerCentresGEOJSON' from data source \n  `/Users/yangyayong/Downloads/学校文件/smu文件/Term 3/G/yyyirene/ISSS626-GAA/Take_home_Ex/Take_home_Ex03/data/rawdata/geospatial/HawkerCentresGEOJSON.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 125 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6974 ymin: 1.272716 xmax: 103.9882 ymax: 1.449017\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\nkindergartens &lt;- st_read(\"data/rawdata/geospatial/Kindergartens.geojson\")\n\nReading layer `Kindergartens' from data source \n  `/Users/yangyayong/Downloads/学校文件/smu文件/Term 3/G/yyyirene/ISSS626-GAA/Take_home_Ex/Take_home_Ex03/data/rawdata/geospatial/Kindergartens.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 448 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6887 ymin: 1.247759 xmax: 103.9717 ymax: 1.455452\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\nparks &lt;- st_read(\"data/rawdata/geospatial/Parks.geojson\")\n\nReading layer `Parks' from data source \n  `/Users/yangyayong/Downloads/学校文件/smu文件/Term 3/G/yyyirene/ISSS626-GAA/Take_home_Ex/Take_home_Ex03/data/rawdata/geospatial/Parks.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 430 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6929 ymin: 1.214491 xmax: 104.0538 ymax: 1.462094\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\nsupermarkets &lt;- st_read(\"data/rawdata/geospatial/SupermarketsGEOJSON.geojson\")\n\nReading layer `SupermarketsGEOJSON' from data source \n  `/Users/yangyayong/Downloads/学校文件/smu文件/Term 3/G/yyyirene/ISSS626-GAA/Take_home_Ex/Take_home_Ex03/data/rawdata/geospatial/SupermarketsGEOJSON.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 526 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6258 ymin: 1.24715 xmax: 104.0036 ymax: 1.461526\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\nchas_clinics &lt;- st_read(\"data/rawdata/geospatial/CHASclinics.geojson\") \n\nReading layer `CHASClinics' from data source \n  `/Users/yangyayong/Downloads/学校文件/smu文件/Term 3/G/yyyirene/ISSS626-GAA/Take_home_Ex/Take_home_Ex03/data/rawdata/geospatial/CHASClinics.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 1193 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.5818 ymin: 1.016264 xmax: 103.9903 ymax: 1.456037\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\nBusStop &lt;- st_read(dsn = \"data/rawdata/geospatial\", layer = \"BusStop\") \n\nReading layer `BusStop' from data source \n  `/Users/yangyayong/Downloads/学校文件/smu文件/Term 3/G/yyyirene/ISSS626-GAA/Take_home_Ex/Take_home_Ex03/data/rawdata/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 5166 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3970.122 ymin: 26482.1 xmax: 48285.52 ymax: 52983.82\nProjected CRS: SVY21\n\nMRT &lt;- st_read(dsn = \"data/rawdata/geospatial\", layer = \"RapidTransitSystemStation\") \n\nReading layer `RapidTransitSystemStation' from data source \n  `/Users/yangyayong/Downloads/学校文件/smu文件/Term 3/G/yyyirene/ISSS626-GAA/Take_home_Ex/Take_home_Ex03/data/rawdata/geospatial' \n  using driver `ESRI Shapefile'\n\n\nWarning in CPL_read_ogr(dsn, layer, query, as.character(options), quiet, : GDAL\nMessage 1: Non closed ring detected. To avoid accepting it, set the\nOGR_GEOMETRY_ACCEPT_UNCLOSED_RING configuration option to NO\n\n\nSimple feature collection with 230 features and 5 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 6068.209 ymin: 27478.44 xmax: 45377.5 ymax: 47913.58\nProjected CRS: SVY21\n\n\nConvert a multipoint object (MULTIPOINT) to a single point (POINT) ,which is convenient for subsequent calculations\n\nMRT &lt;- st_cast(MRT, \"POINT\")\n\nWarning in st_cast.sf(MRT, \"POINT\"): repeating attributes for all\nsub-geometries for which they may not be constant\n\n\nImporting Locational factors without geographic coordinates\n\nGoodprimaryschool &lt;- read_csv(\"data/rawdata/aspatial/Goodprimaryschool.csv\") \n\nRows: 179 Columns: 1\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): school_name\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nShoppingmalls &lt;- read_csv(\"data/rawdata/aspatial/Shoppingmalls.csv\")\n\nRows: 174 Columns: 2\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): mallname, malladdress\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nGetting coords for Good primary schoolGetting coords for Shopping malls\n\n\n\nadd_list&lt;- sort(unique(Goodprimaryschool$school_name))\n\n\ncoords_Goodprimaryschool &lt;- get_coords(add_list) \n\n\nsaveRDS(coords_Goodprimaryschool, \"data/rds/coords_Goodprimaryschool.rds\")\n\n\ncoords_Goodprimaryschool &lt;- readRDS(\"data/rds/coords_Goodprimaryschool.rds\")\n\n\nGoodprimaryschool &lt;- st_as_sf(coords_Goodprimaryschool, coords = c(\"longitude\", \"latitude\"), crs = 4326) %&gt;%\n  st_transform(crs = 3414)\n\n\nst_crs(Goodprimaryschool)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\n\n\nadd_list&lt;- sort(unique(Shoppingmalls$malladdress))\n\n\ncoords_Shoppingmalls &lt;- get_coords(add_list)\n\n\nsaveRDS(coords_Shoppingmalls, \"data/rds/coords_Shoppingmalls.rds\")\n\n\ncoords_Shoppingmalls &lt;- readRDS(\"data/rds/coords_Shoppingmalls.rds\")\n\n\nShoppingmalls &lt;- st_as_sf(coords_Shoppingmalls, coords = c(\"longitude\", \"latitude\"), crs = 4326) %&gt;%\n  st_transform(crs = 3414)\n\n\nst_crs(Shoppingmalls)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\n\n\n\n\nData Wrangling\nApply Spatial Jitter:\n\n\n\n\n\n\nNote\n\n\n\nWhen using GWmodel to calibrate explanatory or predictive models, it is very important to ensure that there are no overlapping point features\nBy adding a slight jitter, we make the points more distinguishable in maps or plots.\n\n\nThe code chunk below is used to check if there are overlapping point features.\n\noverlapping_points &lt;- resale_tidy2 %&gt;%\n  mutate(overlap = lengths(st_equals(., .)) &gt; 1)\n\nFrom the result ,there are indeed overlapping points in the dataset.\nSo in the code chunk below, st_jitter() of sf package is used to move the point features by 0.05m to avoid overlapping point features.\n\nresale_tidy2 &lt;- resale_tidy2 %&gt;% st_jitter(amount = .05)\n\nAccording to the Google provided,the Singapore’s CBD coordinate and we transfer into Singapore projection\n\ncbd &lt;- st_sfc(st_point(c(103.851959, 1.283850)), crs = 3414)\n\nCalculate Distances: Use st_distance() to calculate the Euclidean distance between each property and the target locations.\n\nelders &lt;- st_transform(eldercare, crs = 3414)\nhawkers &lt;- st_transform(hawker_centres, crs = 3414)\nparks &lt;- st_transform(parks, crs = 3414)\nsupermarkets &lt;- st_transform(supermarkets, crs = 3414)\nchas_clinics &lt;- st_transform(chas_clinics, crs = 3414)\nMRT &lt;- st_transform(MRT, crs = 3414)\n\n\n\nCompute the distance between properties and facilities:\n\nresale_tidy3 &lt;- resale_tidy2 %&gt;%\n  mutate(\n    dist_to_elders = st_distance(., elders) %&gt;% apply(1, min),\n    dist_to_hawkers = st_distance(., hawkers) %&gt;% apply(1, min),\n    dist_to_parks = st_distance(., parks) %&gt;% apply(1, min),\n    dist_to_supermarkets = st_distance(., supermarkets) %&gt;% apply(1, min),\n    dist_to_chas_clinics = st_distance(., chas_clinics) %&gt;% apply(1, min),\n    dist_to_cbd = st_distance(., cbd) %&gt;% apply(1, min),\n    dist_to_Shoppingmalls = st_distance(.,Shoppingmalls ) %&gt;% apply(1, min),\n    dist_to_MRT = st_distance(.,MRT ) %&gt;% apply(1, min),\n    dist_to_Goodprimaryschool = st_distance(.,Goodprimaryschool ) %&gt;% apply(1, min)\n    \n  )\n\nNow we can see the result as below :\n\nNote that the units are all meter.\nNext saving and reading the data for later convenient analysis\n\nsaveRDS(resale_tidy3, \"data/rds/resale_tidy3.rds\")\n\n\nresale_tidy3 &lt;- readRDS(\"data/rds/resale_tidy3.rds\")\n\n\n\nSelect the target area\n\nresale_tidy4 &lt;- resale_tidy3 %&gt;%\n  filter(town %in% c(\"JURONG EAST\", \"WOODLANDS\", \"YISHUN\", \"TAMPINES\", \"KALLANG/WHAMPOA\", \"QUEENSTOWN\")) %&gt;% \n  filter(flat_type_numeric %in% c(3, 4, 5)) %&gt;%\n  select(-town, -address)\n\n\n\nPotting the target area\n\ntmap_options(check.and.fix = TRUE)\n\nmpsz &lt;- st_make_valid(mpsz)\n\nstudy_areas &lt;- c(\"JURONG EAST\", \"WOODLANDS\", \"YISHUN\", \"TAMPINES\", \"KALLANG\", \"QUEENSTOWN\")\n\nmpsz_filtered &lt;- mpsz %&gt;%\n  filter(PLN_AREA_N %in% study_areas)\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(mpsz) +\n  tm_borders(col = \"gray80\", lwd = 0.5) +  \n  tm_shape(mpsz_filtered) +\n  tm_polygons(col = \"PLN_AREA_N\", palette = \"Set3\", border.col = \"black\") +  \n  tm_text(\"PLN_AREA_N\", size = 0.7, remove.overlap = TRUE, col = \"black\") +   \n  tm_layout(title = \"Map of Study Areas\",\n            legend.position = c(\"right\", \"bottom\"))\n\n\n\n\n\n\n\n\n\n\nCounting numbers of facilities-point in Buffering area\nBuffering\nBefore buffering,it is import to check and transform into the same crs.\n\nBusStop &lt;- BusStop %&gt;% st_transform(crs = 3414)\n\n\nkindergartens &lt;- kindergartens %&gt;% st_transform(crs = 3414)\n\n\nst_crs(kindergartens)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\nst_crs(BusStop)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\nbuffer_350m &lt;- st_buffer(resale_tidy4, dist = 350) \nbuffer_1000m &lt;- st_buffer(resale_tidy4, dist = 1000)\n\n\n\nPlot the newly created buffers and the assets.\n\n# Set tmap to static mode\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\n# Create the map with multiple layers\ntm_shape(mpsz) +\n  tm_borders() +\n  tm_shape(buffer_350m) +\n  tm_polygons() +\n  tm_shape(resale_tidy4) +\n  tm_dots()\n\n\n\n\n\n\n\n\n\n# Set tmap to static mode\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\n# Create the map with multiple layers\ntm_shape(mpsz) +\n  tm_borders() +\n  tm_shape(buffer_1000m) +\n  tm_polygons() +\n  tm_shape(resale_tidy4) +\n  tm_dots()\n\n\n\n\n\n\n\n\n\n\nCount number of points within a distance\n\nbuffer_350m$BusStop_count &lt;- lengths(st_intersects(buffer_350m, BusStop))\n\n\nbuffer_1000m$kindergartens_count&lt;- lengths(st_intersects(buffer_1000m, kindergartens))\n\n\n\nAdding the new features into the dataset.\n\nresale_tidy5 &lt;- resale_tidy4 %&gt;%\n  mutate(\n    BusStop_within_350m = buffer_350m$BusStop_count,\n    Kindergartens_within_1000m = buffer_1000m$kindergartens_count\n  )\n\nThe result show as below:\n\nIn this study,we first select the train and test data in 2023 for model training and also select the future data 2024 for later predict comparison.\nThen we did not consider the time influence to the house price,and we remove the time variables.\n\nresale_tidy5_future &lt;- resale_tidy5 %&gt;%\n  filter(month &gt;= \"2024-07\" & month &lt;= \"2024-09\") %&gt;% select(-month)\n\n\nresale_tidy5 &lt;- resale_tidy5 %&gt;% filter(month &gt;= \"2023-01\" & month &lt; \"2024-01\") %&gt;% select(-month)\n\n\nsaveRDS(resale_tidy5, \"data/rds/resale_tidy5.rds\")\n\n\nresale_tidy5 &lt;- readRDS(\"data/rds/resale_tidy5.rds\")"
  },
  {
    "objectID": "Take_home_Ex/Take_home_Ex03/Take_home_Ex03.html#computing-correlation-matrix",
    "href": "Take_home_Ex/Take_home_Ex03/Take_home_Ex03.html#computing-correlation-matrix",
    "title": "Take home Exercise03",
    "section": "3.Computing Correlation Matrix",
    "text": "3.Computing Correlation Matrix\nBefore loading the predictors into a predictive model, it is always a good practice to use correlation matrix to examine if there is sign of multicolinearity.\n\nresale_tidy5_nogeo &lt;- resale_tidy5 %&gt;%\n  st_drop_geometry() \n\nData type checking\n\nsapply(resale_tidy5_nogeo, class)\n\n            floor_area_sqm        lease_commence_date \n                 \"numeric\"                  \"numeric\" \n              resale_price     total_remaining_months \n                 \"integer\"                  \"numeric\" \n                storey_mid         flat_model_numeric \n                 \"numeric\"                  \"numeric\" \n         flat_type_numeric             dist_to_elders \n                 \"numeric\"                  \"numeric\" \n           dist_to_hawkers              dist_to_parks \n                 \"numeric\"                  \"numeric\" \n      dist_to_supermarkets       dist_to_chas_clinics \n                 \"numeric\"                  \"numeric\" \n               dist_to_cbd      dist_to_Shoppingmalls \n                 \"numeric\"                  \"numeric\" \n               dist_to_MRT  dist_to_Goodprimaryschool \n                 \"numeric\"                  \"numeric\" \n       BusStop_within_350m Kindergartens_within_1000m \n                 \"integer\"                  \"integer\" \n\n\nReplace NA values with 0 in both numeric and integer columns\n\nresale_tidy5_nogeo &lt;- resale_tidy5_nogeo %&gt;% \n  dplyr::mutate(across(where(~ is.numeric(.) || is.integer(.)), ~ replace_na(., 0)))\n\nGenerate correlation plot using only numeric and integer columns\n\ncorrplot::corrplot(cor(resale_tidy5_nogeo), \n                   diag = FALSE, \n                   order = \"AOE\",\n                   tl.pos = \"td\", \n                   tl.cex = 0.5, \n                   method = \"number\", \n                   type = \"upper\")\n\n\n\n\n\n\n\n\nFind correlation coefficients greater than 0.8 or less than -0.8 (excluding the 1s on the diagonal)\n\ncor_matrix &lt;- cor(resale_tidy5_nogeo)\n\nhigh_corr &lt;- which(abs(cor_matrix) &gt; 0.8 & abs(cor_matrix) &lt; 1, arr.ind = TRUE)\n\nif (nrow(high_corr) &gt; 0) {\n  cat(\"There are pairs of variables with correlation coefficients greater than 0.8 or less than -0.8:\\n\")\n  for (i in 1:nrow(high_corr)) {\n    cat(rownames(cor_matrix)[high_corr[i, \"row\"]], \"and\", colnames(cor_matrix)[high_corr[i, \"col\"]],\n        \"The correlation coefficient is:\", cor_matrix[high_corr[i, \"row\"], high_corr[i, \"col\"]], \"\\n\")\n  }\n} else {\n  cat(\"There are no variable pairs with correlation coefficients greater than 0.8 or less than -0.8。\\n\")\n}\n\nThere are pairs of variables with correlation coefficients greater than 0.8 or less than -0.8:\nflat_type_numeric and floor_area_sqm The correlation coefficient is: 0.9368229 \nfloor_area_sqm and flat_type_numeric The correlation coefficient is: 0.9368229 \n\n\nFrom the result ,we decide to remove : floor_area_sqm and lease_commence_date\n\nresale_tidy5_nogeo &lt;- resale_tidy5_nogeo %&gt;% select(-floor_area_sqm,-lease_commence_date)\n\nCheck whether we have removed the high relevant variables.\n\ncor_matrix &lt;- cor(resale_tidy5_nogeo)\n\n# Find correlation coefficients greater than 0.8 or less than -0.8 (excluding the 1s on the diagonal)\nhigh_corr &lt;- which(abs(cor_matrix) &gt; 0.8 & abs(cor_matrix) &lt; 1, arr.ind = TRUE)\n\nif (nrow(high_corr) &gt; 0) {\n  cat(\"There are pairs of variables with correlation coefficients greater than 0.8 or less than -0.8:\\n\")\n  for (i in 1:nrow(high_corr)) {\n    cat(rownames(cor_matrix)[high_corr[i, \"row\"]], \"and\", colnames(cor_matrix)[high_corr[i, \"col\"]],\n        \"The correlation coefficient is:\", cor_matrix[high_corr[i, \"row\"], high_corr[i, \"col\"]], \"\\n\")\n  }\n} else {\n  cat(\"There are no variable pairs with correlation coefficients greater than 0.8 or less than -0.8。\\n\")\n}\n\nThere are no variable pairs with correlation coefficients greater than 0.8 or less than -0.8。\n\n\nRemoving the highest correlation coefficients variables from the dataset.\n\nresale_tidy6 &lt;- resale_tidy5 %&gt;% select(-floor_area_sqm,-lease_commence_date)\n\n\nsummary(resale_tidy6)\n\n  resale_price     total_remaining_months   storey_mid    flat_model_numeric\n Min.   : 150000   Min.   : 506.0         Min.   : 2.00   Min.   : 2.000    \n 1st Qu.: 430000   1st Qu.: 730.0         1st Qu.: 5.00   1st Qu.: 6.000    \n Median : 528000   Median : 850.0         Median : 8.00   Median : 9.000    \n Mean   : 545977   Mean   : 867.6         Mean   : 8.31   Mean   : 9.539    \n 3rd Qu.: 620000   3rd Qu.:1071.0         3rd Qu.:11.00   3rd Qu.:11.000    \n Max.   :1300888   Max.   :1154.0         Max.   :47.00   Max.   :18.000    \n                   NA's   :520                                              \n flat_type_numeric          geometry    dist_to_elders      dist_to_hawkers  \n Min.   :3.000     POINT        :6739   Min.   :   0.0242   Min.   :  40.42  \n 1st Qu.:3.000     epsg:3414    :   0   1st Qu.: 322.9330   1st Qu.: 407.21  \n Median :4.000     +proj=tmer...:   0   Median : 545.4370   Median : 640.19  \n Mean   :3.948                          Mean   : 683.7001   Mean   : 722.19  \n 3rd Qu.:4.000                          3rd Qu.: 918.6596   3rd Qu.: 978.59  \n Max.   :5.000                          Max.   :2787.0916   Max.   :2281.50  \n                                                                             \n dist_to_parks     dist_to_supermarkets dist_to_chas_clinics  dist_to_cbd   \n Min.   :  60.03   Min.   :   0.0043    Min.   :  0.0048     Min.   :37265  \n 1st Qu.: 517.00   1st Qu.: 163.9752    1st Qu.:105.2877     1st Qu.:46518  \n Median : 780.76   Median : 253.3517    Median :163.8141     Median :52887  \n Mean   : 943.64   Mean   : 289.2077    Mean   :175.9627     Mean   :50621  \n 3rd Qu.:1324.09   3rd Qu.: 366.9664    3rd Qu.:234.3876     3rd Qu.:54069  \n Max.   :2411.75   Max.   :1451.8109    Max.   :663.8865     Max.   :56689  \n                                                                            \n dist_to_Shoppingmalls  dist_to_MRT      dist_to_Goodprimaryschool\n Min.   :   0.0502     Min.   :  20.56   Min.   :  43.83          \n 1st Qu.: 432.3296     1st Qu.: 352.14   1st Qu.: 233.14          \n Median : 636.8068     Median : 538.76   Median : 379.55          \n Mean   : 681.2412     Mean   : 597.72   Mean   : 443.87          \n 3rd Qu.: 897.0554     3rd Qu.: 799.33   3rd Qu.: 565.47          \n Max.   :1732.2770     Max.   :1973.05   Max.   :2081.76          \n                                                                  \n BusStop_within_350m Kindergartens_within_1000m\n Min.   : 0.000      Min.   : 0.000            \n 1st Qu.: 6.000      1st Qu.: 4.000            \n Median : 8.000      Median : 5.000            \n Mean   : 7.859      Mean   : 5.943            \n 3rd Qu.:10.000      3rd Qu.: 8.000            \n Max.   :16.000      Max.   :15.000            \n                                               \n\n\n\n\n\n\n\n\nNote\n\n\n\nThe print report above reveals that variables BusStop_within_350m,Kindergartens_within_1000m are consist of 0 values which is reasonable in this case ,because some HDB may not have BusStop and Kindergartens.\nHowever ,will notice there are some missing value in total_remaining_months and we use mean to replace them.\n\n\n\nresale_tidy6$total_remaining_months[is.na(resale_tidy6$total_remaining_months)] &lt;- mean(resale_tidy6$total_remaining_months, na.rm = TRUE)\n\n\nresale_tidy6_future &lt;- resale_tidy5_future %&gt;% select(-floor_area_sqm,-lease_commence_date)\n\nresale_tidy6_future$total_remaining_months[is.na(resale_tidy6_future$total_remaining_months)] &lt;- mean(resale_tidy6_future$total_remaining_months, na.rm = TRUE)"
  },
  {
    "objectID": "Take_home_Ex/Take_home_Ex03/Take_home_Ex03.html#data-sampling",
    "href": "Take_home_Ex/Take_home_Ex03/Take_home_Ex03.html#data-sampling",
    "title": "Take home Exercise03",
    "section": "4.Data Sampling",
    "text": "4.Data Sampling\n\nset.seed(1234) \nresale_split &lt;- initial_split(resale_tidy6, prop = 6.5/10,) \ntrain_data &lt;- training(resale_split) \ntest_data &lt;- testing(resale_split)\n\n\nsaveRDS(train_data, \"data/rds/train_data.rds\")\nsaveRDS(test_data, \"data/rds/test_data.rds\")\n\ntrain_data &lt;- readRDS(\"data/rds/train_data.rds\")\ntest_data &lt;- readRDS(\"data/rds/test_data.rds\")"
  },
  {
    "objectID": "Take_home_Ex/Take_home_Ex03/Take_home_Ex03.html#building-a-non-spatial-multiple-linear-regression",
    "href": "Take_home_Ex/Take_home_Ex03/Take_home_Ex03.html#building-a-non-spatial-multiple-linear-regression",
    "title": "Take home Exercise03",
    "section": "5.Building a non-spatial multiple linear regression",
    "text": "5.Building a non-spatial multiple linear regression\n\nprice_mlr &lt;- lm(resale_price ~ total_remaining_months +\n                  storey_mid + flat_model_numeric +\n                  flat_type_numeric + dist_to_elders + dist_to_hawkers +\n                  dist_to_parks + dist_to_supermarkets + dist_to_chas_clinics + \n                  dist_to_cbd + dist_to_Shoppingmalls +\n                  dist_to_MRT + dist_to_Goodprimaryschool +BusStop_within_350m+\n                  Kindergartens_within_1000m,\n                data=train_data)\nsummary(price_mlr)\n\n\nCall:\nlm(formula = resale_price ~ total_remaining_months + storey_mid + \n    flat_model_numeric + flat_type_numeric + dist_to_elders + \n    dist_to_hawkers + dist_to_parks + dist_to_supermarkets + \n    dist_to_chas_clinics + dist_to_cbd + dist_to_Shoppingmalls + \n    dist_to_MRT + dist_to_Goodprimaryschool + BusStop_within_350m + \n    Kindergartens_within_1000m, data = train_data)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-349377  -46190   -7675   39364  908630 \n\nCoefficients:\n                             Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)                 4.814e+04  1.828e+04   2.633  0.00850 ** \ntotal_remaining_months      3.850e+02  8.256e+00  46.630  &lt; 2e-16 ***\nstorey_mid                  5.833e+03  2.173e+02  26.844  &lt; 2e-16 ***\nflat_model_numeric         -5.503e+02  3.878e+02  -1.419  0.15596    \nflat_type_numeric           1.257e+05  1.778e+03  70.695  &lt; 2e-16 ***\ndist_to_elders             -3.652e+01  2.530e+00 -14.434  &lt; 2e-16 ***\ndist_to_hawkers            -9.553e+00  3.616e+00  -2.642  0.00827 ** \ndist_to_parks              -4.678e+01  2.360e+00 -19.825  &lt; 2e-16 ***\ndist_to_supermarkets       -3.147e+01  7.211e+00  -4.365 1.30e-05 ***\ndist_to_chas_clinics        3.569e+01  1.350e+01   2.643  0.00826 ** \ndist_to_cbd                -5.377e+00  3.032e-01 -17.733  &lt; 2e-16 ***\ndist_to_Shoppingmalls       4.488e+00  4.385e+00   1.023  0.30614    \ndist_to_MRT                -9.700e+01  4.304e+00 -22.540  &lt; 2e-16 ***\ndist_to_Goodprimaryschool   3.505e+01  4.683e+00   7.486 8.56e-14 ***\nBusStop_within_350m        -3.636e+03  4.879e+02  -7.451 1.11e-13 ***\nKindergartens_within_1000m  7.208e+03  4.671e+02  15.431  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 75930 on 4364 degrees of freedom\nMultiple R-squared:  0.7566,    Adjusted R-squared:  0.7558 \nF-statistic: 904.4 on 15 and 4364 DF,  p-value: &lt; 2.2e-16\n\n\nFrom the result,except flat_model,dist_to_hawkers,dist_to_chas_clinics,dist_to_Shoppingmalls,other variables are all significant .\nWith dist_to_elders,dist_to_parks,dist_to_supermarkets,dist_to_cbd,dist_to_MRT,BusStop_within_350m values get higher,the dependent variable will get smaller.For example the higher distance between CBD and the HDB ,the lower house price will be.\nThe R-squared and adjusted R-squared of the model are high, indicating that the model has strong explanatory power for the dependent variable.\n\nMulticollinearity check with VIF\n\nvif &lt;- performance::check_collinearity(price_mlr)\nkable(vif, \n      caption = \"Variance Inflation Factor (VIF) Results\") %&gt;%\n  kable_styling(font_size = 18) \n\n\nVariance Inflation Factor (VIF) Results\n\n\nTerm\nVIF\nVIF_CI_low\nVIF_CI_high\nSE_factor\nTolerance\nTolerance_CI_low\nTolerance_CI_high\n\n\n\n\ntotal_remaining_months\n1.473605\n1.419527\n1.534655\n1.213922\n0.6786077\n0.6516124\n0.7044600\n\n\nstorey_mid\n1.297002\n1.253526\n1.347933\n1.138860\n0.7710091\n0.7418767\n0.7977498\n\n\nflat_model_numeric\n1.158517\n1.124070\n1.202528\n1.076344\n0.8631726\n0.8315816\n0.8896244\n\n\nflat_type_numeric\n1.247064\n1.206708\n1.295299\n1.116720\n0.8018834\n0.7720225\n0.8287010\n\n\ndist_to_elders\n1.125374\n1.093420\n1.168257\n1.060836\n0.8885936\n0.8559757\n0.9145617\n\n\ndist_to_hawkers\n1.677701\n1.611681\n1.750846\n1.295261\n0.5960539\n0.5711526\n0.6204701\n\n\ndist_to_parks\n1.309632\n1.265380\n1.361263\n1.144391\n0.7635734\n0.7346121\n0.7902766\n\n\ndist_to_supermarkets\n1.432388\n1.380749\n1.491030\n1.196824\n0.6981348\n0.6706772\n0.7242444\n\n\ndist_to_chas_clinics\n1.289642\n1.246620\n1.340168\n1.135624\n0.7754093\n0.7461752\n0.8021690\n\n\ndist_to_cbd\n1.984741\n1.900952\n2.076323\n1.408808\n0.5038440\n0.4816207\n0.5260521\n\n\ndist_to_Shoppingmalls\n1.525338\n1.468215\n1.589431\n1.235046\n0.6555923\n0.6291561\n0.6810992\n\n\ndist_to_MRT\n1.597965\n1.536590\n1.666359\n1.264106\n0.6257960\n0.6001107\n0.6507915\n\n\ndist_to_Goodprimaryschool\n1.430574\n1.379043\n1.489111\n1.196066\n0.6990202\n0.6715418\n0.7251406\n\n\nBusStop_within_350m\n1.148264\n1.114562\n1.191881\n1.071571\n0.8708798\n0.8390098\n0.8972136\n\n\nKindergartens_within_1000m\n1.332344\n1.286706\n1.385246\n1.154272\n0.7505571\n0.7218933\n0.7771784\n\n\n\n\n\n\n\n\nplot(vif) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\nVariable `Component` is not in your data frame :/\n\n\n\n\n\n\n\n\n\nAll VIF values ​​are less than 5, and no further multicollinearity processing is required. Overall, this is a relatively healthy model and meets expectations in terms of collinearity detection."
  },
  {
    "objectID": "Take_home_Ex/Take_home_Ex03/Take_home_Ex03.html#preparing-coordinates-data",
    "href": "Take_home_Ex/Take_home_Ex03/Take_home_Ex03.html#preparing-coordinates-data",
    "title": "Take home Exercise03",
    "section": "6.Preparing coordinates data",
    "text": "6.Preparing coordinates data\nThe code chunk below extract the x,y coordinates of the full, training and test data sets.\n\ncoords &lt;- st_coordinates(resale_tidy6)\ncoords_train &lt;- st_coordinates(train_data)\ncoords_test &lt;- st_coordinates(test_data)\n\n\ntest_data_no &lt;- test_data %&gt;% st_drop_geometry()\n\nresale_tidy6_future_test_data &lt;- resale_tidy6_future %&gt;%\n  st_drop_geometry()\n\n\nDroping geometry field\nFirst, we will drop geometry column of the sf data.frame by using st_drop_geometry() of sf package.\n\ntrain_data &lt;- train_data %&gt;%\n  st_drop_geometry()"
  },
  {
    "objectID": "Take_home_Ex/Take_home_Ex03/Take_home_Ex03.html#calibrating-random-forest-model",
    "href": "Take_home_Ex/Take_home_Ex03/Take_home_Ex03.html#calibrating-random-forest-model",
    "title": "Take home Exercise03",
    "section": "7.Calibrating Random Forest Model",
    "text": "7.Calibrating Random Forest Model\n\nset.seed(1234)\nrf &lt;- ranger(resale_price ~ total_remaining_months +\n                  storey_mid + flat_model_numeric +\n                  flat_type_numeric + dist_to_elders + dist_to_hawkers +\n                  dist_to_parks + dist_to_supermarkets + dist_to_chas_clinics + \n                  dist_to_cbd + dist_to_Shoppingmalls +\n                  dist_to_MRT + dist_to_Goodprimaryschool +BusStop_within_350m+\n                  Kindergartens_within_1000m,\n                  data=train_data,\n             importance = 'impurity')\nrf\n\nRanger result\n\nCall:\n ranger(resale_price ~ total_remaining_months + storey_mid + flat_model_numeric +      flat_type_numeric + dist_to_elders + dist_to_hawkers + dist_to_parks +      dist_to_supermarkets + dist_to_chas_clinics + dist_to_cbd +      dist_to_Shoppingmalls + dist_to_MRT + dist_to_Goodprimaryschool +      BusStop_within_350m + Kindergartens_within_1000m, data = train_data,      importance = \"impurity\") \n\nType:                             Regression \nNumber of trees:                  500 \nSample size:                      4380 \nNumber of independent variables:  15 \nMtry:                             3 \nTarget node size:                 5 \nVariable importance mode:         impurity \nSplitrule:                        variance \nOOB prediction error (MSE):       1550984845 \nR squared (OOB):                  0.9343029 \n\n\nOOB prediction error (MSE): 1546803122. The mean square error (MSE) of the out-of-bag data (OOB) is 1546803122. MSE is used to measure the prediction error of the model. The smaller the value, the more accurate the model’s prediction. OOB MSE provides an unbiased estimate of the generalization performance of the model.\nR squared (OOB): 0.93448 .The R squared value of the out-of-bag data is 0.93448. R squared values ​​close to 1 indicate that the model can explain the variance of the data well. In this case, 93.448% of the variance can be explained by the model, indicating that the model performs well on the out-of-bag data.\n\nExtracting feature importance\n\nimportance_rf &lt;- rf$variable.importance\n\nimportance_df &lt;- data.frame(Feature = names(importance_rf), \n                            Importance = importance_rf)\n\nlibrary(dplyr)\nimportance_df &lt;- importance_df %&gt;%\n  arrange(desc(Importance))\n\nprint(importance_df)\n\n                                              Feature   Importance\nflat_type_numeric                   flat_type_numeric 2.721029e+13\ntotal_remaining_months         total_remaining_months 1.555766e+13\ndist_to_cbd                               dist_to_cbd 1.199639e+13\nstorey_mid                                 storey_mid 1.095255e+13\nflat_model_numeric                 flat_model_numeric 7.970761e+12\ndist_to_MRT                               dist_to_MRT 4.552051e+12\ndist_to_Goodprimaryschool   dist_to_Goodprimaryschool 3.329271e+12\ndist_to_elders                         dist_to_elders 3.199836e+12\ndist_to_supermarkets             dist_to_supermarkets 3.138500e+12\ndist_to_hawkers                       dist_to_hawkers 3.126396e+12\ndist_to_parks                           dist_to_parks 3.004545e+12\ndist_to_Shoppingmalls           dist_to_Shoppingmalls 2.902800e+12\nKindergartens_within_1000m Kindergartens_within_1000m 2.010949e+12\ndist_to_chas_clinics             dist_to_chas_clinics 1.973228e+12\nBusStop_within_350m               BusStop_within_350m 1.281325e+12\n\n\n\nggplot(importance_df, aes(x = reorder(Feature, Importance), y = Importance)) +\n  geom_bar(stat = \"identity\") +\n  coord_flip() +\n  labs(title = \"Feature Importance for Random Forest Model (Ranger)\",\n       x = \"Features\",\n       y = \"Importance\")\n\n\n\n\n\n\n\n\nFeature importance analysis shows that the type of house, remaining lease time, distance to the CBD, floor and proximity to transportation hubs (such as MRT stations) have the greatest impact on HDB resale prices. Other living amenities have some impact on prices, but the effect is smaller."
  },
  {
    "objectID": "Take_home_Ex/Take_home_Ex03/Take_home_Ex03.html#calibrating-geographical-random-forest-model",
    "href": "Take_home_Ex/Take_home_Ex03/Take_home_Ex03.html#calibrating-geographical-random-forest-model",
    "title": "Take home Exercise03",
    "section": "8.Calibrating Geographical Random Forest Model",
    "text": "8.Calibrating Geographical Random Forest Model\n\nCalibrating using training data\nGeographically Weighted Random Forest optimal bandwidth selection: grf.bw-This function finds the optimal bandwidth for the Geographically Weighted Random Forest algo-rithm using an exhaustive approach.\n\noptimal_bw &lt;- grf.bw(\n  formula = resale_price ~ total_remaining_months +\n                  storey_mid + flat_model_numeric +\n                  flat_type_numeric + dist_to_elders + dist_to_hawkers +\n                  dist_to_parks + dist_to_supermarkets + dist_to_chas_clinics + \n                  dist_to_cbd + dist_to_Shoppingmalls +\n                  dist_to_MRT + dist_to_Goodprimaryschool +BusStop_within_350m+\n                  Kindergartens_within_1000m,\n  dataset = train_data,\n  kernel = \"adaptive\",\n  coords = coords_train,\n  bw.min = 30,      \n  bw.max = 100,     \n  step = 10,          \n  trees = 50,\n  nthreads = 8\n)\n\n\nFrom the result,we can get the best bandwidth 100 and we use this value for Geographical Random Forest Model analysis.\n\nsaveRDS(optimal_bw, \"data/rds/optimal_bw.rds\")\n\n\noptimal_bw &lt;- readRDS(\"data/rds/optimal_bw.rds\")\n\nThe code chunk below calibrate a geographic ranform forest model by using grf() of SpatialML package.\n\nset.seed(1234)\ngwRF_adaptive &lt;- grf(formula = resale_price ~ total_remaining_months +\n                  storey_mid + flat_model_numeric +\n                  flat_type_numeric + dist_to_elders + dist_to_hawkers +\n                  dist_to_parks + dist_to_supermarkets + dist_to_chas_clinics + \n                  dist_to_cbd + dist_to_Shoppingmalls +\n                  dist_to_MRT + dist_to_Goodprimaryschool +BusStop_within_350m+\n                  Kindergartens_within_1000m,\n                     dframe=train_data, \n                     bw=optimal_bw, \n                     kernel=\"adaptive\",\n                     coords=coords_train)\n\n\nGlobal ResultLocal ResultData.frame\n\n\n\n\nOOB prediction error (MSE): 1350504111, this is the out-of-bag mean square error (MSE) of the model, which measures the prediction error of the model.\nR squared (OOB): 0.9427949, the value of out-of-bag data, close to 1, indicating that the model has a high explanatory power on out-of-bag data.\nFlat_type_numeric and total_remaining_months have the highest importance scores, indicating that these variables have a greater impact on predicting the price of second-hand houses.\nStorey_mid and dist_to_cbd also have high importance, which may indicate that the floor of the house and the distance from the city center are also factors that determine the price.\nOther variables (such as dist_to_elders, dist_to_hawkers, dist_to_parks, etc.) also contribute to the prediction, but their importance is lower.\n\n\n\n\nThe model shows high explanatory power on the out-of-bag data (value of R squared 90.414%), but the out-of-bag mean squared error is relatively high, indicating that there may be some generalization error.\nThe model performs very well on the training data, with an almost perfect fit (value R squared close to 100%), but this may also indicate that the model is at risk of overfitting the training data.\n\n\n\n\nDescriptive statistics of the 15 variables in the dataframe, including minimum value (Min), maximum value (Max), mean (Mean), and standard deviation (Std)\n\n\n\n\nsaveRDS(gwRF_adaptive, \"data/rds/gwRF_adaptive.rds\")\n\n\ngwRF_adaptive &lt;- readRDS(\"data/rds/gwRF_adaptive.rds\")"
  },
  {
    "objectID": "Take_home_Ex/Take_home_Ex03/Take_home_Ex03.html#predicting-by-using-test-data",
    "href": "Take_home_Ex/Take_home_Ex03/Take_home_Ex03.html#predicting-by-using-test-data",
    "title": "Take home Exercise03",
    "section": "9.Predicting by using test data",
    "text": "9.Predicting by using test data\nMultiple linear regression model\n\nmlr_pred &lt;- predict(price_mlr, test_data_no)\n\nRandom Forest Model\n\nrf_pred &lt;- predict(rf,test_data_no)\n\nGeographical Random Forest Model\nPreparing the test data\n\ntest_data_n &lt;- cbind(test_data, coords_test) %&gt;%\n  st_drop_geometry()\n\nNext, predict.grf() of spatialML package will be used to predict the resale value by using the test data and gwRF_adaptive model calibrated earlier.\n\ngwRF_pred &lt;- predict.grf(gwRF_adaptive, \n                           test_data_n, \n                           x.var.name=\"X\",\n                           y.var.name=\"Y\", \n                           local.w=1,\n                           global.w=0)\n\n\nsaveRDS(gwRF_pred, \"data/rds/gwRF_pred.rds\")\n\n\ngwRF_pred &lt;- readRDS(\"data/rds/gwRF_pred.rds\")\n\nConverting the predicting output into a data frame\nThe output of the predict.grf() is a vector of predicted values. It is wiser to convert it into a data frame for further visualisation and analysis.\n\nGwRF_pred_df &lt;- as.data.frame(gwRF_pred)\n\n\nmlr_pred_df &lt;- as.data.frame(mlr_pred)\n\n\nrf_pred_df &lt;- as.data.frame(rf_pred)"
  },
  {
    "objectID": "Take_home_Ex/Take_home_Ex03/Take_home_Ex03.html#visualising-the-predicted-values",
    "href": "Take_home_Ex/Take_home_Ex03/Take_home_Ex03.html#visualising-the-predicted-values",
    "title": "Take home Exercise03",
    "section": "10.Visualising the predicted values",
    "text": "10.Visualising the predicted values\nRename columns\n\ncolnames(GwRF_pred_df) &lt;- \"gwRF_pred\"\ncolnames(mlr_pred_df) &lt;- \"mlr_pred\"\ncolnames(rf_pred_df) &lt;- \"rf_pred\"\n\nBind the prediction result column to the test data\n\ntest_data_pred &lt;- cbind(test_data[\"resale_price\"], mlr_pred_df, rf_pred_df, GwRF_pred_df)\n\nThis allows us to visually see the actual value of each data point and the predicted values ​​of different models arranged together in the same table\n\nprint(test_data_pred)\n\nSimple feature collection with 2359 features and 4 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 16408.86 ymin: 30188.16 xmax: 42444.73 ymax: 47860.87\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n   resale_price mlr_pred  rf_pred gwRF_pred                  geometry\n1        368000 413372.3 380866.0  493909.7 POINT (16505.05 36963.29)\n2        305000 500539.6 395622.1  461752.8  POINT (17261.37 36026.8)\n3        350000 446776.9 400633.5  461373.3 POINT (17256.96 36148.69)\n4        327000 398286.7 396987.1  483943.3 POINT (17659.32 36293.26)\n5        310000 330784.9 345153.6  510994.7  POINT (18441.84 33475.1)\n6        450000 572783.2 488658.9  512185.2  POINT (17396.62 35792.5)\n7        500000 572889.2 561440.2  494024.9 POINT (17911.43 35623.18)\n8        450000 541509.1 485654.9  517545.5 POINT (17659.29 36293.22)\n9        410000 371924.5 438132.9  499850.1 POINT (18421.09 33593.78)\n10       500000 505186.0 492564.3  505009.4 POINT (17368.73 33925.16)"
  },
  {
    "objectID": "Take_home_Ex/Take_home_Ex03/Take_home_Ex03.html#calculating-root-mean-square-error",
    "href": "Take_home_Ex/Take_home_Ex03/Take_home_Ex03.html#calculating-root-mean-square-error",
    "title": "Take home Exercise03",
    "section": "11.Calculating Root Mean Square Error",
    "text": "11.Calculating Root Mean Square Error\nRMSE represents the average deviation between the predicted value and the actual value. The unit is the same as the original data, so it can directly reflect the magnitude of the prediction error. The smaller the error, the lower the RMSE value, indicating that the model prediction is more accurate.\n\nrmse_mlr &lt;- rmse(test_data_pred$resale_price, test_data_pred$mlr_pred)\n\nrmse_rf &lt;- rmse(test_data_pred$resale_price, test_data_pred$rf_pred)\n\nrmse_gwRF &lt;- rmse(test_data_pred$resale_price, test_data_pred$gwRF_pred)"
  },
  {
    "objectID": "Take_home_Ex/Take_home_Ex03/Take_home_Ex03.html#model-comparison",
    "href": "Take_home_Ex/Take_home_Ex03/Take_home_Ex03.html#model-comparison",
    "title": "Take home Exercise03",
    "section": "12.Model comparison",
    "text": "12.Model comparison\n\nprint(data.frame(\n  Model = c(\"Multiple Linear Regression\",\"Random Forest\",\"Geographically Weighted Random Forest\"),\n  RMSE = c(rmse_mlr, rmse_rf,rmse_gwRF)\n))\n\n                                  Model      RMSE\n1            Multiple Linear Regression  74500.39\n2                         Random Forest  41600.14\n3 Geographically Weighted Random Forest 135184.74\n\n\nRandom Forest:\nRMSE = 41875.56 .The Random Forest model performs best among the three models, with the smallest RMSE value, indicating that its prediction results are closest to the actual values.\nMultiple Linear Regression:\nRMSE = 74505.25. The Multiple Linear Regression model performs second, with a higher RMSE value than the Random Forest, indicating that its prediction accuracy is lower than that of the Random Forest.\nGeographically Weighted Random Forest (GWRF):\nRMSE = 135184.74 .The Geographically Weighted Random Forest model has the largest RMSE value, which is much higher than the other two models, indicating that its prediction effect is the worst on this dataset.\n\n#After confirming the test_data_pred data frame structure, run pivot_longer()\ntest_data_long &lt;- test_data_pred %&gt;%\n  pivot_longer(cols = c(\"mlr_pred\", \"rf_pred\",\"gwRF_pred\"), \n               names_to = \"Model\", \n               values_to = \"Predicted\")\n\n\n#Using ggplot2 to draw faceted scatter plots\nggplot(data = test_data_long, aes(x = Predicted, y = resale_price)) +\n  geom_point(alpha = 0.6) +\n  facet_wrap(~ Model, scales = \"free\") +\n  theme_minimal() +\n  labs(title = \"Model Predictions vs Actual Resale Prices\",\n       x = \"Predicted Resale Price\",\n       y = \"Actual Resale Price\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nA better predictive model should have the scatter point close to the diagonal line. The scatter plot can be also used to detect if any outliers in the model.\n\n\nGeographically Weighted Random Forest (gwRF_pred): Most of the data points are concentrated near the diagonal, but there are some points that deviate from the diagonal, especially in the area of ​​high predicted values. Overall, the model is able to capture the trend of price changes, but the accuracy may be lacking in some intervals.\nMultiple Linear Regression (mlr_pred): The distribution of predicted values ​​and actual values ​​is relatively even, but there are some points that deviate from the diagonal, especially in the high price range. This model shows a linear trend, but seems to be biased towards high prices.\nRandom Forest (rf_pred): The relationship between the predicted values ​​and actual values ​​of this model is close to the diagonal, and most of the points are distributed near the diagonal, indicating that the model is relatively accurate in predicting high and low price data. The random forest model seems to capture more price details and performs best.\nSo,we finally choose Random Forest Model to predict our future price."
  },
  {
    "objectID": "Take_home_Ex/Take_home_Ex03/Take_home_Ex03.html#predict-hdb-resale-prices-between-july-september-2024",
    "href": "Take_home_Ex/Take_home_Ex03/Take_home_Ex03.html#predict-hdb-resale-prices-between-july-september-2024",
    "title": "Take home Exercise03",
    "section": "13.Predict HDB resale prices between July-September 2024",
    "text": "13.Predict HDB resale prices between July-September 2024\nWe apply the same method to predict the price from July to September in 2024.\n\nrf_pred_futre &lt;- predict(rf,resale_tidy6_future_test_data)\n\n\nrf_pred_futre_df &lt;- as.data.frame(rf_pred_futre)\n\n\npred_futre &lt;- cbind(resale_tidy6_future[\"resale_price\"], rf_pred_futre_df)\n\n\nprint(pred_futre)\n\nSimple feature collection with 2056 features and 2 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 16494.75 ymin: 30188.18 xmax: 42444.73 ymax: 47860.83\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n   resale_price prediction                  geometry\n1        530000   567742.6 POINT (17874.95 35907.07)\n2        500000   502437.2 POINT (17874.88 35907.03)\n3        418000   381793.1 POINT (16505.04 36963.21)\n4        510000   502310.3 POINT (17874.99 35907.04)\n5        390000   373551.8 POINT (16494.76 36917.38)\n6        531000   511753.6    POINT (17875 35907.09)\n7        410000   367047.7 POINT (16494.75 36917.32)\n8        465000   498615.2 POINT (17874.96 35907.06)\n9        390000   388659.6 POINT (17416.44 35364.49)\n10       405888   375368.9  POINT (17479.6 35465.57)\n\n\nNow we can clearly see the result and the comparison with the actual value."
  },
  {
    "objectID": "Take_home_Ex/Take_home_Ex03/Take_home_Ex03.html#conclusion",
    "href": "Take_home_Ex/Take_home_Ex03/Take_home_Ex03.html#conclusion",
    "title": "Take home Exercise03",
    "section": "14.Conclusion",
    "text": "14.Conclusion\nModel performance\nModel performance Random Forest: The random forest model performed best among all models with the smallest RMSE value. This shows that the prediction results of the random forest model are closest to the actual values ​​and have high prediction accuracy.\nMultiple Linear Regression: The RMSE value of the multiple linear regression model is higher than that of the random forest model, indicating that its prediction effect is not as good as the random forest model. Although the multiple linear regression model can better reveal the linear relationship of the data, it may be limited on complex data sets.\nGeographically Weighted Random Forest (GWRF): The GWRF model has the highest RMSE value, which is much higher than the other two models, indicating that its prediction effect is the worst on this data set. The GWRF model introduced geographical weights, but failed to effectively improve the prediction effect in this data set. This may be because the role of geographical factors is not significant, and the model parameters for example the trees,the steps and the range in optimal bandwidth need further optimization.\nFeature Importance Analysis\nIn terms of feature importance, variables such as flat type (flat_type_numeric), remaining lease months (total_remaining_months), and distance to the central business district (dist_to_cbd) have high importance in all models. This indicates that these factors are crucial in predicting HDB resale prices."
  },
  {
    "objectID": "Take_home_Ex/Take_home_Ex03/Take_home_Ex03.html#reference",
    "href": "Take_home_Ex/Take_home_Ex03/Take_home_Ex03.html#reference",
    "title": "Take home Exercise03",
    "section": "15.Reference",
    "text": "15.Reference\nKam, T. S. (2024). 14 Geographically Weighted Predictive Models. R for Geospatial Data Science and Analytics.\nKalogiou, S., & Georganos, S. (2024). SpatialML: Spatial Machine Learning (Version 0.1.7) [Computer software]. https://stamatisgeoai.eu/"
  },
  {
    "objectID": "In-class_EX/In-class_Ex02/In-class_Ex02.html",
    "href": "In-class_EX/In-class_Ex02/In-class_Ex02.html",
    "title": "In-class_Ex02",
    "section": "",
    "text": "maptools is retired and binary is removed from CRAN. However, we can download from Posit Public Package Manager snapshots by using the code chunk below.\nAfter the installation is completed, it is important to edit the code chunk as shown below in order to avoid maptools being download and install repetitively every time the Quarto document been rendered.\ninstall.packages(\"maptools\", \n                 repos = \"https://packagemanager.posit.co/cran/2023-09-13\")\nIn sf package, there are two functions allow us to combine multiple simple features into one simple features. They are st_combine() and st_union().\npacman::p_load(tidyverse,sf,tmap,ggstatsplot,maptools)\nThe code chunk below, st_union()is used to derive the coastal outline sf tibble data.frame.\nsg_sf &lt;- mpsz_sf %&gt;%\n    st_union()\nThe code chunk below re-scale the unit of measurement from metre to kilometre before performing KDE.\npar(bg = \"#E4D5C9\")\n\ngridded_kde_childcareSG_ad &lt;- maptools::as.SpatialGridDataFrame.im(\n  kde_childcareSG_adaptive\n)\n\nspplot(gridded_kde_childcareSG_ad)\n# Spatstat.geom method\ngridded_kde_childcareSG_ad &lt;- as(\n  kde_childcareSG_adaptive, \n  \"SpatialGridDataFrame\"\n)\n\nspplot(gridded_kde_childcareSG_ad)\nset.seed(1234)\nMake sure the result is constant.\npacman::p_load(tidyverse,sf,tmap,ggstatsplot)"
  },
  {
    "objectID": "In-class_EX/In-class_Ex02/In-class_Ex02.html#importing-traffic-accident-data",
    "href": "In-class_EX/In-class_Ex02/In-class_Ex02.html#importing-traffic-accident-data",
    "title": "In-class_Ex02",
    "section": "Importing Traffic Accident Data",
    "text": "Importing Traffic Accident Data\n\nrdacc_sf &lt;- read_csv(\"data/thai_road_accident_2019_2022.csv\") %&gt;%\n  filter(!is.na(longitude) & longitude != \"\" & !is.na(latitude) & latitude != \"\") %&gt;%\n  st_as_sf(coords = c(\"longitude\", \"latitude\"),\n           crs=4326) %&gt;%\n  st_transform(crs = 32647)"
  },
  {
    "objectID": "In-class_EX/In-class_EX03/In-class_EX03.html",
    "href": "In-class_EX/In-class_EX03/In-class_EX03.html",
    "title": "In-class exercise 3",
    "section": "",
    "text": "pacman::p_load(sf, spNetwork, tmap, tidyverse)\n\n\nchildcare2 &lt;- st_read(dsn=\"data/rawdata\", layer=\"Punggol_CC\") %&gt;%\n  st_zm(drop = TRUE,\n        what = \"ZM\")\n\nReading layer `Punggol_CC' from data source \n  `/Users/yangyayong/Downloads/学校文件/smu文件/Term 3/G/yyyirene/ISSS626-GAA/In-class_EX/In-class_EX03/data/rawdata' \n  using driver `ESRI Shapefile'\nSimple feature collection with 61 features and 1 field\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 34423.98 ymin: 41503.6 xmax: 37619.47 ymax: 44685.77\nz_range:       zmin: 0 zmax: 0\nProjected CRS: SVY21 / Singapore TM\n\n\n\nnetwork &lt;- st_read(dsn=\"data/rawdata\", \n                   layer=\"Punggol_St\")\n\nReading layer `Punggol_St' from data source \n  `/Users/yangyayong/Downloads/学校文件/smu文件/Term 3/G/yyyirene/ISSS626-GAA/In-class_EX/In-class_EX03/data/rawdata' \n  using driver `ESRI Shapefile'\nSimple feature collection with 2642 features and 2 fields\nGeometry type: LINESTRING\nDimension:     XY\nBounding box:  xmin: 34038.56 ymin: 40941.11 xmax: 38882.85 ymax: 44801.27\nProjected CRS: SVY21 / Singapore TM\n\n\n\nplot(network)\nplot(childcare2,add=T,col='red',pch = 19)\n\n\n\n\n\n\n\n\nwhich mean x,y\nNetwork: This object is typically a geographic spatial dataset that may contain geometric and attribute data for roads or other network structures.\nSt_geometry (network): This function extracts geometric data (such as coordinate points, lines, or polygons) from the network object for drawing or performing spatial operations.\n\ntmap_mode('plot')  # view is interactive\n\ntmap mode set to plotting\n\ntm_shape(childcare2) +\n\n tm_dots(col = \"red\") +  #keep the size constant for zoom in and zoom out\n\n tm_shape(network) +\n\n tm_lines()\n\n\n\n\n\n\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\n\n\nlixels &lt;- lixelize_lines(network, \n                         700, \n                         mindist = 375)\n\n\nkfun_childcare &lt;- kfunctions(network, \n                             childcare,\n                             start = 0, \n                             end = 1000, \n                             step = 50, \n                             width = 50, \n                             nsim = 50, #49\n                             resolution = 50,\n                             verbose = FALSE, \n                             conf_int = 0.05)\n\n\nkfun_childcare$plotk\n\nkfun_childcare$plotg\n\n\nacc &lt;- read_csv(\"data/rawdata/thai_road_accident_2019_2022.csv\") %&gt;%\n  mutate(Month_num = month(incident_datetime)) %&gt;%\n  mutate(Month_fac = month(incident_datetime, label = TRUE, abbr = TRUE)) %&gt;%\n  mutate(dayofweek = day(incident_datetime)) %&gt;%\n  filter(!is.na(longitude) & longitude != \"\", \n         !is.na(latitude) & latitude != \"\") %&gt;%  # 确保用 %&gt;% 连接 st_as_sf\n  st_as_sf(coords = c(\"longitude\", \"latitude\"), crs = 4326) %&gt;%\n  st_transform(crs = 32647)\n\nRows: 81735 Columns: 18\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (10): province_th, province_en, agency, route, vehicle_type, presumed_c...\ndbl   (6): acc_code, number_of_vehicles_involved, number_of_fatalities, numb...\ndttm  (2): incident_datetime, report_datetime\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nwrite_rds(acc,\"data/rds/acc.rds\")\n\n\nacc &lt;- read_rds(\"data/rds/acc.rds\")"
  },
  {
    "objectID": "In-class_EX/In-class_EX04/In-class_EX04.html",
    "href": "In-class_EX/In-class_EX04/In-class_EX04.html",
    "title": "In-class EX04",
    "section": "",
    "text": "pacman::p_load(sf,ggstatsplot, tmap, tidyverse, knitr,GWmodel)\n\n\n\n\n\nhunan_sf &lt;- st_read(dsn = \"data/geospatial\", \n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `/Users/yangyayong/Downloads/学校文件/smu文件/Term 3/G/yyyirene/ISSS626-GAA/In-class_EX/In-class_EX04/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\nhunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nhunan_sf &lt;- left_join(hunan_sf,hunan2012)%&gt;%\n  select(1:3,7,15,16,31,32)\n\nJoining with `by = join_by(County)`\n\n\n\n\n\n\nbasemap &lt;- tm_shape(hunan_sf) +\n  tm_polygons() +\n  tm_text(\"NAME_3\", size=0.5)\n\ngdppc &lt;- qtm(hunan_sf, \"GDPPC\")\ntmap_arrange(basemap, gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n\n\nConverting to spatialpolygonsDataFrame\n\nhunan_sp &lt;- hunan_sf %&gt;%\n  as_Spatial()\n\nNotice：GWmodel presently is built around the older sp and not sf formats for handling spatial data in R.\n\n\n\n\n\n\n\n\n\nbw_cv &lt;- bw.gwr(GDPPC ~ 1,#indepedent\n                data= hunan_sp,\n                approach = \"cv\",\n                adaptive = TRUE,\n                kernel = \"bisquare\",\n                longlat = T)\n\nAdaptive bandwidth: 62 CV score: 15515442343 \nAdaptive bandwidth: 46 CV score: 14937956887 \nAdaptive bandwidth: 36 CV score: 14408561608 \nAdaptive bandwidth: 29 CV score: 14198527496 \nAdaptive bandwidth: 26 CV score: 13898800611 \nAdaptive bandwidth: 22 CV score: 13662299974 \nAdaptive bandwidth: 22 CV score: 13662299974 \n\n\n\n\n\n\nbw_AIC &lt;- bw.gwr(GDPPC ~ 1,#indepedent\n                data= hunan_sp,\n                approach = \"AIC\",\n                adaptive = TRUE, # great circle distance will be calculated \n                kernel = \"bisquare\", #km\n                longlat = T)\n\nAdaptive bandwidth (number of nearest neighbours): 62 AICc value: 1923.156 \nAdaptive bandwidth (number of nearest neighbours): 46 AICc value: 1920.469 \nAdaptive bandwidth (number of nearest neighbours): 36 AICc value: 1917.324 \nAdaptive bandwidth (number of nearest neighbours): 29 AICc value: 1916.661 \nAdaptive bandwidth (number of nearest neighbours): 26 AICc value: 1914.897 \nAdaptive bandwidth (number of nearest neighbours): 22 AICc value: 1914.045 \nAdaptive bandwidth (number of nearest neighbours): 22 AICc value: 1914.045 \n\n\n\nbw_cv\n\n[1] 22\n\n\n\nbw_AIC\n\n[1] 22\n\n\n\n\n\n\nComputing geographically wieghted summary statistics\n\ngwstat &lt;- gwss(data = hunan_sp,\n               vars = \"GDPPC\",\n               bw = bw_AIC,\n               kernel = \"bisquare\",\n               adaptive = TRUE,\n               longlat = T)\n\nCode chunk below is used to extract SDF data table from gwss object output from gwss(). It will be converted into data.frame by using as.data.frame().\n\n\n\n\ngwstat_df &lt;- as.data.frame(gwstat$SDF)\n\n\nhanan_gwstat &lt;- cbind(hunan_sf,gwstat_df)\n\n#cbind is used to append the newly derved data.frame onto hunan_sf sf data.frame\n\n\n\n\ntm_shape(hanan_gwstat) +\n  tm_fill(\"GDPPC_LM\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Distribution of geographically wieghted mean\",\n            main.title.position = \"center\",\n            main.title.size = 2.0,\n            legend.text.size = 1.2,\n            legend.height = 1.50, \n            legend.width = 1.50,\n            frame = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nbw_cv &lt;- bw.gwr(GDPPC ~ 1,#indepedent\n                data= hunan_sp,\n                approach = \"cv\",\n                adaptive = FALSE,\n                kernel = \"bisquare\",\n                longlat = T)\n\nFixed bandwidth: 357.4897 CV score: 16265191728 \nFixed bandwidth: 220.985 CV score: 14954930931 \nFixed bandwidth: 136.6204 CV score: 14134185837 \nFixed bandwidth: 84.48025 CV score: 13693362460 \nFixed bandwidth: 52.25585 CV score: Inf \nFixed bandwidth: 104.396 CV score: 13891052305 \nFixed bandwidth: 72.17162 CV score: 13577893677 \nFixed bandwidth: 64.56447 CV score: 14681160609 \nFixed bandwidth: 76.8731 CV score: 13444716890 \nFixed bandwidth: 79.77877 CV score: 13503296834 \nFixed bandwidth: 75.07729 CV score: 13452450771 \nFixed bandwidth: 77.98296 CV score: 13457916138 \nFixed bandwidth: 76.18716 CV score: 13442911302 \nFixed bandwidth: 75.76323 CV score: 13444600639 \nFixed bandwidth: 76.44916 CV score: 13442994078 \nFixed bandwidth: 76.02523 CV score: 13443285248 \nFixed bandwidth: 76.28724 CV score: 13442844774 \nFixed bandwidth: 76.34909 CV score: 13442864995 \nFixed bandwidth: 76.24901 CV score: 13442855596 \nFixed bandwidth: 76.31086 CV score: 13442847019 \nFixed bandwidth: 76.27264 CV score: 13442846793 \nFixed bandwidth: 76.29626 CV score: 13442844829 \nFixed bandwidth: 76.28166 CV score: 13442845238 \nFixed bandwidth: 76.29068 CV score: 13442844678 \nFixed bandwidth: 76.29281 CV score: 13442844691 \nFixed bandwidth: 76.28937 CV score: 13442844698 \nFixed bandwidth: 76.2915 CV score: 13442844676 \nFixed bandwidth: 76.292 CV score: 13442844679 \nFixed bandwidth: 76.29119 CV score: 13442844676 \nFixed bandwidth: 76.29099 CV score: 13442844676 \nFixed bandwidth: 76.29131 CV score: 13442844676 \nFixed bandwidth: 76.29138 CV score: 13442844676 \nFixed bandwidth: 76.29126 CV score: 13442844676 \nFixed bandwidth: 76.29123 CV score: 13442844676 \n\n\n\nbw_AIC &lt;- bw.gwr(GDPPC ~ 1,#indepedent\n                data= hunan_sp,\n                approach = \"AIC\",\n                adaptive = FALSE,\n                kernel = \"bisquare\",\n                longlat = T)\n\nFixed bandwidth: 357.4897 AICc value: 1927.631 \nFixed bandwidth: 220.985 AICc value: 1921.547 \nFixed bandwidth: 136.6204 AICc value: 1919.993 \nFixed bandwidth: 84.48025 AICc value: 1940.603 \nFixed bandwidth: 168.8448 AICc value: 1919.457 \nFixed bandwidth: 188.7606 AICc value: 1920.007 \nFixed bandwidth: 156.5362 AICc value: 1919.41 \nFixed bandwidth: 148.929 AICc value: 1919.527 \nFixed bandwidth: 161.2377 AICc value: 1919.392 \nFixed bandwidth: 164.1433 AICc value: 1919.403 \nFixed bandwidth: 159.4419 AICc value: 1919.393 \nFixed bandwidth: 162.3475 AICc value: 1919.394 \nFixed bandwidth: 160.5517 AICc value: 1919.391 \n\n\n\nbw_AIC\n\n[1] 160.5517\n\n\ndistance value in km\n\nbw_cv\n\n[1] 76.29126\n\n\n\n\n\n#have six means,have six neighbours\n\n\n\ngwstat &lt;- gwss(data = hunan_sp,\n               vars = \"GDPPC\",\n               bw = bw_AIC,\n               kernel = \"bisquare\",\n               adaptive = FALSE,\n               longlat = T)\n\n\n\n\nCode chunk below is used to extract SDF data table from gwss object output from gwss(). It will be converted into data.frame by using as.data.frame().\n\ngwstat_df &lt;- as.data.frame(gwstat$SDF)\n\nNext, cbind() is used to append the newly derived data.frame onto hunan_sf sf data.frame.\n\nhunan_gstat &lt;- cbind(hunan_sf, gwstat_df)\n\n\n\n\n\ntm_shape(hunan_gstat) +\n  tm_fill(\"GDPPC_LM\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Distribution of geographically wieghted mean\",\n            main.title.position = \"center\",\n            main.title.size = 2.0,\n            legend.text.size = 1.2,\n            legend.height = 1.50, \n            legend.width = 1.50,\n            frame = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\n\nggscatterstats(\n  data = hunan2012, \n  x = Agri, \n  y = GDPPC,\n  xlab = \"Gross Agriculture Output\", ## label for the x-axis\n  ylab = \"GDP per capita\", \n  label.var = County, \n  label.expression = Agri &gt; 10000 & GDPPC &gt; 50000, \n  point.label.args = list(alpha = 0.7, size = 4, color = \"grey50\"),\n  xfill = \"#CC79A7\", \n  yfill = \"#009E73\", \n  title = \"Relationship between GDP PC and Gross Agriculture Output\")\n\nRegistered S3 method overwritten by 'ggside':\n  method from   \n  +.gg   ggplot2\n\n\n`stat_xsidebin()` using `bins = 30`. Pick better value with `binwidth`.\n`stat_ysidebin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\nThere is a weak positive correlation between GDP per capita and Gross Agriculture Output, with a Pearson correlation coefficient of 0.31 and statistically significant (p value is small). Although the correlation is not strong, Bayesian analysis supports its existence, with the Bayes factor indicating strong support for the alternative hypothesis (that there is a correlation). Overall, the increase in agricultural output may have a certain impact on per capita GDP, but this impact is relatively weak."
  },
  {
    "objectID": "In-class_EX/In-class_EX04/In-class_EX04.html#geographically-weighted-summary-statistics-with-fixed",
    "href": "In-class_EX/In-class_EX04/In-class_EX04.html#geographically-weighted-summary-statistics-with-fixed",
    "title": "In-class EX04",
    "section": "",
    "text": "pacman::p_load(sf,ggstatsplot, tmap, tidyverse, knitr,GWmodel)\n\n\n\n\n\nhunan_sf &lt;- st_read(dsn = \"data/geospatial\", \n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `/Users/yangyayong/Downloads/学校文件/smu文件/Term 3/G/yyyirene/ISSS626-GAA/In-class_EX/In-class_EX04/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\nhunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nhunan_sf &lt;- left_join(hunan_sf,hunan2012)%&gt;%\n  select(1:3,7,15,16,31,32)\n\nJoining with `by = join_by(County)`\n\n\n\n\n\n\nbasemap &lt;- tm_shape(hunan_sf) +\n  tm_polygons() +\n  tm_text(\"NAME_3\", size=0.5)\n\ngdppc &lt;- qtm(hunan_sf, \"GDPPC\")\ntmap_arrange(basemap, gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n\n\nConverting to spatialpolygonsDataFrame\n\nhunan_sp &lt;- hunan_sf %&gt;%\n  as_Spatial()\n\nNotice：GWmodel presently is built around the older sp and not sf formats for handling spatial data in R."
  },
  {
    "objectID": "In-class_EX/In-class_EX04/In-class_EX04.html#geographically-weighted-summary-statistics-with-adaptive-bandwidth",
    "href": "In-class_EX/In-class_EX04/In-class_EX04.html#geographically-weighted-summary-statistics-with-adaptive-bandwidth",
    "title": "In-class EX04",
    "section": "",
    "text": "bw_cv &lt;- bw.gwr(GDPPC ~ 1,#indepedent\n                data= hunan_sp,\n                approach = \"cv\",\n                adaptive = TRUE,\n                kernel = \"bisquare\",\n                longlat = T)\n\nAdaptive bandwidth: 62 CV score: 15515442343 \nAdaptive bandwidth: 46 CV score: 14937956887 \nAdaptive bandwidth: 36 CV score: 14408561608 \nAdaptive bandwidth: 29 CV score: 14198527496 \nAdaptive bandwidth: 26 CV score: 13898800611 \nAdaptive bandwidth: 22 CV score: 13662299974 \nAdaptive bandwidth: 22 CV score: 13662299974 \n\n\n\n\n\n\nbw_AIC &lt;- bw.gwr(GDPPC ~ 1,#indepedent\n                data= hunan_sp,\n                approach = \"AIC\",\n                adaptive = TRUE, # great circle distance will be calculated \n                kernel = \"bisquare\", #km\n                longlat = T)\n\nAdaptive bandwidth (number of nearest neighbours): 62 AICc value: 1923.156 \nAdaptive bandwidth (number of nearest neighbours): 46 AICc value: 1920.469 \nAdaptive bandwidth (number of nearest neighbours): 36 AICc value: 1917.324 \nAdaptive bandwidth (number of nearest neighbours): 29 AICc value: 1916.661 \nAdaptive bandwidth (number of nearest neighbours): 26 AICc value: 1914.897 \nAdaptive bandwidth (number of nearest neighbours): 22 AICc value: 1914.045 \nAdaptive bandwidth (number of nearest neighbours): 22 AICc value: 1914.045 \n\n\n\nbw_cv\n\n[1] 22\n\n\n\nbw_AIC\n\n[1] 22\n\n\n\n\n\n\nComputing geographically wieghted summary statistics\n\ngwstat &lt;- gwss(data = hunan_sp,\n               vars = \"GDPPC\",\n               bw = bw_AIC,\n               kernel = \"bisquare\",\n               adaptive = TRUE,\n               longlat = T)\n\nCode chunk below is used to extract SDF data table from gwss object output from gwss(). It will be converted into data.frame by using as.data.frame().\n\n\n\n\ngwstat_df &lt;- as.data.frame(gwstat$SDF)\n\n\nhanan_gwstat &lt;- cbind(hunan_sf,gwstat_df)\n\n#cbind is used to append the newly derved data.frame onto hunan_sf sf data.frame\n\n\n\n\ntm_shape(hanan_gwstat) +\n  tm_fill(\"GDPPC_LM\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Distribution of geographically wieghted mean\",\n            main.title.position = \"center\",\n            main.title.size = 2.0,\n            legend.text.size = 1.2,\n            legend.height = 1.50, \n            legend.width = 1.50,\n            frame = TRUE)"
  },
  {
    "objectID": "In-class_EX/In-class_EX04/In-class_EX04.html#geographically-weighted-summary-statistics-with-fixed-1",
    "href": "In-class_EX/In-class_EX04/In-class_EX04.html#geographically-weighted-summary-statistics-with-fixed-1",
    "title": "In-class EX04",
    "section": "",
    "text": "bw_cv &lt;- bw.gwr(GDPPC ~ 1,#indepedent\n                data= hunan_sp,\n                approach = \"cv\",\n                adaptive = FALSE,\n                kernel = \"bisquare\",\n                longlat = T)\n\nFixed bandwidth: 357.4897 CV score: 16265191728 \nFixed bandwidth: 220.985 CV score: 14954930931 \nFixed bandwidth: 136.6204 CV score: 14134185837 \nFixed bandwidth: 84.48025 CV score: 13693362460 \nFixed bandwidth: 52.25585 CV score: Inf \nFixed bandwidth: 104.396 CV score: 13891052305 \nFixed bandwidth: 72.17162 CV score: 13577893677 \nFixed bandwidth: 64.56447 CV score: 14681160609 \nFixed bandwidth: 76.8731 CV score: 13444716890 \nFixed bandwidth: 79.77877 CV score: 13503296834 \nFixed bandwidth: 75.07729 CV score: 13452450771 \nFixed bandwidth: 77.98296 CV score: 13457916138 \nFixed bandwidth: 76.18716 CV score: 13442911302 \nFixed bandwidth: 75.76323 CV score: 13444600639 \nFixed bandwidth: 76.44916 CV score: 13442994078 \nFixed bandwidth: 76.02523 CV score: 13443285248 \nFixed bandwidth: 76.28724 CV score: 13442844774 \nFixed bandwidth: 76.34909 CV score: 13442864995 \nFixed bandwidth: 76.24901 CV score: 13442855596 \nFixed bandwidth: 76.31086 CV score: 13442847019 \nFixed bandwidth: 76.27264 CV score: 13442846793 \nFixed bandwidth: 76.29626 CV score: 13442844829 \nFixed bandwidth: 76.28166 CV score: 13442845238 \nFixed bandwidth: 76.29068 CV score: 13442844678 \nFixed bandwidth: 76.29281 CV score: 13442844691 \nFixed bandwidth: 76.28937 CV score: 13442844698 \nFixed bandwidth: 76.2915 CV score: 13442844676 \nFixed bandwidth: 76.292 CV score: 13442844679 \nFixed bandwidth: 76.29119 CV score: 13442844676 \nFixed bandwidth: 76.29099 CV score: 13442844676 \nFixed bandwidth: 76.29131 CV score: 13442844676 \nFixed bandwidth: 76.29138 CV score: 13442844676 \nFixed bandwidth: 76.29126 CV score: 13442844676 \nFixed bandwidth: 76.29123 CV score: 13442844676 \n\n\n\nbw_AIC &lt;- bw.gwr(GDPPC ~ 1,#indepedent\n                data= hunan_sp,\n                approach = \"AIC\",\n                adaptive = FALSE,\n                kernel = \"bisquare\",\n                longlat = T)\n\nFixed bandwidth: 357.4897 AICc value: 1927.631 \nFixed bandwidth: 220.985 AICc value: 1921.547 \nFixed bandwidth: 136.6204 AICc value: 1919.993 \nFixed bandwidth: 84.48025 AICc value: 1940.603 \nFixed bandwidth: 168.8448 AICc value: 1919.457 \nFixed bandwidth: 188.7606 AICc value: 1920.007 \nFixed bandwidth: 156.5362 AICc value: 1919.41 \nFixed bandwidth: 148.929 AICc value: 1919.527 \nFixed bandwidth: 161.2377 AICc value: 1919.392 \nFixed bandwidth: 164.1433 AICc value: 1919.403 \nFixed bandwidth: 159.4419 AICc value: 1919.393 \nFixed bandwidth: 162.3475 AICc value: 1919.394 \nFixed bandwidth: 160.5517 AICc value: 1919.391 \n\n\n\nbw_AIC\n\n[1] 160.5517\n\n\ndistance value in km\n\nbw_cv\n\n[1] 76.29126\n\n\n\n\n\n#have six means,have six neighbours\n\n\n\ngwstat &lt;- gwss(data = hunan_sp,\n               vars = \"GDPPC\",\n               bw = bw_AIC,\n               kernel = \"bisquare\",\n               adaptive = FALSE,\n               longlat = T)\n\n\n\n\nCode chunk below is used to extract SDF data table from gwss object output from gwss(). It will be converted into data.frame by using as.data.frame().\n\ngwstat_df &lt;- as.data.frame(gwstat$SDF)\n\nNext, cbind() is used to append the newly derived data.frame onto hunan_sf sf data.frame.\n\nhunan_gstat &lt;- cbind(hunan_sf, gwstat_df)\n\n\n\n\n\ntm_shape(hunan_gstat) +\n  tm_fill(\"GDPPC_LM\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Distribution of geographically wieghted mean\",\n            main.title.position = \"center\",\n            main.title.size = 2.0,\n            legend.text.size = 1.2,\n            legend.height = 1.50, \n            legend.width = 1.50,\n            frame = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\n\nggscatterstats(\n  data = hunan2012, \n  x = Agri, \n  y = GDPPC,\n  xlab = \"Gross Agriculture Output\", ## label for the x-axis\n  ylab = \"GDP per capita\", \n  label.var = County, \n  label.expression = Agri &gt; 10000 & GDPPC &gt; 50000, \n  point.label.args = list(alpha = 0.7, size = 4, color = \"grey50\"),\n  xfill = \"#CC79A7\", \n  yfill = \"#009E73\", \n  title = \"Relationship between GDP PC and Gross Agriculture Output\")\n\nRegistered S3 method overwritten by 'ggside':\n  method from   \n  +.gg   ggplot2\n\n\n`stat_xsidebin()` using `bins = 30`. Pick better value with `binwidth`.\n`stat_ysidebin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\nThere is a weak positive correlation between GDP per capita and Gross Agriculture Output, with a Pearson correlation coefficient of 0.31 and statistically significant (p value is small). Although the correlation is not strong, Bayesian analysis supports its existence, with the Bayes factor indicating strong support for the alternative hypothesis (that there is a correlation). Overall, the increase in agricultural output may have a certain impact on per capita GDP, but this impact is relatively weak."
  },
  {
    "objectID": "In-class_EX/In-class_EX09/data/ELDERCARE.html",
    "href": "In-class_EX/In-class_EX09/data/ELDERCARE.html",
    "title": "ISSS626-GAA",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;  ELDERCARE  ENG dataset\n\nELDERCARE\n\n                 0 0     false"
  },
  {
    "objectID": "In-class_EX/In-class_Ex02/data/MPSZ-2019.html",
    "href": "In-class_EX/In-class_Ex02/data/MPSZ-2019.html",
    "title": "ISSS626-GAA",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "In-class_EX/In-class_EX05/In-class_EX05.html",
    "href": "In-class_EX/In-class_EX05/In-class_EX05.html",
    "title": "In-class EX05",
    "section": "",
    "text": "Introducing sfdep.\nsfdep creates an sf and tidyverse friendly interface to the package as well as introduces new functionality that is not present in spdep. sfdep utilizes list columns extensively to make this interface possible.\nGetting started Installing and Loading the R Packages Four R packages will be used for this in-class exercise, they are: sf, sfdep, tmap and tidyverse.\n\npacman::p_load(sf, sfdep, tmap, tidyverse)\n\n\n\n\n\n\n\nFor the purpose of this in-class exercise, the Hunan data sets will be used. There are two data sets in this use case, they are:\nHunan, a geospatial data set in ESRI shapefile format, and Hunan_2012, an attribute data set in csv format.\n\nhunan &lt;- st_read(dsn = \"data/geospatial\", \n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `/Users/yangyayong/Downloads/学校文件/smu文件/Term 3/G/yyyirene/ISSS626-GAA/In-class_EX/In-class_EX05/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\n\n\nhunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\n\nhunan &lt;- left_join(hunan,hunan2012) %&gt;%\n  select(1:4, 7, 15)\n\nJoining with `by = join_by(County)`\n\n\n\n\n\n\nhunan_GDPPC &lt;- hunan %&gt;%\n  select(GDPPC)\n\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(hunan_GDPPC) +\n  tm_fill(\"GDPPC\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"GDPPC\") +\n  tm_layout(main.title = \"Distribution of GDP per capita by county, Hunan Province\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2)\n\n\n\n\n\n\n\n\n\n\n\n\n\nmutate:create nb:neighbour list wt:\n\nwm_q &lt;- hunan_GDPPC %&gt;%\n  mutate(nb = st_contiguity(geometry),\n         wt = st_weights(nb,\n                         style = \"W\"),\n         .before = 1) \n\nNotice that st_weights() provides tree arguments, they are:\n\nnb: A neighbor list object as created by st_neighbors().\nstyle: Default “W” for row standardized weights. This value can also be “B”, “C”, “U”, “minmax”, and “S”. B is the basic binary coding, W is row standardised (sums over all links to n), C is globally standardised (sums over all links to n), U is equal to C divided by the number of neighbours (sums over all links to unity), while S is the variance-stabilizing coding scheme proposed by Tiefelsdorf et al. 1999, p. 167-168 (sums over all links to n).\nallow_zero: If TRUE, assigns zero as lagged value to zone without neighbors.\n\n\nwm_q\n\nSimple feature collection with 88 features and 3 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\nFirst 10 features:\n                               nb\n1                 2, 3, 4, 57, 85\n2               1, 57, 58, 78, 85\n3                     1, 4, 5, 85\n4                      1, 3, 5, 6\n5                     3, 4, 6, 85\n6                4, 5, 69, 75, 85\n7                  67, 71, 74, 84\n8       9, 46, 47, 56, 78, 80, 86\n9           8, 66, 68, 78, 84, 86\n10 16, 17, 19, 20, 22, 70, 72, 73\n                                                                            wt\n1                                                      0.2, 0.2, 0.2, 0.2, 0.2\n2                                                      0.2, 0.2, 0.2, 0.2, 0.2\n3                                                       0.25, 0.25, 0.25, 0.25\n4                                                       0.25, 0.25, 0.25, 0.25\n5                                                       0.25, 0.25, 0.25, 0.25\n6                                                      0.2, 0.2, 0.2, 0.2, 0.2\n7                                                       0.25, 0.25, 0.25, 0.25\n8  0.1428571, 0.1428571, 0.1428571, 0.1428571, 0.1428571, 0.1428571, 0.1428571\n9             0.1666667, 0.1666667, 0.1666667, 0.1666667, 0.1666667, 0.1666667\n10                      0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125\n   GDPPC                       geometry\n1  23667 POLYGON ((112.0625 29.75523...\n2  20981 POLYGON ((112.2288 29.11684...\n3  34592 POLYGON ((111.8927 29.6013,...\n4  24473 POLYGON ((111.3731 29.94649...\n5  25554 POLYGON ((111.6324 29.76288...\n6  27137 POLYGON ((110.8825 30.11675...\n7  63118 POLYGON ((113.9905 28.5682,...\n8  62202 POLYGON ((112.7181 28.38299...\n9  70666 POLYGON ((112.7914 28.52688...\n10 12761 POLYGON ((113.1757 26.82734...\n\n\n\n\n\n\nmoranI &lt;- global_moran(wm_q$GDPPC,\n                       wm_q$nb,\n                       wm_q$wt)\nglimpse(moranI)\n\nList of 2\n $ I: num 0.301\n $ K: num 7.64\n\n\n\n\n\nIn general, Moran’s I test will be performed instead of just computing the Moran’s I statistics. With sfdep package, Moran’s I test can be performed by using global_moran_test() as shown in the code chunk below.\n\nglobal_moran_test(wm_q$GDPPC,\n                       wm_q$nb,\n                       wm_q$wt)\n\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n\n\nPerforming Global Moran’I permutation test In practice, Monte carlo simulation should be used to perform the statistical test. For sfdep, it is supported by globel_moran_perm()\n\n\n\n\nset.seed(1234)\n\n\n\n\n\nglobal_moran_perm(wm_q$GDPPC,\n                       wm_q$nb,\n                       wm_q$wt,\n                  nsim = 99)\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 100 \n\nstatistic = 0.30075, observed rank = 100, p-value &lt; 2.2e-16\nalternative hypothesis: two.sided\n\n\nThe statistical report on previous tab shows that the p-value is smaller than alpha value of 0.05. Hence, we have enough statistical evidence to reject the null hypothesis that the spatial distribution of GPD per capita are resemble random distribution (i.e. independent from spatial). Because the Moran’s I statistics is greater than 0. We can infer that the spatial distribution shows sign of clustering.\nstart with 99 test local moran’s I\n\n\n\n\nLISA map is a categorical map showing outliers and clusters. There are two types of outliers namely: High-Low and Low-High outliers. Likewise, there are two type of clusters namely: High-High and Low-Low cluaters. In fact, LISA map is an interpreted map by combining local Moran’s I of geographical areas and their respective p-values.\n\nlisa &lt;- wm_q %&gt;% \n  mutate(local_moran = local_moran(\n    GDPPC, nb, wt, nsim = 99),\n         .before = 1) %&gt;%\n  unnest(local_moran)\n\n#pay attention to 10 local measure\n#mean use\n#another is median already have hh hl\n#pysal\n#p_ii_sim look at this one\n#compare ii with p_ii_sim\n#use + - colour to look at the plot\nComputing local Moran’s I In this section, you will learn how to compute Local Moran’s I of GDPPC at county level by using local_moran() of sfdep package.\nThe output of local_moran() is a sf data.frame containing the columns ii, eii, var_ii, z_ii, p_ii, p_ii_sim, and p_folded_sim.\n\nii: local moran statistic\neii: expectation of local moran statistic; for localmoran_permthe permutation sample means\nvar_ii: variance of local moran statistic; for localmoran_permthe permutation sample standard deviations\nz_ii: standard deviate of local moran statistic; for localmoran_perm based on permutation sample means and standard deviations p_ii: p-value of local moran statistic using pnorm(); for localmoran_perm using standard deviatse based on permutation sample means and standard deviations p_ii_sim: For localmoran_perm(), rank() and punif() of observed statistic rank for [0, 1] p-values using alternative= -p_folded_sim: the simulation folded [0, 0.5] range ranked p-value (based on https://github.com/pysal/esda/blob/4a63e0b5df1e754b17b5f1205b cadcbecc5e061/esda/crand.py#L211-L213)\nskewness: For localmoran_perm, the output of e1071::skewness() for the permutation samples underlying the standard deviates\nkurtosis: For localmoran_perm, the output of e1071::kurtosis() for the permutation samples underlying the standard deviates.\n\n\n\nIn this code chunk below, tmap functions are used prepare a choropleth map by using value in the ii field.\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(lisa) +\n  tm_fill(\"ii\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8)) +\n  tm_layout(\n    main.title = \"local Moran's I of GDPPC\",\n    main.title.size = 2)\n\nVariable(s) \"ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\n\nVisualising p-value of local Moran’s I\nIn the code chunk below, tmap functions are used prepare a choropleth map by using value in the p_ii_sim field.\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(lisa) +\n  tm_fill(\"p_ii_sim\") + \n  tm_borders(alpha = 0.5) +\n   tm_layout(main.title = \"p-value of local Moran's I\",\n            main.title.size = 2)\n\n\n\n\n\n\n\n\nFor p-values, the appropriate classification should be 0.001, 0.01, 0.05 and not significant instead of using default classification scheme.\n\n\n\nFor effective comparison, it will be better for us to plot both maps next to each other.\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\nmap1 &lt;- tm_shape(lisa) +\n  tm_fill(\"ii\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8)) +\n  tm_layout(main.title = \"local Moran's I of GDPPC\",\n            main.title.size = 0.8)\n\nmap2 &lt;- tm_shape(lisa) +\n  tm_fill(\"p_ii\",\n          breaks = c(0, 0.001, 0.01, 0.05, 1),\n              labels = c(\"0.001\", \"0.01\", \"0.05\", \"Not sig\")) + \n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"p-value of local Moran's I\",\n            main.title.size = 0.8)\n\ntmap_arrange(map1, map2, ncol = 2)\n\nVariable(s) \"ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\n\n\n\n\nIn lisa sf data.frame, we can find three fields contain the LISA categories. They are mean, median and pysal. In general, classification in mean will be used as shown in the code chunk below.\n\nlisa_sig &lt;- lisa  %&gt;%\n  filter(p_ii_sim &lt; 0.05)\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(lisa) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\ntm_shape(lisa_sig) +\n  tm_fill(\"mean\") + \n  tm_borders(alpha = 0.4)\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n\n\n\n\n\n\n\n\n\n\n\n\nHCSA uses spatial weights to identify locations of statistically significant hot spots and cold spots in an spatially weighted attribute that are in proximity to one another based on a calculated distance. The analysis groups features when similar high (hot) or low (cold) values are found in a cluster. The polygon features usually represent administration boundaries or a custom grid structure.\n\nwm_idw &lt;- hunan_GDPPC %&gt;%\n  mutate(nb = include_self(\n    st_contiguity(geometry)),\n    wts = st_inverse_distance(nb, \n                              geometry, \n                              scale = 1,\n                              alpha = 1),\n         .before = 1)\n\n! Polygon provided. Using point on surface.\n\n\nWarning: There was 1 warning in `stopifnot()`.\nℹ In argument: `wts = st_inverse_distance(nb, geometry, scale = 1, alpha = 1)`.\nCaused by warning in `st_point_on_surface.sfc()`:\n! st_point_on_surface may not give correct results for longitude/latitude data\n\n\n\nGi* and local Gi* are distance-based spatial statistics. Hence, distance methods instead of contiguity methods should be used to derive the spatial weight matrix.\nSince we are going to compute Gi* statistics, include_self()is used.\n\n\n\n\n\nHCSA &lt;- wm_idw %&gt;% \n  mutate(local_Gi = local_gstar_perm(\n    GDPPC, nb, wts, nsim = 99),\n         .before = 1) %&gt;%\n  unnest(local_Gi)\nHCSA\n\nSimple feature collection with 88 features and 13 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n# A tibble: 88 × 14\n    gi_star cluster     e_gi  var_gi std_dev p_value p_sim p_folded_sim skewness\n      &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1  0.261   Low     0.00126  1.07e-7  0.283  7.78e-1  0.66         0.33    0.783\n 2 -0.276   Low     0.000969 4.76e-8 -0.123  9.02e-1  0.98         0.49    0.713\n 3  0.00573 High    0.00156  2.53e-7 -0.0571 9.54e-1  0.78         0.39    0.972\n 4  0.528   High    0.00155  2.97e-7  0.321  7.48e-1  0.56         0.28    0.942\n 5  0.466   High    0.00137  2.76e-7  0.386  7.00e-1  0.52         0.26    1.32 \n 6 -0.445   High    0.000992 7.08e-8 -0.588  5.57e-1  0.68         0.34    0.692\n 7  2.99    High    0.000700 4.05e-8  3.13   1.74e-3  0.04         0.02    0.975\n 8  2.04    High    0.00152  1.58e-7  1.77   7.59e-2  0.16         0.08    1.26 \n 9  4.42    High    0.00130  1.18e-7  4.22   2.39e-5  0.02         0.01    1.20 \n10  1.21    Low     0.00175  1.25e-7  1.49   1.36e-1  0.18         0.09    0.408\n# ℹ 78 more rows\n# ℹ 5 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wts &lt;list&gt;, GDPPC &lt;dbl&gt;,\n#   geometry &lt;POLYGON [°]&gt;\n\n\n\nHCSA_sig &lt;- HCSA %&gt;%\n  filter(p_sim &lt; 0.05)\n\ntmap_mode(\"plot\") \n\ntmap mode set to plotting\n\ntm_shape(HCSA) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\n  \ntm_shape(HCSA_sig) +\n  tm_fill(\"cluster\") + #\n  tm_borders(alpha = 0.4)\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n\n\n\n\n\n\n\n\n\nAs usual, we will need to derive a spatial weight matrix before we can compute local Gi* statistics. Code chunk below will be used to derive a spatial weight matrix by using sfdep functions and tidyverse approach.\nVisualising Gi*\nIn the code chunk below, tmap functions are used to plot the local Gi (i.e. gi_star) at the province level.\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(HCSA) +\n  tm_fill(\"gi_star\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8))\n\nVariable(s) \"gi_star\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\n\nVisualising p-value of HCSA\nIn the code chunk below, tmap functions are used to plot the p-values of local Gi* (i.e. p_sim) at the province level.\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(HCSA) +\n  tm_fill(\"p_sim\") + \n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nVisuaising local HCSA\nFor effective comparison, you can plot both maps next to each other as shown below.\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\nmap1 &lt;- tm_shape(HCSA) +\n  tm_fill(\"gi_star\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8)) +\n  tm_layout(main.title = \"Gi* of GDPPC\",\n            main.title.size = 0.8)\n\nmap2 &lt;- tm_shape(HCSA) +\n  tm_fill(\"p_value\",\n          breaks = c(0, 0.001, 0.01, 0.05, 1),\n              labels = c(\"0.001\", \"0.01\", \"0.05\", \"Not sig\")) + \n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"p-value of Gi*\",\n            main.title.size = 0.8)\n\ntmap_arrange(map1, map2, ncol = 2)\n\nVariable(s) \"gi_star\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\n\nVisualising hot spot and cold spot areas\nNow, we are ready to plot the significant (i.e. p-values less than 0.05) hot spot and cold spot areas by using appropriate tmap functions as shown below.\n\nHCSA_sig &lt;- HCSA  %&gt;%\n  filter(p_sim &lt; 0.05)\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(HCSA) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\ntm_shape(HCSA_sig) +\n  tm_fill(\"cluster\") + \n  tm_borders(alpha = 0.4)\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n\n\n\n\n\n\n\n\n\nFigure above reveals that there is one hot spot area and two cold spot areas. Interestingly, the hot spot areas coincide with the High-high cluster identifies by using local Moran’s I method in the earlier sub-section.\n#use some statistic significant p_ii &lt;0.5\n#ll significant so is cluster\n#gi* view(hcsa)\n#inclass show a new way to do it"
  },
  {
    "objectID": "In-class_EX/In-class_EX05/In-class_EX05.html#content",
    "href": "In-class_EX/In-class_EX05/In-class_EX05.html#content",
    "title": "In-class EX05",
    "section": "",
    "text": "Introducing sfdep.\nsfdep creates an sf and tidyverse friendly interface to the package as well as introduces new functionality that is not present in spdep. sfdep utilizes list columns extensively to make this interface possible.\nGetting started Installing and Loading the R Packages Four R packages will be used for this in-class exercise, they are: sf, sfdep, tmap and tidyverse.\n\npacman::p_load(sf, sfdep, tmap, tidyverse)"
  },
  {
    "objectID": "In-class_EX/In-class_EX05/In-class_EX05.html#the-data",
    "href": "In-class_EX/In-class_EX05/In-class_EX05.html#the-data",
    "title": "In-class EX05",
    "section": "",
    "text": "For the purpose of this in-class exercise, the Hunan data sets will be used. There are two data sets in this use case, they are:\nHunan, a geospatial data set in ESRI shapefile format, and Hunan_2012, an attribute data set in csv format.\n\nhunan &lt;- st_read(dsn = \"data/geospatial\", \n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `/Users/yangyayong/Downloads/学校文件/smu文件/Term 3/G/yyyirene/ISSS626-GAA/In-class_EX/In-class_EX05/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84"
  },
  {
    "objectID": "In-class_EX/In-class_EX05/In-class_EX05.html#importing-attribute-table",
    "href": "In-class_EX/In-class_EX05/In-class_EX05.html#importing-attribute-table",
    "title": "In-class EX05",
    "section": "",
    "text": "hunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "In-class_EX/In-class_EX05/In-class_EX05.html#combining-both-data-frame-by-using-left-join",
    "href": "In-class_EX/In-class_EX05/In-class_EX05.html#combining-both-data-frame-by-using-left-join",
    "title": "In-class EX05",
    "section": "",
    "text": "hunan &lt;- left_join(hunan,hunan2012) %&gt;%\n  select(1:4, 7, 15)\n\nJoining with `by = join_by(County)`"
  },
  {
    "objectID": "In-class_EX/In-class_EX05/In-class_EX05.html#plotting-a-choropleth-map",
    "href": "In-class_EX/In-class_EX05/In-class_EX05.html#plotting-a-choropleth-map",
    "title": "In-class EX05",
    "section": "",
    "text": "hunan_GDPPC &lt;- hunan %&gt;%\n  select(GDPPC)\n\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(hunan_GDPPC) +\n  tm_fill(\"GDPPC\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"GDPPC\") +\n  tm_layout(main.title = \"Distribution of GDP per capita by county, Hunan Province\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2)"
  },
  {
    "objectID": "In-class_EX/In-class_EX05/In-class_EX05.html#global-measures-of-spatial-association",
    "href": "In-class_EX/In-class_EX05/In-class_EX05.html#global-measures-of-spatial-association",
    "title": "In-class EX05",
    "section": "",
    "text": "mutate:create nb:neighbour list wt:\n\nwm_q &lt;- hunan_GDPPC %&gt;%\n  mutate(nb = st_contiguity(geometry),\n         wt = st_weights(nb,\n                         style = \"W\"),\n         .before = 1) \n\nNotice that st_weights() provides tree arguments, they are:\n\nnb: A neighbor list object as created by st_neighbors().\nstyle: Default “W” for row standardized weights. This value can also be “B”, “C”, “U”, “minmax”, and “S”. B is the basic binary coding, W is row standardised (sums over all links to n), C is globally standardised (sums over all links to n), U is equal to C divided by the number of neighbours (sums over all links to unity), while S is the variance-stabilizing coding scheme proposed by Tiefelsdorf et al. 1999, p. 167-168 (sums over all links to n).\nallow_zero: If TRUE, assigns zero as lagged value to zone without neighbors.\n\n\nwm_q\n\nSimple feature collection with 88 features and 3 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\nFirst 10 features:\n                               nb\n1                 2, 3, 4, 57, 85\n2               1, 57, 58, 78, 85\n3                     1, 4, 5, 85\n4                      1, 3, 5, 6\n5                     3, 4, 6, 85\n6                4, 5, 69, 75, 85\n7                  67, 71, 74, 84\n8       9, 46, 47, 56, 78, 80, 86\n9           8, 66, 68, 78, 84, 86\n10 16, 17, 19, 20, 22, 70, 72, 73\n                                                                            wt\n1                                                      0.2, 0.2, 0.2, 0.2, 0.2\n2                                                      0.2, 0.2, 0.2, 0.2, 0.2\n3                                                       0.25, 0.25, 0.25, 0.25\n4                                                       0.25, 0.25, 0.25, 0.25\n5                                                       0.25, 0.25, 0.25, 0.25\n6                                                      0.2, 0.2, 0.2, 0.2, 0.2\n7                                                       0.25, 0.25, 0.25, 0.25\n8  0.1428571, 0.1428571, 0.1428571, 0.1428571, 0.1428571, 0.1428571, 0.1428571\n9             0.1666667, 0.1666667, 0.1666667, 0.1666667, 0.1666667, 0.1666667\n10                      0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125\n   GDPPC                       geometry\n1  23667 POLYGON ((112.0625 29.75523...\n2  20981 POLYGON ((112.2288 29.11684...\n3  34592 POLYGON ((111.8927 29.6013,...\n4  24473 POLYGON ((111.3731 29.94649...\n5  25554 POLYGON ((111.6324 29.76288...\n6  27137 POLYGON ((110.8825 30.11675...\n7  63118 POLYGON ((113.9905 28.5682,...\n8  62202 POLYGON ((112.7181 28.38299...\n9  70666 POLYGON ((112.7914 28.52688...\n10 12761 POLYGON ((113.1757 26.82734...\n\n\n\n\n\n\nmoranI &lt;- global_moran(wm_q$GDPPC,\n                       wm_q$nb,\n                       wm_q$wt)\nglimpse(moranI)\n\nList of 2\n $ I: num 0.301\n $ K: num 7.64\n\n\n\n\n\nIn general, Moran’s I test will be performed instead of just computing the Moran’s I statistics. With sfdep package, Moran’s I test can be performed by using global_moran_test() as shown in the code chunk below.\n\nglobal_moran_test(wm_q$GDPPC,\n                       wm_q$nb,\n                       wm_q$wt)\n\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n\n\nPerforming Global Moran’I permutation test In practice, Monte carlo simulation should be used to perform the statistical test. For sfdep, it is supported by globel_moran_perm()\n\n\n\n\nset.seed(1234)\n\n\n\n\n\nglobal_moran_perm(wm_q$GDPPC,\n                       wm_q$nb,\n                       wm_q$wt,\n                  nsim = 99)\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 100 \n\nstatistic = 0.30075, observed rank = 100, p-value &lt; 2.2e-16\nalternative hypothesis: two.sided\n\n\nThe statistical report on previous tab shows that the p-value is smaller than alpha value of 0.05. Hence, we have enough statistical evidence to reject the null hypothesis that the spatial distribution of GPD per capita are resemble random distribution (i.e. independent from spatial). Because the Moran’s I statistics is greater than 0. We can infer that the spatial distribution shows sign of clustering.\nstart with 99 test local moran’s I"
  },
  {
    "objectID": "In-class_EX/In-class_EX05/In-class_EX05.html#lisa-map",
    "href": "In-class_EX/In-class_EX05/In-class_EX05.html#lisa-map",
    "title": "In-class EX05",
    "section": "",
    "text": "LISA map is a categorical map showing outliers and clusters. There are two types of outliers namely: High-Low and Low-High outliers. Likewise, there are two type of clusters namely: High-High and Low-Low cluaters. In fact, LISA map is an interpreted map by combining local Moran’s I of geographical areas and their respective p-values.\n\nlisa &lt;- wm_q %&gt;% \n  mutate(local_moran = local_moran(\n    GDPPC, nb, wt, nsim = 99),\n         .before = 1) %&gt;%\n  unnest(local_moran)\n\n#pay attention to 10 local measure\n#mean use\n#another is median already have hh hl\n#pysal\n#p_ii_sim look at this one\n#compare ii with p_ii_sim\n#use + - colour to look at the plot\nComputing local Moran’s I In this section, you will learn how to compute Local Moran’s I of GDPPC at county level by using local_moran() of sfdep package.\nThe output of local_moran() is a sf data.frame containing the columns ii, eii, var_ii, z_ii, p_ii, p_ii_sim, and p_folded_sim.\n\nii: local moran statistic\neii: expectation of local moran statistic; for localmoran_permthe permutation sample means\nvar_ii: variance of local moran statistic; for localmoran_permthe permutation sample standard deviations\nz_ii: standard deviate of local moran statistic; for localmoran_perm based on permutation sample means and standard deviations p_ii: p-value of local moran statistic using pnorm(); for localmoran_perm using standard deviatse based on permutation sample means and standard deviations p_ii_sim: For localmoran_perm(), rank() and punif() of observed statistic rank for [0, 1] p-values using alternative= -p_folded_sim: the simulation folded [0, 0.5] range ranked p-value (based on https://github.com/pysal/esda/blob/4a63e0b5df1e754b17b5f1205b cadcbecc5e061/esda/crand.py#L211-L213)\nskewness: For localmoran_perm, the output of e1071::skewness() for the permutation samples underlying the standard deviates\nkurtosis: For localmoran_perm, the output of e1071::kurtosis() for the permutation samples underlying the standard deviates.\n\n\n\nIn this code chunk below, tmap functions are used prepare a choropleth map by using value in the ii field.\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(lisa) +\n  tm_fill(\"ii\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8)) +\n  tm_layout(\n    main.title = \"local Moran's I of GDPPC\",\n    main.title.size = 2)\n\nVariable(s) \"ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\n\nVisualising p-value of local Moran’s I\nIn the code chunk below, tmap functions are used prepare a choropleth map by using value in the p_ii_sim field.\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(lisa) +\n  tm_fill(\"p_ii_sim\") + \n  tm_borders(alpha = 0.5) +\n   tm_layout(main.title = \"p-value of local Moran's I\",\n            main.title.size = 2)\n\n\n\n\n\n\n\n\nFor p-values, the appropriate classification should be 0.001, 0.01, 0.05 and not significant instead of using default classification scheme.\n\n\n\nFor effective comparison, it will be better for us to plot both maps next to each other.\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\nmap1 &lt;- tm_shape(lisa) +\n  tm_fill(\"ii\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8)) +\n  tm_layout(main.title = \"local Moran's I of GDPPC\",\n            main.title.size = 0.8)\n\nmap2 &lt;- tm_shape(lisa) +\n  tm_fill(\"p_ii\",\n          breaks = c(0, 0.001, 0.01, 0.05, 1),\n              labels = c(\"0.001\", \"0.01\", \"0.05\", \"Not sig\")) + \n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"p-value of local Moran's I\",\n            main.title.size = 0.8)\n\ntmap_arrange(map1, map2, ncol = 2)\n\nVariable(s) \"ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\n\n\n\n\nIn lisa sf data.frame, we can find three fields contain the LISA categories. They are mean, median and pysal. In general, classification in mean will be used as shown in the code chunk below.\n\nlisa_sig &lt;- lisa  %&gt;%\n  filter(p_ii_sim &lt; 0.05)\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(lisa) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\ntm_shape(lisa_sig) +\n  tm_fill(\"mean\") + \n  tm_borders(alpha = 0.4)\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n\n\n\n\n\n\n\n\n\n\n\n\nHCSA uses spatial weights to identify locations of statistically significant hot spots and cold spots in an spatially weighted attribute that are in proximity to one another based on a calculated distance. The analysis groups features when similar high (hot) or low (cold) values are found in a cluster. The polygon features usually represent administration boundaries or a custom grid structure.\n\nwm_idw &lt;- hunan_GDPPC %&gt;%\n  mutate(nb = include_self(\n    st_contiguity(geometry)),\n    wts = st_inverse_distance(nb, \n                              geometry, \n                              scale = 1,\n                              alpha = 1),\n         .before = 1)\n\n! Polygon provided. Using point on surface.\n\n\nWarning: There was 1 warning in `stopifnot()`.\nℹ In argument: `wts = st_inverse_distance(nb, geometry, scale = 1, alpha = 1)`.\nCaused by warning in `st_point_on_surface.sfc()`:\n! st_point_on_surface may not give correct results for longitude/latitude data\n\n\n\nGi* and local Gi* are distance-based spatial statistics. Hence, distance methods instead of contiguity methods should be used to derive the spatial weight matrix.\nSince we are going to compute Gi* statistics, include_self()is used.\n\n\n\n\n\nHCSA &lt;- wm_idw %&gt;% \n  mutate(local_Gi = local_gstar_perm(\n    GDPPC, nb, wts, nsim = 99),\n         .before = 1) %&gt;%\n  unnest(local_Gi)\nHCSA\n\nSimple feature collection with 88 features and 13 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n# A tibble: 88 × 14\n    gi_star cluster     e_gi  var_gi std_dev p_value p_sim p_folded_sim skewness\n      &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1  0.261   Low     0.00126  1.07e-7  0.283  7.78e-1  0.66         0.33    0.783\n 2 -0.276   Low     0.000969 4.76e-8 -0.123  9.02e-1  0.98         0.49    0.713\n 3  0.00573 High    0.00156  2.53e-7 -0.0571 9.54e-1  0.78         0.39    0.972\n 4  0.528   High    0.00155  2.97e-7  0.321  7.48e-1  0.56         0.28    0.942\n 5  0.466   High    0.00137  2.76e-7  0.386  7.00e-1  0.52         0.26    1.32 \n 6 -0.445   High    0.000992 7.08e-8 -0.588  5.57e-1  0.68         0.34    0.692\n 7  2.99    High    0.000700 4.05e-8  3.13   1.74e-3  0.04         0.02    0.975\n 8  2.04    High    0.00152  1.58e-7  1.77   7.59e-2  0.16         0.08    1.26 \n 9  4.42    High    0.00130  1.18e-7  4.22   2.39e-5  0.02         0.01    1.20 \n10  1.21    Low     0.00175  1.25e-7  1.49   1.36e-1  0.18         0.09    0.408\n# ℹ 78 more rows\n# ℹ 5 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wts &lt;list&gt;, GDPPC &lt;dbl&gt;,\n#   geometry &lt;POLYGON [°]&gt;\n\n\n\nHCSA_sig &lt;- HCSA %&gt;%\n  filter(p_sim &lt; 0.05)\n\ntmap_mode(\"plot\") \n\ntmap mode set to plotting\n\ntm_shape(HCSA) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\n  \ntm_shape(HCSA_sig) +\n  tm_fill(\"cluster\") + #\n  tm_borders(alpha = 0.4)\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n\n\n\n\n\n\n\n\n\nAs usual, we will need to derive a spatial weight matrix before we can compute local Gi* statistics. Code chunk below will be used to derive a spatial weight matrix by using sfdep functions and tidyverse approach.\nVisualising Gi*\nIn the code chunk below, tmap functions are used to plot the local Gi (i.e. gi_star) at the province level.\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(HCSA) +\n  tm_fill(\"gi_star\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8))\n\nVariable(s) \"gi_star\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\n\nVisualising p-value of HCSA\nIn the code chunk below, tmap functions are used to plot the p-values of local Gi* (i.e. p_sim) at the province level.\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(HCSA) +\n  tm_fill(\"p_sim\") + \n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nVisuaising local HCSA\nFor effective comparison, you can plot both maps next to each other as shown below.\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\nmap1 &lt;- tm_shape(HCSA) +\n  tm_fill(\"gi_star\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8)) +\n  tm_layout(main.title = \"Gi* of GDPPC\",\n            main.title.size = 0.8)\n\nmap2 &lt;- tm_shape(HCSA) +\n  tm_fill(\"p_value\",\n          breaks = c(0, 0.001, 0.01, 0.05, 1),\n              labels = c(\"0.001\", \"0.01\", \"0.05\", \"Not sig\")) + \n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"p-value of Gi*\",\n            main.title.size = 0.8)\n\ntmap_arrange(map1, map2, ncol = 2)\n\nVariable(s) \"gi_star\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\n\nVisualising hot spot and cold spot areas\nNow, we are ready to plot the significant (i.e. p-values less than 0.05) hot spot and cold spot areas by using appropriate tmap functions as shown below.\n\nHCSA_sig &lt;- HCSA  %&gt;%\n  filter(p_sim &lt; 0.05)\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(HCSA) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\ntm_shape(HCSA_sig) +\n  tm_fill(\"cluster\") + \n  tm_borders(alpha = 0.4)\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n\n\n\n\n\n\n\n\n\nFigure above reveals that there is one hot spot area and two cold spot areas. Interestingly, the hot spot areas coincide with the High-high cluster identifies by using local Moran’s I method in the earlier sub-section.\n#use some statistic significant p_ii &lt;0.5\n#ll significant so is cluster\n#gi* view(hcsa)\n#inclass show a new way to do it"
  },
  {
    "objectID": "In-class_EX/In-class_EX06/In-class_EX06.html",
    "href": "In-class_EX/In-class_EX06/In-class_EX06.html",
    "title": "In-class Exercise 06",
    "section": "",
    "text": "Emerging Hot Spot Analysis (EHSA) is a spatio-temporal analysis method for revealing and describing how hot spot and cold spot areas evolve over time. The analysis consist of four main steps:\n\nBuilding a space-time cube,\nCalculating Getis-Ord local Gi* statistic for each bin by using an FDR correction,\nEvaluating these hot and cold spot trends by using Mann-Kendall trend test,\nCategorising each study area location by referring to the resultant trend z-score and p-value for each location with data, and with the hot spot z-score and p-value for each bin.\n\n\n\n\n\n\nAs usual, p_load() of pacman package will be used to check if the necessary packages have been installed in R, if yes, load the packages on R environment.\nFive R packages are need for this in-class exercise, they are: sf, sfdep, tmap, plotly, and tidyverse.\n\npacman::p_load(sf, sfdep, tmap, tidyverse)\n\n\n\n\n\nFor the purpose of this in-class exercise, the Hunan data sets will be used. There are two data sets in this use case, they are:\n\nHunan, a geospatial data set in ESRI shapefile format, and\nHunan_GDPPC, an attribute data set in csv format.\n\nBefore getting started, reveal the content of Hunan_GDPPC.csv by using Notepad and MS Excel.\n\n\nIn the code chunk below, st_read() of sf package is used to import Hunan shapefile into R\n\nhunan &lt;- st_read(dsn = \"data/geospatial\", \n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `/Users/yangyayong/Downloads/学校文件/smu文件/Term 3/G/yyyirene/ISSS626-GAA/In-class_EX/In-class_EX06/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\n\nIn the code chunk below, st_read() of sf package is used to import Hunan shapefile into R\n\nGDPPC &lt;- read_csv(\"data/aspatial/Hunan_GDPPC.csv\")\n\nRows: 1496 Columns: 3\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): County\ndbl (2): Year, GDPPC\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\n\nBefore getting started, students must read this article to learn the basic concept of spatio-temporal cube and its implementation in sfdep package.\nIn the code chunk below, spacetime() of sfdep ised used to create an spatio-temporal cube.\n\n# Create a space-time cube object  #each time have a layer\nGDPPC_st &lt;- spacetime(GDPPC, hunan,\n                       .loc_col = \"County\",#space indicator\n                       .time_col = \"Year\")  #time  integer \n\nNext, is_spacetime_cube() of sfdep package will be used to verify if GDPPC_st is indeed an space-time cube object.\n\n# Check if it is a space-time cube object\nis_spacetime_cube(GDPPC_st)\n\n[1] TRUE\n\n\nThe TRUE return confirms that GDPPC_st object is indeed an time-space cube.\n#inverse distance weights g* should be included itself\n\n\n\nNext, we will compute the local Gi* statistics.\n\n\nThe code chunk below will be used to identify neighbors and to derive an inverse distance weights.\n\n# Compute Gi* statistic\n# Get neighbors and derive spatial weights\nGDPPC_nb &lt;- GDPPC_st %&gt;%\n  activate(\"geometry\") %&gt;%  #must have this to compute \n  mutate(nb = include_self(\n           st_contiguity(geometry)),#how many neighbour\n         wt = st_inverse_distance(nb, \n                                  geometry, \n                                  scale = 1,\n                                  alpha = 1),\n  .before = 1) %&gt;% #infront of the table\n  set_nbs(\"nb\") %&gt;% #\n  set_wts(\"wt\")\n\n! Polygon provided. Using point on surface.\n\n\nWarning: There was 1 warning in `stopifnot()`.\nℹ In argument: `wt = st_inverse_distance(nb, geometry, scale = 1, alpha = 1)`.\nCaused by warning in `st_point_on_surface.sfc()`:\n! st_point_on_surface may not give correct results for longitude/latitude data\n\n\n\nactivate() of dplyr package is used to activate the geometry context\nmutate() of dplyr package is used to create two new columns nb and wt.\nThen we will activate the data context again and copy over the nb and wt columns to each time-slice using set_nbs() and set_wts()\n\nrow order is very important so do not rearrange the observations after using set_nbs() or set_wts().\n\n\nNote that this dataset now has neighbors and weights for each time-slice.\n\n\n\n\nWe can use these new columns to manually calculate the local Gi* for each location. We can do this by grouping by Year and using local_gstar_perm() of sfdep package. After which, we use unnest() to unnest gi_star column of the newly created gi_starts data.frame\n\ngi_stars &lt;- GDPPC_nb %&gt;%\n  group_by(Year) %&gt;%\n  mutate(gi_star = local_gstar_perm(\n    GDPPC, nb, wt)) %&gt;%\n  tidyr::unnest(gi_star)\n\n#This have trend ,Moran may not have trend\n\n\n\nA monotonic series or function is one that only increases (or decreases) and never changes direction. So long as the function either stays flat or continues to increase, it is monotonic.\nH0: No monotonic trend\nH1: Monotonic trend is present\nInterpretation\n\nReject the null-hypothesis null if the p-value is smaller than the alpha value (i.e. 1-confident level)\nTau ranges between -1 and 1 where:\n\n-1 is a perfectly decreasing series, and\n1 is a perfectly increasing series.\n\n\n\n\nWith these Gi* measures we can then evaluate each location for a trend using the Mann-Kendall test. The code chunk below uses Changsha county.\n\ncbg &lt;- gi_stars %&gt;%\n  ungroup() %&gt;%\n  filter(County == \"Changsha\") %&gt;%\n  select(County, Year, gi_star)\n\nNext, we plot the result by using ggplot2 functions.\n\nggplot(data = cbg, aes(x = Year, y = gi_star)) +\n  geom_line() +\n  theme_light()\n\n\n\n\n\n\n\n\n\n\n\nWe can also create an interactive plot by using ggplotly() of plotly package\n\nlibrary(plotly)\n\n\nAttaching package: 'plotly'\n\n\nThe following object is masked from 'package:ggplot2':\n\n    last_plot\n\n\nThe following object is masked from 'package:stats':\n\n    filter\n\n\nThe following object is masked from 'package:graphics':\n\n    layout\n\np &lt;- ggplot(data = cbg, \n       aes(x = Year, \n           y = gi_star)) +\n  geom_line() +\n  theme_light()\n\nggplotly(p)\n\n\n\n\n\n\n\n\n\ncbg %&gt;%\n  summarise(mk = list(\n    unclass(\n      Kendall::MannKendall(gi_star)\n    )\n  )) %&gt;%\n  tidyr::unnest_wider(mk)\n\n# A tibble: 1 × 5\n    tau      sl     S     D  varS\n  &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 0.485 0.00742    66  136.  589.\n\n\nIn the above result, sl is the p-value. With reference to the results, we will reject the hypothesis null and infer that a slight upward trend.\nMann-Kendall test data.frame We can replicate this for each location by using group_by() of dplyr package.\n\nehsa &lt;- gi_stars %&gt;%\n  group_by(County) %&gt;%\n  summarise(mk = list(\n    unclass(\n      Kendall::MannKendall(gi_star)\n    )\n  )) %&gt;%\n  tidyr::unnest_wider(mk)\n\nhead(ehsa)\n\n# A tibble: 6 × 6\n  County        tau        sl     S     D  varS\n  &lt;chr&gt;       &lt;dbl&gt;     &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 Anhua      0.191  0.303        26  136.  589.\n2 Anren     -0.294  0.108       -40  136.  589.\n3 Anxiang    0      1             0  136.  589.\n4 Baojing   -0.691  0.000128    -94  136.  589.\n5 Chaling   -0.0882 0.650       -12  136.  589.\n6 Changning -0.750  0.0000318  -102  136.  589.\n\n\nMann-Kendall test data.frame We can also sort to show significant emerging hot/cold spots\n\nemerging &lt;- ehsa %&gt;% \n  arrange(sl, abs(tau)) %&gt;% \n  slice(1:10)\nhead(emerging)\n\n# A tibble: 6 × 6\n  County        tau         sl     S     D  varS\n  &lt;chr&gt;       &lt;dbl&gt;      &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 Shuangfeng  0.868 0.00000143   118  136.  589.\n2 Xiangtan    0.868 0.00000143   118  136.  589.\n3 Xiangxiang  0.868 0.00000143   118  136.  589.\n4 Chengbu    -0.824 0.00000482  -112  136.  589.\n5 Dongan     -0.824 0.00000482  -112  136.  589.\n6 Wugang     -0.809 0.00000712  -110  136.  589.\n\n\n\n\n\n\nLastly, we will perform EHSA analysis by using emerging_hotspot_analysis() of sfdep package. It takes a spacetime object x (i.e. GDPPC_st), and the quoted name of the variable of interest (i.e. GDPPC) for .var argument. The k argument is used to specify the number of time lags which is set to 1 by default. Lastly, nsim map numbers of simulation to be performed.\n\nehsa&lt;-emerging_hotspot_analysis(\n  x=GDPPC_st,\n  .var = \"GDPPC\",\n  K=1,\n  nism=99\n)\n\n\n\nIn the code chunk below, ggplot2 functions is used to reveal the distribution of EHSA classes as a bar chart.\n\nggplot(data = ehsa,\n       aes(x = classification)) +\n  geom_bar()\n\n\n\n\n\n\n\n\nNot all is statistic significant. Need to use the p- value to do it\nFigure above shows that sporadic cold spots class has the high numbers of county.\n\n\n\nIn this section, you will learn how to visualise the geographic distribution EHSA classes. However, before we can do so, we need to join both hunan and ehsa together by using the code chunk below.\n\nhunan_ehsa &lt;- hunan %&gt;%\n  left_join(ehsa, by = join_by(County == location))\n\nNext, tmap functions will be used to plot a categorical choropleth map by using the code chunk below.\n\nehsa_sig &lt;- hunan_ehsa %&gt;%\n  filter(p_value &lt; 0.05)\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(hunan_ehsa) +\n  tm_polygons(alpha = 0.5) +\n  tm_borders(alpha = 0.5) +\ntm_shape(ehsa_sig) +\n  tm_fill(\"classification\") +\n  tm_borders(alpha = 0.4)\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them)."
  },
  {
    "objectID": "In-class_EX/In-class_EX06/In-class_EX06.html#overview",
    "href": "In-class_EX/In-class_EX06/In-class_EX06.html#overview",
    "title": "In-class Exercise 06",
    "section": "",
    "text": "Emerging Hot Spot Analysis (EHSA) is a spatio-temporal analysis method for revealing and describing how hot spot and cold spot areas evolve over time. The analysis consist of four main steps:\n\nBuilding a space-time cube,\nCalculating Getis-Ord local Gi* statistic for each bin by using an FDR correction,\nEvaluating these hot and cold spot trends by using Mann-Kendall trend test,\nCategorising each study area location by referring to the resultant trend z-score and p-value for each location with data, and with the hot spot z-score and p-value for each bin."
  },
  {
    "objectID": "In-class_EX/In-class_EX06/In-class_EX06.html#getting-started",
    "href": "In-class_EX/In-class_EX06/In-class_EX06.html#getting-started",
    "title": "In-class Exercise 06",
    "section": "",
    "text": "As usual, p_load() of pacman package will be used to check if the necessary packages have been installed in R, if yes, load the packages on R environment.\nFive R packages are need for this in-class exercise, they are: sf, sfdep, tmap, plotly, and tidyverse.\n\npacman::p_load(sf, sfdep, tmap, tidyverse)"
  },
  {
    "objectID": "In-class_EX/In-class_EX06/In-class_EX06.html#the-data",
    "href": "In-class_EX/In-class_EX06/In-class_EX06.html#the-data",
    "title": "In-class Exercise 06",
    "section": "",
    "text": "For the purpose of this in-class exercise, the Hunan data sets will be used. There are two data sets in this use case, they are:\n\nHunan, a geospatial data set in ESRI shapefile format, and\nHunan_GDPPC, an attribute data set in csv format.\n\nBefore getting started, reveal the content of Hunan_GDPPC.csv by using Notepad and MS Excel.\n\n\nIn the code chunk below, st_read() of sf package is used to import Hunan shapefile into R\n\nhunan &lt;- st_read(dsn = \"data/geospatial\", \n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `/Users/yangyayong/Downloads/学校文件/smu文件/Term 3/G/yyyirene/ISSS626-GAA/In-class_EX/In-class_EX06/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\n\nIn the code chunk below, st_read() of sf package is used to import Hunan shapefile into R\n\nGDPPC &lt;- read_csv(\"data/aspatial/Hunan_GDPPC.csv\")\n\nRows: 1496 Columns: 3\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): County\ndbl (2): Year, GDPPC\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "In-class_EX/In-class_EX06/In-class_EX06.html#creating-a-time-series-cube",
    "href": "In-class_EX/In-class_EX06/In-class_EX06.html#creating-a-time-series-cube",
    "title": "In-class Exercise 06",
    "section": "",
    "text": "Before getting started, students must read this article to learn the basic concept of spatio-temporal cube and its implementation in sfdep package.\nIn the code chunk below, spacetime() of sfdep ised used to create an spatio-temporal cube.\n\n# Create a space-time cube object  #each time have a layer\nGDPPC_st &lt;- spacetime(GDPPC, hunan,\n                       .loc_col = \"County\",#space indicator\n                       .time_col = \"Year\")  #time  integer \n\nNext, is_spacetime_cube() of sfdep package will be used to verify if GDPPC_st is indeed an space-time cube object.\n\n# Check if it is a space-time cube object\nis_spacetime_cube(GDPPC_st)\n\n[1] TRUE\n\n\nThe TRUE return confirms that GDPPC_st object is indeed an time-space cube.\n#inverse distance weights g* should be included itself"
  },
  {
    "objectID": "In-class_EX/In-class_EX06/In-class_EX06.html#computing-gi",
    "href": "In-class_EX/In-class_EX06/In-class_EX06.html#computing-gi",
    "title": "In-class Exercise 06",
    "section": "",
    "text": "Next, we will compute the local Gi* statistics.\n\n\nThe code chunk below will be used to identify neighbors and to derive an inverse distance weights.\n\n# Compute Gi* statistic\n# Get neighbors and derive spatial weights\nGDPPC_nb &lt;- GDPPC_st %&gt;%\n  activate(\"geometry\") %&gt;%  #must have this to compute \n  mutate(nb = include_self(\n           st_contiguity(geometry)),#how many neighbour\n         wt = st_inverse_distance(nb, \n                                  geometry, \n                                  scale = 1,\n                                  alpha = 1),\n  .before = 1) %&gt;% #infront of the table\n  set_nbs(\"nb\") %&gt;% #\n  set_wts(\"wt\")\n\n! Polygon provided. Using point on surface.\n\n\nWarning: There was 1 warning in `stopifnot()`.\nℹ In argument: `wt = st_inverse_distance(nb, geometry, scale = 1, alpha = 1)`.\nCaused by warning in `st_point_on_surface.sfc()`:\n! st_point_on_surface may not give correct results for longitude/latitude data\n\n\n\nactivate() of dplyr package is used to activate the geometry context\nmutate() of dplyr package is used to create two new columns nb and wt.\nThen we will activate the data context again and copy over the nb and wt columns to each time-slice using set_nbs() and set_wts()\n\nrow order is very important so do not rearrange the observations after using set_nbs() or set_wts().\n\n\nNote that this dataset now has neighbors and weights for each time-slice."
  },
  {
    "objectID": "In-class_EX/In-class_EX06/In-class_EX06.html#computing-gi-1",
    "href": "In-class_EX/In-class_EX06/In-class_EX06.html#computing-gi-1",
    "title": "In-class Exercise 06",
    "section": "",
    "text": "We can use these new columns to manually calculate the local Gi* for each location. We can do this by grouping by Year and using local_gstar_perm() of sfdep package. After which, we use unnest() to unnest gi_star column of the newly created gi_starts data.frame\n\ngi_stars &lt;- GDPPC_nb %&gt;%\n  group_by(Year) %&gt;%\n  mutate(gi_star = local_gstar_perm(\n    GDPPC, nb, wt)) %&gt;%\n  tidyr::unnest(gi_star)\n\n#This have trend ,Moran may not have trend"
  },
  {
    "objectID": "In-class_EX/In-class_EX06/In-class_EX06.html#mann-kendall-test",
    "href": "In-class_EX/In-class_EX06/In-class_EX06.html#mann-kendall-test",
    "title": "In-class Exercise 06",
    "section": "",
    "text": "A monotonic series or function is one that only increases (or decreases) and never changes direction. So long as the function either stays flat or continues to increase, it is monotonic.\nH0: No monotonic trend\nH1: Monotonic trend is present\nInterpretation\n\nReject the null-hypothesis null if the p-value is smaller than the alpha value (i.e. 1-confident level)\nTau ranges between -1 and 1 where:\n\n-1 is a perfectly decreasing series, and\n1 is a perfectly increasing series.\n\n\n\n\nWith these Gi* measures we can then evaluate each location for a trend using the Mann-Kendall test. The code chunk below uses Changsha county.\n\ncbg &lt;- gi_stars %&gt;%\n  ungroup() %&gt;%\n  filter(County == \"Changsha\") %&gt;%\n  select(County, Year, gi_star)\n\nNext, we plot the result by using ggplot2 functions.\n\nggplot(data = cbg, aes(x = Year, y = gi_star)) +\n  geom_line() +\n  theme_light()\n\n\n\n\n\n\n\n\n\n\n\nWe can also create an interactive plot by using ggplotly() of plotly package\n\nlibrary(plotly)\n\n\nAttaching package: 'plotly'\n\n\nThe following object is masked from 'package:ggplot2':\n\n    last_plot\n\n\nThe following object is masked from 'package:stats':\n\n    filter\n\n\nThe following object is masked from 'package:graphics':\n\n    layout\n\np &lt;- ggplot(data = cbg, \n       aes(x = Year, \n           y = gi_star)) +\n  geom_line() +\n  theme_light()\n\nggplotly(p)\n\n\n\n\n\n\n\n\n\ncbg %&gt;%\n  summarise(mk = list(\n    unclass(\n      Kendall::MannKendall(gi_star)\n    )\n  )) %&gt;%\n  tidyr::unnest_wider(mk)\n\n# A tibble: 1 × 5\n    tau      sl     S     D  varS\n  &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 0.485 0.00742    66  136.  589.\n\n\nIn the above result, sl is the p-value. With reference to the results, we will reject the hypothesis null and infer that a slight upward trend.\nMann-Kendall test data.frame We can replicate this for each location by using group_by() of dplyr package.\n\nehsa &lt;- gi_stars %&gt;%\n  group_by(County) %&gt;%\n  summarise(mk = list(\n    unclass(\n      Kendall::MannKendall(gi_star)\n    )\n  )) %&gt;%\n  tidyr::unnest_wider(mk)\n\nhead(ehsa)\n\n# A tibble: 6 × 6\n  County        tau        sl     S     D  varS\n  &lt;chr&gt;       &lt;dbl&gt;     &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 Anhua      0.191  0.303        26  136.  589.\n2 Anren     -0.294  0.108       -40  136.  589.\n3 Anxiang    0      1             0  136.  589.\n4 Baojing   -0.691  0.000128    -94  136.  589.\n5 Chaling   -0.0882 0.650       -12  136.  589.\n6 Changning -0.750  0.0000318  -102  136.  589.\n\n\nMann-Kendall test data.frame We can also sort to show significant emerging hot/cold spots\n\nemerging &lt;- ehsa %&gt;% \n  arrange(sl, abs(tau)) %&gt;% \n  slice(1:10)\nhead(emerging)\n\n# A tibble: 6 × 6\n  County        tau         sl     S     D  varS\n  &lt;chr&gt;       &lt;dbl&gt;      &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 Shuangfeng  0.868 0.00000143   118  136.  589.\n2 Xiangtan    0.868 0.00000143   118  136.  589.\n3 Xiangxiang  0.868 0.00000143   118  136.  589.\n4 Chengbu    -0.824 0.00000482  -112  136.  589.\n5 Dongan     -0.824 0.00000482  -112  136.  589.\n6 Wugang     -0.809 0.00000712  -110  136.  589."
  },
  {
    "objectID": "In-class_EX/In-class_EX06/In-class_EX06.html#performing-emerging-hotspot-analysis",
    "href": "In-class_EX/In-class_EX06/In-class_EX06.html#performing-emerging-hotspot-analysis",
    "title": "In-class Exercise 06",
    "section": "",
    "text": "Lastly, we will perform EHSA analysis by using emerging_hotspot_analysis() of sfdep package. It takes a spacetime object x (i.e. GDPPC_st), and the quoted name of the variable of interest (i.e. GDPPC) for .var argument. The k argument is used to specify the number of time lags which is set to 1 by default. Lastly, nsim map numbers of simulation to be performed.\n\nehsa&lt;-emerging_hotspot_analysis(\n  x=GDPPC_st,\n  .var = \"GDPPC\",\n  K=1,\n  nism=99\n)\n\n\n\nIn the code chunk below, ggplot2 functions is used to reveal the distribution of EHSA classes as a bar chart.\n\nggplot(data = ehsa,\n       aes(x = classification)) +\n  geom_bar()\n\n\n\n\n\n\n\n\nNot all is statistic significant. Need to use the p- value to do it\nFigure above shows that sporadic cold spots class has the high numbers of county.\n\n\n\nIn this section, you will learn how to visualise the geographic distribution EHSA classes. However, before we can do so, we need to join both hunan and ehsa together by using the code chunk below.\n\nhunan_ehsa &lt;- hunan %&gt;%\n  left_join(ehsa, by = join_by(County == location))\n\nNext, tmap functions will be used to plot a categorical choropleth map by using the code chunk below.\n\nehsa_sig &lt;- hunan_ehsa %&gt;%\n  filter(p_value &lt; 0.05)\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(hunan_ehsa) +\n  tm_polygons(alpha = 0.5) +\n  tm_borders(alpha = 0.5) +\ntm_shape(ehsa_sig) +\n  tm_fill(\"classification\") +\n  tm_borders(alpha = 0.4)\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them)."
  },
  {
    "objectID": "In-class_EX/In-class_EX07/In-class_EX07.html",
    "href": "In-class_EX/In-class_EX07/In-class_EX07.html",
    "title": "In-class_EX07",
    "section": "",
    "text": "pacman::p_load(olsrr, ggstatsplot, ggpubr, \n               sf, spdep, GWmodel, tmap,\n               tidyverse, gtsummary, performance,\n               see, sfdep,corrplot)"
  },
  {
    "objectID": "In-class_EX/In-class_EX07/In-class_EX07.html#getting-started",
    "href": "In-class_EX/In-class_EX07/In-class_EX07.html#getting-started",
    "title": "In-class_EX07",
    "section": "",
    "text": "pacman::p_load(olsrr, ggstatsplot, ggpubr, \n               sf, spdep, GWmodel, tmap,\n               tidyverse, gtsummary, performance,\n               see, sfdep,corrplot)"
  },
  {
    "objectID": "In-class_EX/In-class_EX07/In-class_EX07.html#importing-the-data",
    "href": "In-class_EX/In-class_EX07/In-class_EX07.html#importing-the-data",
    "title": "In-class_EX07",
    "section": "Importing the data",
    "text": "Importing the data\n\nURA Master Plan 2014 planning subzone boundary\n\ncondo_resale = read_csv(\"data/aspatial/Condo_resale_2015.csv\")\n\nRows: 1436 Columns: 23\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (23): LATITUDE, LONGITUDE, POSTCODE, SELLING_PRICE, AREA_SQM, AGE, PROX_...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nmpsz = st_read(dsn = \"data/geospatial\", \n                  layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `/Users/yangyayong/Downloads/学校文件/smu文件/Term 3/G/yyyirene/ISSS626-GAA/In-class_EX/In-class_EX07/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\nmpsz &lt;- read_rds(\"data/rds/mpsz.rds\")\n\n\ncondo_resale.sf &lt;- st_as_sf(condo_resale,\n                            coords = c(\"LONGITUDE\", \"LATITUDE\"),\n                            crs=4326) %&gt;%\n  st_transform(crs=3414)\n\n\ncorrplot(cor(condo_resale[, 5:23]), diag = FALSE, order = \"AOE\",\n         tl.pos = \"td\", tl.cex = 0.5, method = \"number\", type = \"upper\")"
  },
  {
    "objectID": "In-class_EX/In-class_EX07/In-class_EX07.html#correlation-analysis---ggstatsplot-methods",
    "href": "In-class_EX/In-class_EX07/In-class_EX07.html#correlation-analysis---ggstatsplot-methods",
    "title": "In-class_EX07",
    "section": "Correlation Analysis - ggstatsplot methods",
    "text": "Correlation Analysis - ggstatsplot methods\n\nggcorrmat(condo_resale[,5:23])"
  },
  {
    "objectID": "In-class_EX/In-class_EX07/In-class_EX07.html#building-a-hedonic-pricing-model-by-using-multiple-linear-regression-method",
    "href": "In-class_EX/In-class_EX07/In-class_EX07.html#building-a-hedonic-pricing-model-by-using-multiple-linear-regression-method",
    "title": "In-class_EX07",
    "section": "Building a Hedonic Pricing Model by using Multiple Linear Regression Method",
    "text": "Building a Hedonic Pricing Model by using Multiple Linear Regression Method\nThe code chunk below using lm() to calibrate the multiple linear regression model.\n\ncondo.mlr &lt;- lm(formula = SELLING_PRICE ~ AREA_SQM + AGE    + \n                  PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE +\n                  PROX_URA_GROWTH_AREA + PROX_HAWKER_MARKET + PROX_KINDERGARTEN + \n                  PROX_MRT  + PROX_PARK + PROX_PRIMARY_SCH + \n                  PROX_TOP_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_SUPERMARKET + \n                  PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n                data=condo_resale.sf)  #using the sf version\nsummary(condo.mlr)\n\n\nCall:\nlm(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + PROX_CHILDCARE + \n    PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + PROX_HAWKER_MARKET + \n    PROX_KINDERGARTEN + PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + \n    PROX_TOP_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_SUPERMARKET + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n    data = condo_resale.sf)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-3475964  -293923   -23069   241043 12260381 \n\nCoefficients:\n                       Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)           481728.40  121441.01   3.967 7.65e-05 ***\nAREA_SQM               12708.32     369.59  34.385  &lt; 2e-16 ***\nAGE                   -24440.82    2763.16  -8.845  &lt; 2e-16 ***\nPROX_CBD              -78669.78    6768.97 -11.622  &lt; 2e-16 ***\nPROX_CHILDCARE       -351617.91  109467.25  -3.212  0.00135 ** \nPROX_ELDERLYCARE      171029.42   42110.51   4.061 5.14e-05 ***\nPROX_URA_GROWTH_AREA   38474.53   12523.57   3.072  0.00217 ** \nPROX_HAWKER_MARKET     23746.10   29299.76   0.810  0.41782    \nPROX_KINDERGARTEN     147468.99   82668.87   1.784  0.07466 .  \nPROX_MRT             -314599.68   57947.44  -5.429 6.66e-08 ***\nPROX_PARK             563280.50   66551.68   8.464  &lt; 2e-16 ***\nPROX_PRIMARY_SCH      180186.08   65237.95   2.762  0.00582 ** \nPROX_TOP_PRIMARY_SCH    2280.04   20410.43   0.112  0.91107    \nPROX_SHOPPING_MALL   -206604.06   42840.60  -4.823 1.57e-06 ***\nPROX_SUPERMARKET      -44991.80   77082.64  -0.584  0.55953    \nPROX_BUS_STOP         683121.35  138353.28   4.938 8.85e-07 ***\nNO_Of_UNITS             -231.18      89.03  -2.597  0.00951 ** \nFAMILY_FRIENDLY       140340.77   47020.55   2.985  0.00289 ** \nFREEHOLD              359913.01   49220.22   7.312 4.38e-13 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 755800 on 1417 degrees of freedom\nMultiple R-squared:  0.6518,    Adjusted R-squared:  0.6474 \nF-statistic: 147.4 on 18 and 1417 DF,  p-value: &lt; 2.2e-16\n\n\n\ncondo.mlr1 &lt;- lm(formula = SELLING_PRICE ~ AREA_SQM + AGE + \n                   PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE +\n                   PROX_URA_GROWTH_AREA + PROX_MRT  + PROX_PARK + \n                   PROX_PRIMARY_SCH + PROX_SHOPPING_MALL    + PROX_BUS_STOP + \n                   NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD,\n                 data=condo_resale.sf)\nols_regress(condo.mlr1)\n\n                                Model Summary                                 \n-----------------------------------------------------------------------------\nR                            0.807       RMSE                     751998.679 \nR-Squared                    0.651       MSE                571471422208.592 \nAdj. R-Squared               0.647       Coef. Var                    43.168 \nPred R-Squared               0.638       AIC                       42966.758 \nMAE                     414819.628       SBC                       43051.072 \n-----------------------------------------------------------------------------\n RMSE: Root Mean Square Error \n MSE: Mean Square Error \n MAE: Mean Absolute Error \n AIC: Akaike Information Criteria \n SBC: Schwarz Bayesian Criteria \n\n                                     ANOVA                                       \n--------------------------------------------------------------------------------\n                    Sum of                                                      \n                   Squares          DF         Mean Square       F         Sig. \n--------------------------------------------------------------------------------\nRegression    1.512586e+15          14        1.080418e+14    189.059    0.0000 \nResidual      8.120609e+14        1421    571471422208.592                      \nTotal         2.324647e+15        1435                                          \n--------------------------------------------------------------------------------\n\n                                               Parameter Estimates                                                \n-----------------------------------------------------------------------------------------------------------------\n               model           Beta    Std. Error    Std. Beta       t        Sig           lower          upper \n-----------------------------------------------------------------------------------------------------------------\n         (Intercept)     527633.222    108183.223                   4.877    0.000     315417.244     739849.200 \n            AREA_SQM      12777.523       367.479        0.584     34.771    0.000      12056.663      13498.382 \n                 AGE     -24687.739      2754.845       -0.167     -8.962    0.000     -30091.739     -19283.740 \n            PROX_CBD     -77131.323      5763.125       -0.263    -13.384    0.000     -88436.469     -65826.176 \n      PROX_CHILDCARE    -318472.751    107959.512       -0.084     -2.950    0.003    -530249.889    -106695.613 \n    PROX_ELDERLYCARE     185575.623     39901.864        0.090      4.651    0.000     107302.737     263848.510 \nPROX_URA_GROWTH_AREA      39163.254     11754.829        0.060      3.332    0.001      16104.571      62221.936 \n            PROX_MRT    -294745.107     56916.367       -0.112     -5.179    0.000    -406394.234    -183095.980 \n           PROX_PARK     570504.807     65507.029        0.150      8.709    0.000     442003.938     699005.677 \n    PROX_PRIMARY_SCH     159856.136     60234.599        0.062      2.654    0.008      41697.849     278014.424 \n  PROX_SHOPPING_MALL    -220947.251     36561.832       -0.115     -6.043    0.000    -292668.213    -149226.288 \n       PROX_BUS_STOP     682482.221    134513.243        0.134      5.074    0.000     418616.359     946348.082 \n         NO_Of_UNITS       -245.480        87.947       -0.053     -2.791    0.005       -418.000        -72.961 \n     FAMILY_FRIENDLY     146307.576     46893.021        0.057      3.120    0.002      54320.593     238294.560 \n            FREEHOLD     350599.812     48506.485        0.136      7.228    0.000     255447.802     445751.821 \n-----------------------------------------------------------------------------------------------------------------"
  },
  {
    "objectID": "In-class_EX/In-class_EX07/In-class_EX07.html#model-assessment-olsrr-method",
    "href": "In-class_EX/In-class_EX07/In-class_EX07.html#model-assessment-olsrr-method",
    "title": "In-class_EX07",
    "section": "Model Assessment: olsrr method",
    "text": "Model Assessment: olsrr method\nIn this section, we would like to introduce you a fantastic R package specially programmed for performing OLS regression. It is called olsrr. It provides a collection of very useful methods for building better multiple linear regression models:\n\ncomprehensive regression output\nresidual diagnostics\nmeasures of influence\nheteroskedasticity tests\nmodel fit assessment\nvariable contribution assessment\nvariable selection procedures\n\n\nGenerating tidy linear regression report\n\nols_regress(condo.mlr)\n\n                                Model Summary                                 \n-----------------------------------------------------------------------------\nR                            0.807       RMSE                     750799.558 \nR-Squared                    0.652       MSE                571258408962.150 \nAdj. R-Squared               0.647       Coef. Var                    43.160 \nPred R-Squared               0.637       AIC                       42970.175 \nMAE                     413425.809       SBC                       43075.567 \n-----------------------------------------------------------------------------\n RMSE: Root Mean Square Error \n MSE: Mean Square Error \n MAE: Mean Absolute Error \n AIC: Akaike Information Criteria \n SBC: Schwarz Bayesian Criteria \n\n                                     ANOVA                                       \n--------------------------------------------------------------------------------\n                    Sum of                                                      \n                   Squares          DF         Mean Square       F         Sig. \n--------------------------------------------------------------------------------\nRegression    1.515174e+15          18        8.417631e+13    147.352    0.0000 \nResidual      8.094732e+14        1417    571258408962.150                      \nTotal         2.324647e+15        1435                                          \n--------------------------------------------------------------------------------\n\n                                               Parameter Estimates                                                \n-----------------------------------------------------------------------------------------------------------------\n               model           Beta    Std. Error    Std. Beta       t        Sig           lower          upper \n-----------------------------------------------------------------------------------------------------------------\n         (Intercept)     481728.405    121441.014                   3.967    0.000     243504.909     719951.900 \n            AREA_SQM      12708.324       369.590        0.580     34.385    0.000      11983.322      13433.326 \n                 AGE     -24440.816      2763.164       -0.165     -8.845    0.000     -29861.148     -19020.484 \n            PROX_CBD     -78669.779      6768.972       -0.268    -11.622    0.000     -91948.061     -65391.496 \n      PROX_CHILDCARE    -351617.910    109467.252       -0.092     -3.212    0.001    -566353.201    -136882.619 \n    PROX_ELDERLYCARE     171029.418     42110.506        0.083      4.061    0.000      88423.783     253635.053 \nPROX_URA_GROWTH_AREA      38474.534     12523.567        0.059      3.072    0.002      13907.809      63041.258 \n  PROX_HAWKER_MARKET      23746.098     29299.755        0.019      0.810    0.418     -33729.461      81221.657 \n   PROX_KINDERGARTEN     147468.986     82668.868        0.031      1.784    0.075     -14697.534     309635.506 \n            PROX_MRT    -314599.679     57947.441       -0.120     -5.429    0.000    -428271.672    -200927.687 \n           PROX_PARK     563280.499     66551.675        0.148      8.464    0.000     432730.102     693830.897 \n    PROX_PRIMARY_SCH     180186.083     65237.948        0.070      2.762    0.006      52212.744     308159.421 \nPROX_TOP_PRIMARY_SCH       2280.036     20410.435        0.002      0.112    0.911     -37757.880      42317.951 \n  PROX_SHOPPING_MALL    -206604.057     42840.595       -0.108     -4.823    0.000    -290641.863    -122566.252 \n    PROX_SUPERMARKET     -44991.803     77082.635       -0.012     -0.584    0.560    -196200.149     106216.542 \n       PROX_BUS_STOP     683121.347    138353.278        0.134      4.938    0.000     411722.087     954520.608 \n         NO_Of_UNITS       -231.180        89.033       -0.050     -2.597    0.010       -405.830        -56.530 \n     FAMILY_FRIENDLY     140340.770     47020.551        0.055      2.985    0.003      48103.399     232578.141 \n            FREEHOLD     359913.008     49220.224        0.140      7.312    0.000     263360.671     456465.345 \n-----------------------------------------------------------------------------------------------------------------\n\n\n\nols_vif_tol(condo.mlr) \n\n              Variables Tolerance      VIF\n1              AREA_SQM 0.8625928 1.159296\n2                   AGE 0.7026139 1.423257\n3              PROX_CBD 0.4605774 2.171188\n4        PROX_CHILDCARE 0.2981029 3.354546\n5      PROX_ELDERLYCARE 0.5922259 1.688545\n6  PROX_URA_GROWTH_AREA 0.6614127 1.511915\n7    PROX_HAWKER_MARKET 0.4373889 2.286295\n8     PROX_KINDERGARTEN 0.8370845 1.194622\n9              PROX_MRT 0.5049530 1.980382\n10            PROX_PARK 0.8018396 1.247132\n11     PROX_PRIMARY_SCH 0.3855782 2.593508\n12 PROX_TOP_PRIMARY_SCH 0.4968645 2.012621\n13   PROX_SHOPPING_MALL 0.4906426 2.038144\n14     PROX_SUPERMARKET 0.6152063 1.625471\n15        PROX_BUS_STOP 0.3320516 3.011580\n16          NO_Of_UNITS 0.6731165 1.485627\n17      FAMILY_FRIENDLY 0.7202230 1.388459\n18             FREEHOLD 0.6729095 1.486084\n\n\n\ncondo_fw_mlr &lt;- ols_step_forward_p(\n  condo.mlr,\n  p_val = 0.05,\n  details = FALSE\n)\n\n\nplot(condo_fw_mlr)\n\n\n\n\n\n\n\n\nVisualising model parameters\n\nggcoefstats(condo.mlr,\n            sort = \"ascending\")\n\nNumber of labels is greater than default palette color count.\n• Select another color `palette` (and/or `package`).\n\n\n\n\n\n\n\n\n\n\n\nTest for Non-Linearity\nIn multiple linear regression, it is important for us to test the assumption that linearity and additivity of the relationship between dependent and independent variables.\nIn the code chunk below, the ols_plot_resid_fit() of olsrr package is used to perform linearity assumption test.\n\nols_plot_resid_fit(condo_fw_mlr$model)\n\n\n\n\n\n\n\n\nThe figure above reveals that most of the data poitns are scattered around the 0 line, hence we can safely conclude that the relationships between the dependent variable and independent variables are linear.\n\n\nTest for Normality Assumption\nLastly, the code chunk below uses ols_plot_resid_hist() of olsrr package to perform normality assumption test.\n\nols_plot_resid_hist(condo_fw_mlr$model)\n\n\n\n\n\n\n\n\nThe figure reveals that the residual of the multiple linear regression model (i.e. condo.mlr1) is resemble normal distribution.\nIf you prefer formal statistical test methods, the ols_test_normality() of olsrr package can be used as shown in the code chun below.\n\nols_test_normality(condo_fw_mlr$model)\n\nWarning in ks.test.default(y, \"pnorm\", mean(y), sd(y)): ties should not be\npresent for the one-sample Kolmogorov-Smirnov test\n\n\n-----------------------------------------------\n       Test             Statistic       pvalue  \n-----------------------------------------------\nShapiro-Wilk              0.6856         0.0000 \nKolmogorov-Smirnov        0.1366         0.0000 \nCramer-von Mises         121.0768        0.0000 \nAnderson-Darling         67.9551         0.0000 \n-----------------------------------------------\n\n\nThe summary table above reveals that the p-values of the four tests are way smaller than the alpha value of 0.05. Hence we will reject the null hypothesis and infer that there is statistical evidence that the residual are not normally distributed."
  },
  {
    "objectID": "In-class_EX/In-class_EX07/In-class_EX07.html#testing-for-spatial-autocorrelation",
    "href": "In-class_EX/In-class_EX07/In-class_EX07.html#testing-for-spatial-autocorrelation",
    "title": "In-class_EX07",
    "section": "Testing for Spatial Autocorrelation",
    "text": "Testing for Spatial Autocorrelation\nThe hedonic model we try to build are using geographically referenced attributes, hence it is also important for us to visual the residual of the hedonic pricing model.\nFirst, we will export the residual of the hedonic pricing model and save it as a data frame.\n\nmlr_output &lt;- as.data.frame(condo_fw_mlr$model$residuals) %&gt;%\n  rename(`FW_MLR_RES` = `condo_fw_mlr$model$residuals`)\n\nNext, we will join the newly created data frame with condo_resale.sf object.\n\ncondo_resale.sf &lt;- cbind(condo_resale.sf, \n                        mlr_output$FW_MLR_RES) %&gt;%\n  rename(`MLR_RES` = `mlr_output.FW_MLR_RES`)\n\nNext, we will use tmap package to display the distribution of the residuals on an interactive map.\nThe code churn below will turn on the interactive mode of tmap.\n\ntmap_mode(\"view\")\n\ntmap mode set to interactive viewing\n\ntm_shape(mpsz)+\n  tmap_options(check.and.fix = TRUE) +\n  tm_polygons(alpha = 0.4) +\ntm_shape(condo_resale.sf) +  \n  tm_dots(col = \"MLR_RES\",\n          alpha = 0.6,\n          style=\"quantile\")\n\nWarning: The shape mpsz is invalid (after reprojection). See sf::st_is_valid\n\n\nVariable(s) \"MLR_RES\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\nThe figure shows the visualization of spatial data, where the colors represent different MLR_RES (multiple linear regression residual values), which are used to analyze the existence of spatial autocorrelation. Spatial autocorrelation refers to the similarity or correlation between adjacent areas in geographic space, that is, “near things are more similar than distant things.”\nIn this figure, you can judge the existence of spatial autocorrelation by the following aspects:\nColor aggregation phenomenon:\nThe figure shows that different areas use different colors to represent residual values, and the colors change from yellow (negative residual values) to green (positive residual values). If close areas in space show similar colors (i.e. similar residual values), then this indicates the existence of positive spatial autocorrelation. For example, the yellow points in some areas of the figure are concentrated together, and the green points are also concentrated in some areas, indicating that the adjacent areas have certain similarities in residual values. Geographical concentration:\nIf some colors are obviously concentrated in a specific geographic area and are not randomly distributed, this concentrated distribution suggests the existence of autocorrelation. For example, the multiple green points in the figure are concentrated in the central and eastern areas of the map, indicating that the property prices in these areas have similar trends or patterns. Statistical analysis of spatial autocorrelation:\nUsually, to rigorously determine spatial autocorrelation, researchers use statistical methods (such as Morans’ I) to quantify the strength of autocorrelation. This method can calculate the significance of spatial autocorrelation by the spatial distribution of residuals, but the figure has been initially visualized to show this possible trend. Therefore, spatial autocorrelation can be identified by the spatial distribution pattern of these colors, and the clustering of different color areas in the figure is a potential sign of spatial autocorrelation.\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\n\nThe figure above reveal that there is sign of spatial autocorrelation.\n\nSpatial stationary test\nTo proof that our observation is indeed true, the Moran’s I test will be performed\nHo: The residuals are randomly distributed (also known as spatial stationary) H1: The residuals are spatially non-stationary\nFirst, we will compute the distance-based weight matrix by using dnearneigh() function of spdep.\n\ncondo_resale.sf &lt;- condo_resale.sf %&gt;%\n  mutate(nb = st_knn(geometry, k=6,\n                     longlat = FALSE),\n         wt = st_weights(nb,\n                         style = \"W\"),\n         .before = 1)\n\nNext, global_moran_perm() of sfdep is used to perform global Moran permutation test.\n\nglobal_moran_perm(condo_resale.sf$MLR_RES, \n                  condo_resale.sf$nb, \n                  condo_resale.sf$wt, \n                  alternative = \"two.sided\", \n                  nsim = 99)\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 100 \n\nstatistic = 0.32254, observed rank = 100, p-value &lt; 2.2e-16\nalternative hypothesis: two.sided\n\n\nSince the Observed Global Moran I = 0.25586 which is greater than 0, we can infer than the residuals resemble cluster distribution."
  },
  {
    "objectID": "In-class_EX/In-class_EX07/In-class_EX07.html#building-hedonic-pricing-models-using-gwmodel",
    "href": "In-class_EX/In-class_EX07/In-class_EX07.html#building-hedonic-pricing-models-using-gwmodel",
    "title": "In-class_EX07",
    "section": "Building Hedonic Pricing Models using GWmodel",
    "text": "Building Hedonic Pricing Models using GWmodel\nIn this section, you are going to learn how to modelling hedonic pricing by using geographically weighted regression model. Two spatial weights will be used, they are: fixed and adaptive bandwidth schemes.\n\nBuilding Fixed Bandwidth GWR Model\n\nComputing fixed bandwith\nIn the code chunk below bw.gwr() of GWModel package is used to determine the optimal fixed bandwidth to use in the model. Notice that the argument adaptive is set to FALSE indicates that we are interested to compute the fixed bandwidth.\nThere are two possible approaches can be uused to determine the stopping rule, they are: CV cross-validation approach and AIC corrected (AICc) approach. We define the stopping rule using approach agreement.\n\nbw_fixed &lt;- bw.gwr(formula = SELLING_PRICE ~ AREA_SQM + AGE + \n                     PROX_CBD + PROX_CHILDCARE + \n                     PROX_ELDERLYCARE   + PROX_URA_GROWTH_AREA + \n                     PROX_MRT   + PROX_PARK + PROX_PRIMARY_SCH + \n                     PROX_SHOPPING_MALL + PROX_BUS_STOP + \n                     NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n                   data=condo_resale.sf, \n                   approach=\"CV\", \n                   kernel=\"gaussian\", \n                   adaptive=FALSE, \n                   longlat=FALSE)\n\nFixed bandwidth: 17660.96 CV score: 8.259118e+14 \nFixed bandwidth: 10917.26 CV score: 7.970454e+14 \nFixed bandwidth: 6749.419 CV score: 7.273273e+14 \nFixed bandwidth: 4173.553 CV score: 6.300006e+14 \nFixed bandwidth: 2581.58 CV score: 5.404958e+14 \nFixed bandwidth: 1597.687 CV score: 4.857515e+14 \nFixed bandwidth: 989.6077 CV score: 4.722431e+14 \nFixed bandwidth: 613.7939 CV score: 1.379526e+16 \nFixed bandwidth: 1221.873 CV score: 4.778717e+14 \nFixed bandwidth: 846.0596 CV score: 4.791629e+14 \nFixed bandwidth: 1078.325 CV score: 4.751406e+14 \nFixed bandwidth: 934.7772 CV score: 4.72518e+14 \nFixed bandwidth: 1023.495 CV score: 4.730305e+14 \nFixed bandwidth: 968.6643 CV score: 4.721317e+14 \nFixed bandwidth: 955.7206 CV score: 4.722072e+14 \nFixed bandwidth: 976.6639 CV score: 4.721387e+14 \nFixed bandwidth: 963.7202 CV score: 4.721484e+14 \nFixed bandwidth: 971.7199 CV score: 4.721293e+14 \nFixed bandwidth: 973.6083 CV score: 4.721309e+14 \nFixed bandwidth: 970.5527 CV score: 4.721295e+14 \nFixed bandwidth: 972.4412 CV score: 4.721296e+14 \nFixed bandwidth: 971.2741 CV score: 4.721292e+14 \nFixed bandwidth: 970.9985 CV score: 4.721293e+14 \nFixed bandwidth: 971.4443 CV score: 4.721292e+14 \nFixed bandwidth: 971.5496 CV score: 4.721293e+14 \nFixed bandwidth: 971.3793 CV score: 4.721292e+14 \nFixed bandwidth: 971.3391 CV score: 4.721292e+14 \nFixed bandwidth: 971.3143 CV score: 4.721292e+14 \nFixed bandwidth: 971.3545 CV score: 4.721292e+14 \nFixed bandwidth: 971.3296 CV score: 4.721292e+14 \nFixed bandwidth: 971.345 CV score: 4.721292e+14 \nFixed bandwidth: 971.3355 CV score: 4.721292e+14 \nFixed bandwidth: 971.3413 CV score: 4.721292e+14 \nFixed bandwidth: 971.3377 CV score: 4.721292e+14 \nFixed bandwidth: 971.34 CV score: 4.721292e+14 \nFixed bandwidth: 971.3405 CV score: 4.721292e+14 \nFixed bandwidth: 971.3396 CV score: 4.721292e+14 \nFixed bandwidth: 971.3402 CV score: 4.721292e+14 \nFixed bandwidth: 971.3398 CV score: 4.721292e+14 \nFixed bandwidth: 971.34 CV score: 4.721292e+14 \nFixed bandwidth: 971.3399 CV score: 4.721292e+14 \nFixed bandwidth: 971.34 CV score: 4.721292e+14 \n\n\nThe result shows that the recommended bandwidth is 971.3405 metres.\nSpatial analysis context: When analyzing spatial data, distances between points or areas are usually expressed in meters or kilometers. Therefore, any smoothing or kernel density calculations will use bandwidth values ​​corresponding to these units. Geographic projections: If the spatial data is projected into a coordinate system such as UTM (Universal Transverse Mercator), which uses meters as a unit of measurement, then the bandwidth, as a distance value, is naturally expressed in meters.\n\n\nGWModel method - fixed bandwith\nNow we can use the code chunk below to calibrate the gwr model using fixed bandwidth and gaussian kernel.\n\ngwr_fixed &lt;- gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + \n                         AGE    + PROX_CBD + PROX_CHILDCARE + \n                         PROX_ELDERLYCARE   +PROX_URA_GROWTH_AREA + \n                         PROX_MRT   + PROX_PARK + PROX_PRIMARY_SCH +\n                         PROX_SHOPPING_MALL + PROX_BUS_STOP + \n                         NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n                       data=condo_resale.sf, \n                       bw=bw_fixed, \n                       kernel = 'gaussian', \n                       longlat = FALSE)\n\n\ngwr_fixed\n\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n   Program starts at: 2024-11-13 11:32:10.774163 \n   Call:\n   gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n    PROX_CHILDCARE + PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + \n    PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n    data = condo_resale.sf, bw = bw_fixed, kernel = \"gaussian\", \n    longlat = FALSE)\n\n   Dependent (y) variable:  SELLING_PRICE\n   Independent variables:  AREA_SQM AGE PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE PROX_URA_GROWTH_AREA PROX_MRT PROX_PARK PROX_PRIMARY_SCH PROX_SHOPPING_MALL PROX_BUS_STOP NO_Of_UNITS FAMILY_FRIENDLY FREEHOLD\n   Number of data points: 1436\n   ***********************************************************************\n   *                    Results of Global Regression                     *\n   ***********************************************************************\n\n   Call:\n    lm(formula = formula, data = data)\n\n   Residuals:\n     Min       1Q   Median       3Q      Max \n-3470778  -298119   -23481   248917 12234210 \n\n   Coefficients:\n                          Estimate Std. Error t value Pr(&gt;|t|)    \n   (Intercept)           527633.22  108183.22   4.877 1.20e-06 ***\n   AREA_SQM               12777.52     367.48  34.771  &lt; 2e-16 ***\n   AGE                   -24687.74    2754.84  -8.962  &lt; 2e-16 ***\n   PROX_CBD              -77131.32    5763.12 -13.384  &lt; 2e-16 ***\n   PROX_CHILDCARE       -318472.75  107959.51  -2.950 0.003231 ** \n   PROX_ELDERLYCARE      185575.62   39901.86   4.651 3.61e-06 ***\n   PROX_URA_GROWTH_AREA   39163.25   11754.83   3.332 0.000885 ***\n   PROX_MRT             -294745.11   56916.37  -5.179 2.56e-07 ***\n   PROX_PARK             570504.81   65507.03   8.709  &lt; 2e-16 ***\n   PROX_PRIMARY_SCH      159856.14   60234.60   2.654 0.008046 ** \n   PROX_SHOPPING_MALL   -220947.25   36561.83  -6.043 1.93e-09 ***\n   PROX_BUS_STOP         682482.22  134513.24   5.074 4.42e-07 ***\n   NO_Of_UNITS             -245.48      87.95  -2.791 0.005321 ** \n   FAMILY_FRIENDLY       146307.58   46893.02   3.120 0.001845 ** \n   FREEHOLD              350599.81   48506.48   7.228 7.98e-13 ***\n\n   ---Significance stars\n   Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 \n   Residual standard error: 756000 on 1421 degrees of freedom\n   Multiple R-squared: 0.6507\n   Adjusted R-squared: 0.6472 \n   F-statistic: 189.1 on 14 and 1421 DF,  p-value: &lt; 2.2e-16 \n   ***Extra Diagnostic information\n   Residual sum of squares: 8.120609e+14\n   Sigma(hat): 752522.9\n   AIC:  42966.76\n   AICc:  42967.14\n   BIC:  41731.39\n   ***********************************************************************\n   *          Results of Geographically Weighted Regression              *\n   ***********************************************************************\n\n   *********************Model calibration information*********************\n   Kernel function: gaussian \n   Fixed bandwidth: 971.34 \n   Regression points: the same locations as observations are used.\n   Distance metric: Euclidean distance metric is used.\n\n   ****************Summary of GWR coefficient estimates:******************\n                               Min.     1st Qu.      Median     3rd Qu.\n   Intercept            -3.5988e+07 -5.1998e+05  7.6780e+05  1.7412e+06\n   AREA_SQM              1.0003e+03  5.2758e+03  7.4740e+03  1.2301e+04\n   AGE                  -1.3475e+05 -2.0813e+04 -8.6260e+03 -3.7784e+03\n   PROX_CBD             -7.7047e+07 -2.3608e+05 -8.3599e+04  3.4646e+04\n   PROX_CHILDCARE       -6.0097e+06 -3.3667e+05 -9.7426e+04  2.9007e+05\n   PROX_ELDERLYCARE     -3.5001e+06 -1.5970e+05  3.1970e+04  1.9577e+05\n   PROX_URA_GROWTH_AREA -3.0170e+06 -8.2013e+04  7.0749e+04  2.2612e+05\n   PROX_MRT             -3.5282e+06 -6.5836e+05 -1.8833e+05  3.6922e+04\n   PROX_PARK            -1.2062e+06 -2.1732e+05  3.5383e+04  4.1335e+05\n   PROX_PRIMARY_SCH     -2.2695e+07 -1.7066e+05  4.8472e+04  5.1555e+05\n   PROX_SHOPPING_MALL   -7.2585e+06 -1.6684e+05 -1.0517e+04  1.5923e+05\n   PROX_BUS_STOP        -1.4676e+06 -4.5207e+04  3.7601e+05  1.1664e+06\n   NO_Of_UNITS          -1.3170e+03 -2.4822e+02 -3.0846e+01  2.5496e+02\n   FAMILY_FRIENDLY      -2.2749e+06 -1.1140e+05  7.6214e+03  1.6107e+05\n   FREEHOLD             -9.2067e+06  3.8074e+04  1.5169e+05  3.7528e+05\n                             Max.\n   Intercept            112794435\n   AREA_SQM                 21575\n   AGE                     434203\n   PROX_CBD               2704604\n   PROX_CHILDCARE         1654086\n   PROX_ELDERLYCARE      38867861\n   PROX_URA_GROWTH_AREA  78515805\n   PROX_MRT               3124325\n   PROX_PARK             18122439\n   PROX_PRIMARY_SCH       4637517\n   PROX_SHOPPING_MALL     1529953\n   PROX_BUS_STOP         11342209\n   NO_Of_UNITS              12907\n   FAMILY_FRIENDLY        1720745\n   FREEHOLD               6073642\n   ************************Diagnostic information*************************\n   Number of data points: 1436 \n   Effective number of parameters (2trace(S) - trace(S'S)): 438.3807 \n   Effective degrees of freedom (n-2trace(S) + trace(S'S)): 997.6193 \n   AICc (GWR book, Fotheringham, et al. 2002, p. 61, eq 2.33): 42263.61 \n   AIC (GWR book, Fotheringham, et al. 2002,GWR p. 96, eq. 4.22): 41632.36 \n   BIC (GWR book, Fotheringham, et al. 2002,GWR p. 61, eq. 2.34): 42515.71 \n   Residual sum of squares: 2.534069e+14 \n   R-square value:  0.8909912 \n   Adjusted R-square value:  0.8430418 \n\n   ***********************************************************************\n   Program stops at: 2024-11-13 11:32:11.260107 \n\n\n\n\n\nBuilding Adaptive Bandwidth GWR Model\nIn this section, we will calibrate the gwr-based hedonic pricing model by using adaptive bandwidth approach.\n\nComputing the adaptive bandwidth\nSimilar to the earlier section, we will first use bw.gwr() to determine the recommended data point to use.\nThe code chunk used look very similar to the one used to compute the fixed bandwidth except the adaptive argument has changed to TRUE.\n\nbw_adaptive &lt;- bw.gwr(formula = SELLING_PRICE ~ AREA_SQM + AGE  + \n                        PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE    + \n                        PROX_URA_GROWTH_AREA + PROX_MRT + PROX_PARK + \n                        PROX_PRIMARY_SCH + PROX_SHOPPING_MALL   + PROX_BUS_STOP + \n                        NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n                      data=condo_resale.sf, \n                      approach=\"CV\", \n                      kernel=\"gaussian\", \n                      adaptive=TRUE, \n                      longlat=FALSE)\n\nAdaptive bandwidth: 895 CV score: 7.952401e+14 \nAdaptive bandwidth: 561 CV score: 7.667364e+14 \nAdaptive bandwidth: 354 CV score: 6.953454e+14 \nAdaptive bandwidth: 226 CV score: 6.15223e+14 \nAdaptive bandwidth: 147 CV score: 5.674373e+14 \nAdaptive bandwidth: 98 CV score: 5.426745e+14 \nAdaptive bandwidth: 68 CV score: 5.168117e+14 \nAdaptive bandwidth: 49 CV score: 4.859631e+14 \nAdaptive bandwidth: 37 CV score: 4.646518e+14 \nAdaptive bandwidth: 30 CV score: 4.422088e+14 \nAdaptive bandwidth: 25 CV score: 4.430816e+14 \nAdaptive bandwidth: 32 CV score: 4.505602e+14 \nAdaptive bandwidth: 27 CV score: 4.462172e+14 \nAdaptive bandwidth: 30 CV score: 4.422088e+14 \n\n\nThe result shows that the 30 is the recommended data points to be used.\n\n\nConstructing the adaptive bandwidth gwr model\nNow, we can go ahead to calibrate the gwr-based hedonic pricing model by using adaptive bandwidth and gaussian kernel as shown in the code chunk below.\n\ngwr_adaptive &lt;- gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + \n                            PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE + \n                            PROX_URA_GROWTH_AREA + PROX_MRT + PROX_PARK + \n                            PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_BUS_STOP + \n                            NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n                          data=condo_resale.sf, \n                          bw=bw_adaptive, \n                          kernel = 'gaussian', \n                          adaptive=TRUE, \n                          longlat = FALSE)\n\n\ngwr_adaptive\n\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n   Program starts at: 2024-11-13 11:32:15.396038 \n   Call:\n   gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n    PROX_CHILDCARE + PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + \n    PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n    data = condo_resale.sf, bw = bw_adaptive, kernel = \"gaussian\", \n    adaptive = TRUE, longlat = FALSE)\n\n   Dependent (y) variable:  SELLING_PRICE\n   Independent variables:  AREA_SQM AGE PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE PROX_URA_GROWTH_AREA PROX_MRT PROX_PARK PROX_PRIMARY_SCH PROX_SHOPPING_MALL PROX_BUS_STOP NO_Of_UNITS FAMILY_FRIENDLY FREEHOLD\n   Number of data points: 1436\n   ***********************************************************************\n   *                    Results of Global Regression                     *\n   ***********************************************************************\n\n   Call:\n    lm(formula = formula, data = data)\n\n   Residuals:\n     Min       1Q   Median       3Q      Max \n-3470778  -298119   -23481   248917 12234210 \n\n   Coefficients:\n                          Estimate Std. Error t value Pr(&gt;|t|)    \n   (Intercept)           527633.22  108183.22   4.877 1.20e-06 ***\n   AREA_SQM               12777.52     367.48  34.771  &lt; 2e-16 ***\n   AGE                   -24687.74    2754.84  -8.962  &lt; 2e-16 ***\n   PROX_CBD              -77131.32    5763.12 -13.384  &lt; 2e-16 ***\n   PROX_CHILDCARE       -318472.75  107959.51  -2.950 0.003231 ** \n   PROX_ELDERLYCARE      185575.62   39901.86   4.651 3.61e-06 ***\n   PROX_URA_GROWTH_AREA   39163.25   11754.83   3.332 0.000885 ***\n   PROX_MRT             -294745.11   56916.37  -5.179 2.56e-07 ***\n   PROX_PARK             570504.81   65507.03   8.709  &lt; 2e-16 ***\n   PROX_PRIMARY_SCH      159856.14   60234.60   2.654 0.008046 ** \n   PROX_SHOPPING_MALL   -220947.25   36561.83  -6.043 1.93e-09 ***\n   PROX_BUS_STOP         682482.22  134513.24   5.074 4.42e-07 ***\n   NO_Of_UNITS             -245.48      87.95  -2.791 0.005321 ** \n   FAMILY_FRIENDLY       146307.58   46893.02   3.120 0.001845 ** \n   FREEHOLD              350599.81   48506.48   7.228 7.98e-13 ***\n\n   ---Significance stars\n   Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 \n   Residual standard error: 756000 on 1421 degrees of freedom\n   Multiple R-squared: 0.6507\n   Adjusted R-squared: 0.6472 \n   F-statistic: 189.1 on 14 and 1421 DF,  p-value: &lt; 2.2e-16 \n   ***Extra Diagnostic information\n   Residual sum of squares: 8.120609e+14\n   Sigma(hat): 752522.9\n   AIC:  42966.76\n   AICc:  42967.14\n   BIC:  41731.39\n   ***********************************************************************\n   *          Results of Geographically Weighted Regression              *\n   ***********************************************************************\n\n   *********************Model calibration information*********************\n   Kernel function: gaussian \n   Adaptive bandwidth: 30 (number of nearest neighbours)\n   Regression points: the same locations as observations are used.\n   Distance metric: Euclidean distance metric is used.\n\n   ****************Summary of GWR coefficient estimates:******************\n                               Min.     1st Qu.      Median     3rd Qu.\n   Intercept            -1.3487e+08 -2.4669e+05  7.7928e+05  1.6194e+06\n   AREA_SQM              3.3188e+03  5.6285e+03  7.7825e+03  1.2738e+04\n   AGE                  -9.6746e+04 -2.9288e+04 -1.4043e+04 -5.6119e+03\n   PROX_CBD             -2.5330e+06 -1.6256e+05 -7.7242e+04  2.6624e+03\n   PROX_CHILDCARE       -1.2790e+06 -2.0175e+05  8.7158e+03  3.7778e+05\n   PROX_ELDERLYCARE     -1.6212e+06 -9.2050e+04  6.1029e+04  2.8184e+05\n   PROX_URA_GROWTH_AREA -7.2686e+06 -3.0350e+04  4.5869e+04  2.4613e+05\n   PROX_MRT             -4.3781e+07 -6.7282e+05 -2.2115e+05 -7.4593e+04\n   PROX_PARK            -2.9020e+06 -1.6782e+05  1.1601e+05  4.6572e+05\n   PROX_PRIMARY_SCH     -8.6418e+05 -1.6627e+05 -7.7853e+03  4.3222e+05\n   PROX_SHOPPING_MALL   -1.8272e+06 -1.3175e+05 -1.4049e+04  1.3799e+05\n   PROX_BUS_STOP        -2.0579e+06 -7.1461e+04  4.1104e+05  1.2071e+06\n   NO_Of_UNITS          -2.1993e+03 -2.3685e+02 -3.4699e+01  1.1657e+02\n   FAMILY_FRIENDLY      -5.9879e+05 -5.0927e+04  2.6173e+04  2.2481e+05\n   FREEHOLD             -1.6340e+05  4.0765e+04  1.9023e+05  3.7960e+05\n                            Max.\n   Intercept            18758355\n   AREA_SQM                23064\n   AGE                     13303\n   PROX_CBD             11346650\n   PROX_CHILDCARE        2892127\n   PROX_ELDERLYCARE      2465671\n   PROX_URA_GROWTH_AREA  7384059\n   PROX_MRT              1186242\n   PROX_PARK             2588497\n   PROX_PRIMARY_SCH      3381462\n   PROX_SHOPPING_MALL   38038564\n   PROX_BUS_STOP        12081592\n   NO_Of_UNITS              1010\n   FAMILY_FRIENDLY       2072414\n   FREEHOLD              1813995\n   ************************Diagnostic information*************************\n   Number of data points: 1436 \n   Effective number of parameters (2trace(S) - trace(S'S)): 350.3088 \n   Effective degrees of freedom (n-2trace(S) + trace(S'S)): 1085.691 \n   AICc (GWR book, Fotheringham, et al. 2002, p. 61, eq 2.33): 41982.22 \n   AIC (GWR book, Fotheringham, et al. 2002,GWR p. 96, eq. 4.22): 41546.74 \n   BIC (GWR book, Fotheringham, et al. 2002,GWR p. 61, eq. 2.34): 41914.08 \n   Residual sum of squares: 2.528227e+14 \n   R-square value:  0.8912425 \n   Adjusted R-square value:  0.8561185 \n\n   ***********************************************************************\n   Program stops at: 2024-11-13 11:32:15.978511 \n\n\nThe report shows that the AICc the adaptive distance gwr is 41982.22 which is even smaller than the AICc of the fixed distance gwr of 42263.61.\n\n\n\nVisualising GWR Output\nIn addition to regression residuals, the output feature class table includes fields for observed and predicted y values, condition number (cond), Local R2, residuals, and explanatory variable coefficients and standard errors:\n\nCondition Number: this diagnostic evaluates local collinearity. In the presence of strong local collinearity, results become unstable. Results associated with condition numbers larger than 30, may be unreliable.\nLocal R2: these values range between 0.0 and 1.0 and indicate how well the local regression model fits observed y values. Very low values indicate the local model is performing poorly. Mapping the Local R2 values to see where GWR predicts well and where it predicts poorly may provide clues about important variables that may be missing from the regression model.\nPredicted: these are the estimated (or fitted) y values 3. computed by GWR.\nResiduals: to obtain the residual values, the fitted y values are subtracted from the observed y values. Standardized residuals have a mean of zero and a standard deviation of 1. A cold-to-hot rendered map of standardized residuals can be produce by using these values.\nCoefficient Standard Error: these values measure the reliability of each coefficient estimate. Confidence in those estimates are higher when standard errors are small in relation to the actual coefficient values. Large standard errors may indicate problems with local collinearity.\n\nThey are all stored in a SpatialPointsDataFrame or SpatialPolygonsDataFrame object integrated with fit.points, GWR coefficient estimates, y value, predicted values, coefficient standard errors and t-values in its “data” slot in an object called SDF of the output list.\n\n\nConverting SDF into sf data.frame\nTo visualise the fields in SDF, we need to first covert it into sf data.frame by using the code chunk below.\n\ngwr_adaptive_output &lt;- as.data.frame(\n  gwr_adaptive$SDF) %&gt;%\n  select(-c(2:15))\n\n\ngwr_sf_adaptive &lt;- cbind(condo_resale.sf,\n                         gwr_adaptive_output)\n\nNext, glimpse() is used to display the content of condo_resale_sf.adaptive sf data frame.\n\nglimpse(gwr_sf_adaptive)\n\nRows: 1,436\nColumns: 63\n$ nb                      &lt;nb&gt; &lt;66, 77, 123, 238, 239, 343&gt;, &lt;21, 162, 163, 19…\n$ wt                      &lt;list&gt; &lt;0.1666667, 0.1666667, 0.1666667, 0.1666667, …\n$ POSTCODE                &lt;dbl&gt; 118635, 288420, 267833, 258380, 467169, 466472…\n$ SELLING_PRICE           &lt;dbl&gt; 3000000, 3880000, 3325000, 4250000, 1400000, 1…\n$ AREA_SQM                &lt;dbl&gt; 309, 290, 248, 127, 145, 139, 218, 141, 165, 1…\n$ AGE                     &lt;dbl&gt; 30, 32, 33, 7, 28, 22, 24, 24, 27, 31, 17, 22,…\n$ PROX_CBD                &lt;dbl&gt; 7.941259, 6.609797, 6.898000, 4.038861, 11.783…\n$ PROX_CHILDCARE          &lt;dbl&gt; 0.16597932, 0.28027246, 0.42922669, 0.39473543…\n$ PROX_ELDERLYCARE        &lt;dbl&gt; 2.5198118, 1.9333338, 0.5021395, 1.9910316, 1.…\n$ PROX_URA_GROWTH_AREA    &lt;dbl&gt; 6.618741, 7.505109, 6.463887, 4.906512, 6.4106…\n$ PROX_HAWKER_MARKET      &lt;dbl&gt; 1.76542207, 0.54507614, 0.37789301, 1.68259969…\n$ PROX_KINDERGARTEN       &lt;dbl&gt; 0.05835552, 0.61592412, 0.14120309, 0.38200076…\n$ PROX_MRT                &lt;dbl&gt; 0.5607188, 0.6584461, 0.3053433, 0.6910183, 0.…\n$ PROX_PARK               &lt;dbl&gt; 1.1710446, 0.1992269, 0.2779886, 0.9832843, 0.…\n$ PROX_PRIMARY_SCH        &lt;dbl&gt; 1.6340256, 0.9747834, 1.4715016, 1.4546324, 0.…\n$ PROX_TOP_PRIMARY_SCH    &lt;dbl&gt; 3.3273195, 0.9747834, 1.4715016, 2.3006394, 0.…\n$ PROX_SHOPPING_MALL      &lt;dbl&gt; 2.2102717, 2.9374279, 1.2256850, 0.3525671, 1.…\n$ PROX_SUPERMARKET        &lt;dbl&gt; 0.9103958, 0.5900617, 0.4135583, 0.4162219, 0.…\n$ PROX_BUS_STOP           &lt;dbl&gt; 0.10336166, 0.28673408, 0.28504777, 0.29872340…\n$ NO_Of_UNITS             &lt;dbl&gt; 18, 20, 27, 30, 30, 31, 32, 32, 32, 32, 34, 34…\n$ FAMILY_FRIENDLY         &lt;dbl&gt; 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0…\n$ FREEHOLD                &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1…\n$ LEASEHOLD_99YR          &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ MLR_RES                 &lt;dbl&gt; -1489099.55, 415494.57, 194129.69, 1088992.71,…\n$ Intercept               &lt;dbl&gt; 2050011.67, 1633128.24, 3433608.17, 234358.91,…\n$ y                       &lt;dbl&gt; 3000000, 3880000, 3325000, 4250000, 1400000, 1…\n$ yhat                    &lt;dbl&gt; 2886531.8, 3466801.5, 3616527.2, 5435481.6, 13…\n$ residual                &lt;dbl&gt; 113468.16, 413198.52, -291527.20, -1185481.63,…\n$ CV_Score                &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ Stud_residual           &lt;dbl&gt; 0.38207013, 1.01433140, -0.83780678, -2.846146…\n$ Intercept_SE            &lt;dbl&gt; 516105.5, 488083.5, 963711.4, 444185.5, 211962…\n$ AREA_SQM_SE             &lt;dbl&gt; 823.2860, 825.2380, 988.2240, 617.4007, 1376.2…\n$ AGE_SE                  &lt;dbl&gt; 5889.782, 6226.916, 6510.236, 6010.511, 8180.3…\n$ PROX_CBD_SE             &lt;dbl&gt; 37411.22, 23615.06, 56103.77, 469337.41, 41064…\n$ PROX_CHILDCARE_SE       &lt;dbl&gt; 319111.1, 299705.3, 349128.5, 304965.2, 698720…\n$ PROX_ELDERLYCARE_SE     &lt;dbl&gt; 120633.34, 84546.69, 129687.07, 127150.69, 327…\n$ PROX_URA_GROWTH_AREA_SE &lt;dbl&gt; 56207.39, 76956.50, 95774.60, 470762.12, 47433…\n$ PROX_MRT_SE             &lt;dbl&gt; 185181.3, 281133.9, 275483.7, 279877.1, 363830…\n$ PROX_PARK_SE            &lt;dbl&gt; 205499.6, 229358.7, 314124.3, 227249.4, 364580…\n$ PROX_PRIMARY_SCH_SE     &lt;dbl&gt; 152400.7, 165150.7, 196662.6, 240878.9, 249087…\n$ PROX_SHOPPING_MALL_SE   &lt;dbl&gt; 109268.8, 98906.8, 119913.3, 177104.1, 301032.…\n$ PROX_BUS_STOP_SE        &lt;dbl&gt; 600668.6, 410222.1, 464156.7, 562810.8, 740922…\n$ NO_Of_UNITS_SE          &lt;dbl&gt; 218.1258, 208.9410, 210.9828, 361.7767, 299.50…\n$ FAMILY_FRIENDLY_SE      &lt;dbl&gt; 131474.73, 114989.07, 146607.22, 108726.62, 16…\n$ FREEHOLD_SE             &lt;dbl&gt; 115954.0, 130110.0, 141031.5, 138239.1, 210641…\n$ Intercept_TV            &lt;dbl&gt; 3.9720784, 3.3460017, 3.5629010, 0.5276150, 1.…\n$ AREA_SQM_TV             &lt;dbl&gt; 11.614302, 20.087361, 13.247868, 33.577223, 4.…\n$ AGE_TV                  &lt;dbl&gt; -1.6154474, -9.3441881, -4.1023685, -15.524301…\n$ PROX_CBD_TV             &lt;dbl&gt; -3.22582173, -6.32792021, -4.62353528, 5.17080…\n$ PROX_CHILDCARE_TV       &lt;dbl&gt; 1.000488185, 1.471786337, -0.344047555, 1.5766…\n$ PROX_ELDERLYCARE_TV     &lt;dbl&gt; -3.26126929, 3.84626245, 4.13191383, 2.4756745…\n$ PROX_URA_GROWTH_AREA_TV &lt;dbl&gt; -2.846248368, -1.848971738, -2.648105057, -5.6…\n$ PROX_MRT_TV             &lt;dbl&gt; -1.61864578, -8.92998600, -3.40075727, -7.2870…\n$ PROX_PARK_TV            &lt;dbl&gt; -0.83749312, 2.28192684, 0.66565951, -3.340617…\n$ PROX_PRIMARY_SCH_TV     &lt;dbl&gt; 1.59230221, 6.70194543, 2.90580089, 12.9836104…\n$ PROX_SHOPPING_MALL_TV   &lt;dbl&gt; 2.753588422, -0.886626400, -1.056869486, -0.16…\n$ PROX_BUS_STOP_TV        &lt;dbl&gt; 2.0154464, 4.4941192, 3.0419145, 12.8383775, 0…\n$ NO_Of_UNITS_TV          &lt;dbl&gt; 0.480589953, -1.380026395, -0.045279967, -0.44…\n$ FAMILY_FRIENDLY_TV      &lt;dbl&gt; -0.06902748, 2.69655779, 0.04058290, 14.312764…\n$ FREEHOLD_TV             &lt;dbl&gt; 2.6213469, 3.0452799, 1.1970499, 8.7711485, 1.…\n$ Local_R2                &lt;dbl&gt; 0.8846744, 0.8899773, 0.8947007, 0.9073605, 0.…\n$ geometry                &lt;POINT [m]&gt; POINT (22085.12 29951.54), POINT (25656.…\n$ geometry.1              &lt;POINT [m]&gt; POINT (22085.12 29951.54), POINT (25656.…\n\n\n\nsummary(gwr_adaptive$SDF$yhat)\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n  171347  1102001  1385528  1751842  1982307 13887901 \n\n\n\n\nVisualising local R2\nThe code chunks below is used to create an interactive point symbol map.\n\ntmap_mode(\"view\")\n\ntmap mode set to interactive viewing\n\ntmap_options(check.and.fix = TRUE)\ntm_shape(mpsz)+\n  tm_polygons(alpha = 0.1) +\ntm_shape(gwr_sf_adaptive) +  \n  tm_dots(col = \"Local_R2\",\n          border.col = \"gray60\",\n          border.lwd = 1) +\n  tm_view(set.zoom.limits = c(11,14))\n\nWarning: The shape mpsz is invalid (after reprojection). See sf::st_is_valid\n\n\n\n\n\n\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\n\n\n\nVisualising coefficient estimates\nThe code chunks below is used to create an interactive point symbol map.\n\ntmap_options(check.and.fix = TRUE)\ntmap_mode(\"view\")\n\ntmap mode set to interactive viewing\n\nAREA_SQM_SE &lt;- tm_shape(mpsz)+\n  tm_polygons(alpha = 0.1) +\ntm_shape(gwr_sf_adaptive) +  \n  tm_dots(col = \"AREA_SQM_SE\",\n          border.col = \"gray60\",\n          border.lwd = 1) +\n  tm_view(set.zoom.limits = c(11,14))\n\nAREA_SQM_TV &lt;- tm_shape(mpsz)+\n  tm_polygons(alpha = 0.1) +\ntm_shape(gwr_sf_adaptive) +  \n  tm_dots(col = \"AREA_SQM_TV\",\n          border.col = \"gray60\",\n          border.lwd = 1) +\n  tm_view(set.zoom.limits = c(11,14))\n\ntmap_arrange(AREA_SQM_SE, AREA_SQM_TV, \n             asp=1, ncol=2,\n             sync = TRUE)\n\nWarning: The shape mpsz is invalid (after reprojection). See sf::st_is_valid\nWarning: The shape mpsz is invalid (after reprojection). See sf::st_is_valid\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\n\n\nBy URA Plannign Region\n\ntm_shape(mpsz[mpsz$REGION_N==\"CENTRAL REGION\", ])+\n  tm_polygons()+\ntm_shape(gwr_sf_adaptive) + \n  tm_bubbles(col = \"Local_R2\",\n           size = 0.15,\n           border.col = \"gray60\",\n           border.lwd = 1)\n\nWarning: The shape mpsz[mpsz$REGION_N == \"CENTRAL REGION\", ] is invalid. See\nsf::st_is_valid"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS626-GAA",
    "section": "",
    "text": "Welcome to ISSS626 Geospatial Analytics and Applications. In this website,you will find my coursework prepared for this course"
  },
  {
    "objectID": "Take_home_Ex/Take_home_Ex02/Take_home_Ex02.html",
    "href": "Take_home_Ex/Take_home_Ex02/Take_home_Ex02.html",
    "title": "Take home Exercise2",
    "section": "",
    "text": "Tourism is one of Thailand’s largest industries, accounting for some 20% of the gross domestic product (GDP). In 2019, Thailand earned 90 billion US$ from domestic and international tourism, but the COVID-19 pandemic caused revenues to crash to 24 billion US$ in 2020.\n\nObjectivesThe Task\n\n\nAs a curious geospatial analytics green horn, we are interested to discover:\n\nIf the key indicators of tourism economy of Thailand are independent from space and space and time.\nIf the tourism economy is indeed spatial and spatio-temporal dependent, then, you would like to detect where are the clusters and outliers, and the emerging hot spot/cold spot areas.\n\n\n\nThe specific tasks of this take-home exercise are as follows:\n\nUsing appropriate function of sf and tidyverse, preparing the following geospatial data layer:\na study area layer in sf polygon features. It must be at province level (including Bangkok) of Thailand.\na tourism economy indicators layer within the study area in sf polygon features.\na derived tourism economy indicator layer in spacetime s3 class of sfdep. Keep the time series at month and year levels.\nUsing the extracted data, perform global spatial autocorrelation analysis by using sfdep methods.\nUsing the extracted data, perform local spatial autocorrelation analysis by using sfdep methods.\nUsing the extracted data, perform emerging hotspot analysis by using sfdep methods\nDescribe the spatial patterns revealed by the analysis above.\n\n\n\n\n\n\n\nFor the purpose of this take-home exercise, two data sets shall be used, they are:\n\nThailand Domestic Tourism Statistics at Kaggle. we are required to use version 2 of the data set.\nThailand - Subnational Administrative Boundaries at HDX. we are required to use the province boundary data set.\n\n\n\n\n\npacman::p_load(sf, sfdep,spdep, tmap, tidyverse,ggplot2,plotly,Kendall)\n\n\n\nImport csv file into r environment\n\ntt1923 &lt;- read_csv(\"data/rawdata/thailand_domestic_tourism_2019_2023_ver2.csv\")\n\nRows: 30800 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (5): province_thai, province_eng, region_thai, region_eng, variable\ndbl  (1): value\ndate (1): date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nImport shapefile into r environment\n\nb1 &lt;- st_read(dsn = \"data/rawdata\", \n                 layer = \"tha_admbnda_adm1_rtsd_20220121\")\n\nReading layer `tha_admbnda_adm1_rtsd_20220121' from data source \n  `/Users/yangyayong/Downloads/学校文件/smu文件/Term 3/G/yyyirene/ISSS626-GAA/Take_home_Ex/Take_home_Ex02/data/rawdata' \n  using driver `ESRI Shapefile'\nSimple feature collection with 77 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 97.34336 ymin: 5.613038 xmax: 105.637 ymax: 20.46507\nGeodetic CRS:  WGS 84\n\n\nA tourism economy indicators layer within the study area in sf polygon features.\n\nna_rows &lt;- tt1923[is.na(tt1923$region_eng), ]\n\nna_rows\n\n# A tibble: 0 × 7\n# ℹ 7 variables: date &lt;date&gt;, province_thai &lt;chr&gt;, province_eng &lt;chr&gt;,\n#   region_thai &lt;chr&gt;, region_eng &lt;chr&gt;, variable &lt;chr&gt;, value &lt;dbl&gt;\n\n\nAs can be seen from the figure, na_rows is a data frame containing 0 rows, which #means that is.na(tt1923_selected$region_eng) did not match any NA values, so no rows #were filtered out. Therefore, it can be confirmed that there are no missing values #in the region_eng column.\nCheck the number of unique values for different columns in a dataset and list the unique entries in a specific column\n\nunique_counts &lt;- sapply(tt1923, n_distinct)\nprint(unique_counts)\n\n         date province_thai  province_eng   region_thai    region_eng \n           50            77            77             5             5 \n     variable         value \n            8         23267 \n\n\n\nunique(tt1923$region_eng)\n\n[1] \"central\"        \"east\"           \"south\"          \"north\"         \n[5] \"east_northeast\"\n\n\nThe code unique(tt1923$variable) retrieves all unique values ​​in the variable column in the tt1923 dataset. The output shows 8 different variable names in the column, representing different tourism-related indicators.\n\nunique(tt1923$variable)\n\n[1] \"ratio_tourist_stay\" \"no_tourist_stay\"    \"no_tourist_all\"    \n[4] \"no_tourist_thai\"    \"no_tourist_foreign\" \"revenue_all\"       \n[7] \"revenue_thai\"       \"revenue_foreign\"   \n\n\n\n\n\n\n\n\nIn this assignment,i mainly focus on these three indicator:\n\nno_tourist_thai - number of local tourists\nno_tourist_foreign - number of foreign tourists\nratio_tourist_stay - ratio of tourists staying\n\nThere are 5 different region names in the region_eng column: “central”, “east”, “south”, “north”, and “east_northeast”\n\nunique(tt1923$region_eng)\n\n[1] \"central\"        \"east\"           \"south\"          \"north\"         \n[5] \"east_northeast\"\n\n\n\nregion_total_revenue &lt;- tt1923 %&gt;%\n  filter(variable == \"revenue_all\") %&gt;%  \n  group_by(region_eng) %&gt;%                \n  summarise(total_revenue = sum(value, na.rm = TRUE))  \n\n\nregion_total_revenue &lt;- region_total_revenue %&gt;%\n  arrange(desc(total_revenue))\n\nggplot(region_total_revenue, aes(x = reorder(region_eng, total_revenue), y = total_revenue, fill = region_eng)) +\n  geom_bar(stat = \"identity\") +\n  labs(title = \"Total Tourism Revenue by Region\", x = \"Region\", y = \"Total Revenue\") +\n  theme_minimal() +\n  coord_flip() +\n  guides(fill = \"none\")\n\n\n\n\n\n\n\n\nFrom the perspective of tourism revenue, Central (Central Region) is the most valuable area because its tourism revenue is significantly higher than other regions, especially Bangkok, as an important transportation hub and cultural center, attracting a large number of domestic and international tourists.\n\n\n\nNext, we select the central region as our research area.\n\ntb_sc &lt;- tt1923  %&gt;%\n  filter(region_eng == \"central\") %&gt;%\n  select(date, province_eng, region_eng, variable,value)\n\n\ncentral_provinces &lt;- tb_sc %&gt;%\n  filter(region_eng == \"central\") %&gt;%\n  select(province_eng) %&gt;%  \n  distinct()          \n\ncentral_provinces\n\n# A tibble: 18 × 1\n   province_eng            \n   &lt;chr&gt;                   \n 1 Bangkok                 \n 2 Lopburi                 \n 3 Phra Nakhon Si Ayutthaya\n 4 Saraburi                \n 5 Chainat                 \n 6 Nakhon Pathom           \n 7 Sing Buri               \n 8 Ang Thong               \n 9 Nonthaburi              \n10 Pathum Thani            \n11 Samut Prakan            \n12 Samut Sakhon            \n13 Ratchaburi              \n14 Kanchanaburi            \n15 Samut Songkhram         \n16 Suphan Buri             \n17 Phetchaburi             \n18 Prachuap Khiri Khan     \n\n\nTo ensure geographic consistency, we delete two regions that are not included in the boundary data.\n\ntb_sc_filtered &lt;- tb_sc %&gt;%\n  filter(!(province_eng %in% c(\"Lopburi\", \"Chainat\")))\n\n\nselected_provinces &lt;- c(\n  \"Bangkok\", \"Lopburi\", \"Phra Nakhon Si Ayutthaya\", \"Saraburi\", \"Chainat\",\n  \"Nakhon Pathom\", \"Sing Buri\", \"Ang Thong\", \"Nonthaburi\", \"Pathum Thani\",\n  \"Samut Prakan\", \"Samut Sakhon\", \"Ratchaburi\", \"Kanchanaburi\",\n  \"Samut Songkhram\", \"Suphan Buri\", \"Phetchaburi\", \"Prachuap Khiri Khan\"\n)\n\nTo reduce data cache, we select the columns to be studied\n\nb1_filtered &lt;- b1 %&gt;%\n  filter(ADM1_EN %in% selected_provinces)  %&gt;%\nselect(ADM1_EN, Shape_Area, Shape_Leng, geometry)\n\nNow we plot the study area\n\nplot(b1_filtered)\n\n\n\n\n\n\n\n\n\n\n\nBy merging these two datasets, we can get both geographic and economic attribute data in one data frame, which makes it easier to perform analysis or visualization\n\nmerged_data &lt;- left_join(b1_filtered, tb_sc_filtered, by = c(\"ADM1_EN\" = \"province_eng\"))\n\nCheck if there are any missing values ​​after merging\n\nna_rows2 &lt;- merged_data[is.na(merged_data$region_eng), ]\nmerged_data_date &lt;- merged_data %&gt;%\n  mutate(\n    YearMonth = as.integer(format(date, \"%Y%m\"))\n  )\n\n\nna_rows2 &lt;- merged_data_date[is.na(merged_data_date$region_eng), ]\n\nna_rows2\n\nSimple feature collection with 0 features and 8 fields\nBounding box:  xmin: NA ymin: NA xmax: NA ymax: NA\nGeodetic CRS:  WGS 84\n[1] ADM1_EN    Shape_Area Shape_Leng date       region_eng variable   value     \n[8] geometry   YearMonth \n&lt;0 rows&gt; (or 0-length row.names)\n\n\nSince the return result is empty, it means that the region_eng column in merged_data has no missing values.\nFinally check the central provinces that we need.\n\ncentral_provinces2 &lt;- unique(merged_data %&gt;% dplyr::pull(ADM1_EN))\n\nprint(central_provinces2)\n\n [1] \"Bangkok\"                  \"Samut Prakan\"            \n [3] \"Nonthaburi\"               \"Pathum Thani\"            \n [5] \"Phra Nakhon Si Ayutthaya\" \"Ang Thong\"               \n [7] \"Sing Buri\"                \"Saraburi\"                \n [9] \"Ratchaburi\"               \"Kanchanaburi\"            \n[11] \"Suphan Buri\"              \"Nakhon Pathom\"           \n[13] \"Samut Sakhon\"             \"Samut Songkhram\"         \n[15] \"Phetchaburi\"              \"Prachuap Khiri Khan\"     \n\n\n\n\n\nFrom data provided,we perform three economic indicators：\n\n\nFirstly,filter the data to generate two new data sets, representing the number of local tourists and foreign tourists in Thailand respectively.\n\ntourist_numbers_thai &lt;- merged_data_date %&gt;%\n  filter(variable %in% c( \"no_tourist_thai\"))\n\ntourist_numbers_foreign &lt;- merged_data %&gt;%\n  filter(variable %in% c( \"no_tourist_foreign\"))\n\nThen we focus on yearly analysis.\nAggregate data by year\n\ntourist_numbers_thai_yearly &lt;- tourist_numbers_thai %&gt;%\n  mutate(year = lubridate::year(date)) %&gt;%  \n  group_by(ADM1_EN, year) %&gt;%  \n  summarise(total_value = sum(value, na.rm = TRUE)) %&gt;%  \n  ungroup()\n\n\ntourist_numbers_foreign_yearly &lt;- tourist_numbers_foreign %&gt;%\n  mutate(year = lubridate::year(date)) %&gt;%  \n  group_by(ADM1_EN, year) %&gt;%  \n  summarise(total_value = sum(value, na.rm = TRUE)) %&gt;%  \n  ungroup()\n\nsaveRDS(): Saves the data object as a .rds file for quick loading and use later.\nreadRDS(): Reads the saved data object from a .rds file to avoid recalculation or processing.\n\nsaveRDS(tourist_numbers_thai_yearly,\"data/rds/tourist_numbers_thai_yearly.rds\")\n\n\ntourist_numbers_thai_yearly &lt;- readRDS(\"data/rds/tourist_numbers_thai_yearly.rds\")\n\n\nsaveRDS(tourist_numbers_foreign_yearly,\"data/rds/tourist_numbers_foreign_yearly.rds\")\n\n\ntourist_numbers_foreign_yearly &lt;-readRDS(\"data/rds/tourist_numbers_foreign_yearly.rds\")\n\nKeep the time series at month and year levels\nWe aggregate by year to calculate the total number of tourists per province per year.\n\n\n\nEqual\n\n\nShow the code\ntmap_mode(\"plot\")\n\n\ntmap mode set to plotting\n\n\nShow the code\ntm_shape(tourist_numbers_thai_yearly) +\n  tm_fill(\"total_value\", \n          style = \"equal\", \n          palette = \"Blues\", \n          title = \"Total Local Tourists(Quantile Classification)\") +\n  tm_borders(alpha = 0.5) +\n  tm_facets(by = \"year\") +  \n  tm_layout(main.title = \"Total Local Tourists(Quantile Classification)\",\n            main.title.size = 0.7,\n            legend.width = 1.2, \n            legend.text.size = 0.8)\n\n\n\n\n\n\n\n\n\nQuantile\n\n\nShow the code\ntmap_mode(\"plot\")\n\n\ntmap mode set to plotting\n\n\nShow the code\ntm_shape(tourist_numbers_thai_yearly) +\n  tm_fill(\"total_value\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          title = \"Total Local Tourists(Quantile Classification)\") +\n  tm_borders(alpha = 0.5) +\n  tm_facets(by = \"year\") +  \n  tm_layout(main.title = \"Total Local Tourists(Quantile Classification)\",\n            main.title.size = 0.7,\n            legend.width = 1.2, \n            legend.text.size = 0.8)\n\n\n\n\n\n\n\n\n\nTourist concentration areas: The first picture shows the trend of tourists continuing to concentrate in the central region, while the second picture reveals the details of the fluctuations in the number of tourists, especially in 2020 and 2022, when tourists were more evenly distributed in the south and the central region.\nClassification: The second picture is more detailed, allowing us to observe more regional differences, even areas with lower tourist numbers are distinguished.\nTrend: In both pictures, it can be seen that the number of tourists in 2019 and 2022 was more concentrated, while 2020 and 2023 showed different degrees of tourist distribution, especially fluctuations in the central and southern regions.\n\n\n\nEqual\n\ntourist_numbers_foreign_yearly &lt;- tourist_numbers_foreign %&gt;%\n  mutate(year = lubridate::year(date)) %&gt;%  \n  group_by(ADM1_EN, year) %&gt;%  \n  summarise(total_value = sum(value, na.rm = TRUE)) %&gt;%  \n  ungroup()\n\n`summarise()` has grouped output by 'ADM1_EN'. You can override using the\n`.groups` argument.\n\n\n\n\nShow the code\ntmap_mode(\"plot\")\n\n\ntmap mode set to plotting\n\n\nShow the code\ntm_shape(tourist_numbers_foreign_yearly) +\n  tm_fill(\"total_value\", \n          style = \"equal\", \n          palette = \"Greens\", \n          title = \"Total Foreign Tourists(Equal Classification)\") +\n  tm_borders(alpha = 0.5) +  \n  tm_facets(by = \"year\") + \n  tm_layout(main.title = \"Total Foreign Tourists(Equal Classification)\",\n            main.title.size = 0.7,\n            legend.width = 1.2,  \n            legend.text.size = 0.8)\n\n\n\n\n\n\n\n\n\nQuantile\n\n\nShow the code\ntmap_mode(\"plot\")\n\n\ntmap mode set to plotting\n\n\nShow the code\ntm_shape(tourist_numbers_foreign_yearly) +\n  tm_fill(\"total_value\", \n          style = \"quantile\", \n          palette = \"Greens\", \n          title = \"Total Foreign Tourists(Quantile Classification)\") +\n  tm_borders(alpha = 0.5) +  \n  tm_facets(by = \"year\") + \n  tm_layout(main.title = \"Total Foreign Tourists(Quantile Classification)\",\n            main.title.size = 0.7,\n            legend.width = 1.2,  \n            legend.text.size = 0.8)\n\n\n\n\n\n\n\n\n\nThe first map shows more clearly the significant advantage of Bangkok in receiving foreign tourists in 2019, while the overall number of tourists in the following years has dropped sharply.\nThrough second map, it can be seen that in addition to Bangkok, other regions such as the southern region also have relatively more reception in terms of tourist inflow.\nSome areas may not be obvious in the annual data, but may become important in certain months.So next we will mainly analysis numbers of tourists on the monthly aspect to find more insights.\n\n\n\nWe aggregate by month to calculate the total number of tourists per province per month.\n\ntourist_numbers_thai_monthly &lt;- tourist_numbers_thai %&gt;%\n  mutate(\n    year = year(date),\n    month = month(date)\n  ) %&gt;%\n  group_by(ADM1_EN, year, month) %&gt;% \n  summarise(total_value = sum(value, na.rm = TRUE)) %&gt;%\n  ungroup()\n\n\ntourist_numbers_foreign_monthly &lt;- tourist_numbers_foreign %&gt;%\n  mutate(\n    year = year(date),\n    month = month(date)\n  ) %&gt;%\n  group_by(ADM1_EN, year, month) %&gt;% \n  summarise(total_value = sum(value, na.rm = TRUE)) %&gt;%\n  ungroup()\n\nsaveRDS(): Saves the data object as a .rds file for quick loading and use later.\nreadRDS(): Reads the saved data object from a .rds file to avoid recalculation or processing.\n\nsaveRDS(tourist_numbers_thai_monthly,\"data/rds/tourist_numbers_thai_monthly.rds\")\n\n\ntourist_numbers_thai_monthly &lt;- readRDS(\"data/rds/tourist_numbers_thai_monthly.rds\")\n\n\nsaveRDS(tourist_numbers_foreign_monthly,\"data/rds/tourist_numbers_foreign_monthly.rds\")\n\n\ntourist_numbers_foreign_monthly &lt;-readRDS(\"data/rds/tourist_numbers_foreign_monthly.rds\")\n\n\n\n\nFrom the data,we notice that in 2020-2023，they were too many data unrecorded,so we choose 2019 which least unrecorded data to analysis.\n\ntourist_numbers_2019_monthly &lt;- tourist_numbers_thai_monthly %&gt;%\n  filter(year == 2019)\n\nEqual\n\n\nShow the code\ntmap_mode(\"plot\")\n\n\ntmap mode set to plotting\n\n\nShow the code\ntm_shape(tourist_numbers_2019_monthly) +\n  tm_fill(\"total_value\", \n          style = \"equal\", \n          palette = \"YlOrBr\", \n          title = \"Total Local Tourists for monthly 2019(Equal Classification)\") +\n  tm_borders(alpha = 0.5) +\n  tm_facets(by = \"month\") +  \n  tm_layout(main.title = \"Total Local Tourists for monthly 2019(Equal Classification)\",\n            main.title.size = 0.7,\n            legend.width = 1.2, \n            legend.text.size = 0.8)\n\n\n\n\n\n\n\n\n\nQuantile\n\n\nShow the code\ntmap_mode(\"plot\")\n\n\ntmap mode set to plotting\n\n\nShow the code\ntm_shape(tourist_numbers_2019_monthly) +\n  tm_fill(\"total_value\", \n          style = \"quantile\", \n          palette = \"YlOrBr\", \n          title = \"Total Local Tourists for monthly 2019 (Quantile Classification)\") +\n  tm_borders(alpha = 0.5) +\n  tm_facets(by = \"month\") +  \n  tm_layout(main.title = \"Total Local Tourists for monthly 2019(Quantile Classification)\",\n            main.title.size = 0.7,\n            legend.width = 1.2, \n            legend.text.size = 0.8)\n\n\n\n\n\n\n\n\n\n\n\n\n\ntourist_numbers_2019_foreign_monthly &lt;- tourist_numbers_foreign_monthly %&gt;%\n  filter(year == 2019)\n\nEqual\n\n\nShow the code\ntmap_mode(\"plot\")\n\n\ntmap mode set to plotting\n\n\nShow the code\ntm_shape(tourist_numbers_2019_foreign_monthly) +\n  tm_fill(\"total_value\", \n          style = \"equal\", \n          palette = \"PuRd\", \n          title = \"Total Foreign Tourists for monthly 2019(Equal Classification)\") +\n  tm_borders(alpha = 0.5) +\n  tm_facets(by = \"month\") +  \n  tm_layout(main.title = \"Total Foreign Tourists for monthly 2019(Equal Classification)\",\n            main.title.size = 0.7,\n            legend.width = 1.2, \n            legend.text.size = 0.8)\n\n\n\n\n\n\n\n\n\nQuantile\n\n\nShow the code\ntmap_mode(\"plot\")\n\n\ntmap mode set to plotting\n\n\nShow the code\ntm_shape(tourist_numbers_2019_foreign_monthly) +\n  tm_fill(\"total_value\", \n          style = \"quantile\", \n          palette = \"PuRd\", \n          title = \"Total Foreign Tourists for monthly 2019 (Quantile Classification)\") +\n  tm_borders(alpha = 0.5) +\n  tm_facets(by = \"month\") +  \n  tm_layout(main.title = \"Total Foreign Tourists for monthly 2019(Quantile Classification)\",\n            main.title.size = 0.7,\n            legend.width = 1.2, \n            legend.text.size = 0.8)\n\n\n\n\n\n\n\n\n\nHowever，tourism for foreign tourists has been affected by the epidemic，especially in Bangkok at the end of the 2019.\n\n\n\nTravel restrictions and health and safety concerns during the pandemic may cause tourists to shorten their stay or even cancel their trips,on the other hand,the length of time tourists stay in a country directly affects their local consumption level, including accommodation, catering, shopping, and entertainment. If the stay rate is high, tourists’ local consumption will usually be higher, thus making a greater contribution to the local economy.\nWe extracted the data for the ratio indicators.\n\nratio_tourist_stay &lt;- merged_data %&gt;%\n  filter(variable %in% c( \"ratio_tourist_stay\"))\n\nWe use mutate() to extract the year from the date, then use group_by() to group by province and year, and finally use summarise() to calculate the average of each group.\n\nratio_tourist_stay_yearly &lt;- ratio_tourist_stay %&gt;%\n  mutate(year = year(date)) %&gt;%  \n  group_by(ADM1_EN, year) %&gt;%  \n  summarise(average_ratio = mean(value, na.rm = TRUE)) %&gt;%  \n  ungroup()\n\n\nsaveRDS(ratio_tourist_stay_yearly,\"data/rds/ratio_tourist_stay_yearly.rds\")\n\n\nratio_tourist_stay_yearly &lt;- readRDS(\"data/rds/ratio_tourist_stay_yearly.rds\")\n\nVisualising Tourist behavior Indicator using Equal and Quantile\nEqual\n\n\nShow the code\ntmap_mode(\"plot\")\n\n\ntmap mode set to plotting\n\n\nShow the code\ntm_shape(ratio_tourist_stay_yearly) +\n  tm_fill(\"average_ratio\", \n          style = \"equal\", \n          palette = \"GnBu\", \n          title = \"Ratio of Tourist stay (Equal)\") +\n  tm_borders(alpha = 0.5) +\n  tm_facets(by = \"year\") +  \n  tm_layout(main.title = \"Ratio of Tourist stay (equal Classification)\",\n            main.title.size = 0.7,\n            legend.width = 1.2,  \n            legend.text.size = 0.8)\n\n\n\n\n\n\n\n\n\nQuantile\n\n\nShow the code\ntmap_mode(\"plot\")\n\n\ntmap mode set to plotting\n\n\nShow the code\ntm_shape(ratio_tourist_stay_yearly) +\n  tm_fill(\"average_ratio\", \n          style = \"quantile\", \n          palette = \"GnBu\", \n          title = \"Ratio of Tourist stay (Quantile)\") +\n  tm_borders(alpha = 0.5) +\n  tm_facets(by = \"year\") +  \n  tm_layout(main.title = \"Ratio of Tourist stay (Quantile Classification)\",\n            main.title.size = 0.7,\n            legend.width = 1.2,  \n            legend.text.size = 0.8)\n\n\n\n\n\n\n\n\n\n2019: Before the pandemic, many regions in Thailand had high rates of tourist stay, especially in some provinces in the central and southern parts of the country.\n2020-2021: With the outbreak of COVID-19, the tourism industry has been severely affected. It can be clearly seen in the figure that the tourist stay rate in most regions in these years has dropped sharply, especially in 2021, when the stay rate in almost all regions is at the lowest level.\n2022-2023: As the pandemic gradually eases, the tourism industry begins to recover. It can be seen in the figure that the tourist stay rate in some regions has gradually recovered, but it has not returned to the level of 2019.\n\n\n\n\n\nCompare to temporal-spatial,the impact of COVID-19 on tourism in different provinces is not just static data for a certain period of time, but gradually changes in each region over time. Spacetime can help us identify these dynamic changes.\nBecause our data both have geometry, so we use “as_spacetime”.\n\n\n\ntourist_numbers_thai_yearly_st &lt;- as_spacetime(tourist_numbers_thai_yearly, \"ADM1_EN\", \"year\")\n\n\ntourist_numbers_foreign_yearly_st &lt;- as_spacetime(tourist_numbers_foreign_yearly, \"ADM1_EN\", \"year\")\n\n\nsaveRDS(tourist_numbers_thai_yearly_st,\"data/rds/tourist_numbers_thai_yearly_st.rds\")\n\n\ntourist_numbers_thai_yearly_st &lt;- readRDS(\"data/rds/tourist_numbers_thai_yearly_st.rds\")\n\n\nsaveRDS(tourist_numbers_foreign_yearly_st,\"data/rds/tourist_numbers_foreign_yearly_st.rds\")\n\n\ntourist_numbers_foreign_yearly_st &lt;- readRDS(\"data/rds/tourist_numbers_foreign_yearly_st.rds\")\n\nCheck whether convert successfully\n\nis_spacetime_cube(tourist_numbers_thai_yearly_st)\n\n[1] TRUE\n\n\n\nis_spacetime_cube(tourist_numbers_foreign_yearly_st)\n\n[1] TRUE\n\n\n\n\n\nWe choose 2019 to see the impact.\n\ntourist_numbers_local_monthly2019_st &lt;- as_spacetime(tourist_numbers_2019_monthly, \"ADM1_EN\", \"month\")\n\n\nsaveRDS(tourist_numbers_local_monthly2019_st,\"data/rds/tourist_numbers_local_monthly2019_st.rds\")\n\n\ntourist_numbers_local_monthly2019_st &lt;- readRDS(\"data/rds/tourist_numbers_local_monthly2019_st.rds\")\n\n\ntourist_numbers_froeign_monthly2019_st &lt;- as_spacetime(tourist_numbers_2019_foreign_monthly, \"ADM1_EN\", \"month\")\n\n\nsaveRDS(tourist_numbers_froeign_monthly2019_st,\"data/rds/tourist_numbers_froeign_monthly2019_st.rds\")\n\n\ntourist_numbers_froeign_monthly2019_st &lt;- readRDS(\"data/rds/tourist_numbers_froeign_monthly2019_st.rds\")\n\n\nis_spacetime_cube(tourist_numbers_froeign_monthly2019_st)\n\n[1] TRUE\n\n\n\nis_spacetime_cube(tourist_numbers_local_monthly2019_st)\n\n[1] TRUE\n\n\n\n\n\n\nratio_tourist_stay_yearly_st &lt;- as_spacetime(ratio_tourist_stay_yearly, \"ADM1_EN\", \"year\")\n\n\nsaveRDS(ratio_tourist_stay_yearly_st,\"data/rds/ratio_tourist_stay_yearly_st.rds\")\n\n\nratio_tourist_stay_yearly_st &lt;- readRDS(\"data/rds/ratio_tourist_stay_yearly_st.rds\")\n\n\nis_spacetime_cube(ratio_tourist_stay_yearly_st)\n\n[1] TRUE\n\n\n\n\n\n\nGlobal Spatial Autocorrelation：Understand whether the data show spatial dependence or spatial correlation as a whole. If Moran’s I is significant, it means that the variable values are clustered in space rather than randomly distributed.\nIn this case we will use sfdep methods.\n\n\nStep 1: Deriving Queen’s contiguity weights: sfdep methods\n\nLocal Tourists yearlyForeign Tourists yearlyLocal Tourists monthlyForeign Tourists monthly\n\n\n\n\nShow the code\nwm_q_numbers_thai_yearly &lt;- tourist_numbers_thai_yearly %&gt;%\n  mutate(nb = st_contiguity(geometry),\n         wt = st_weights(nb,\n                         style = \"W\"),\n         .before = 1) \n\n\n\nsaveRDS(wm_q_numbers_thai_yearly,\"data/rds/wm_q_numbers_thai_yearly.rds\")\n\n\nwm_q_numbers_thai_yearly &lt;- readRDS(\"data/rds/wm_q_numbers_thai_yearly.rds\")\n\n\nwm_q_numbers_thai_yearly\n\nSimple feature collection with 80 features and 5 fields\nGeometry type: GEOMETRY\nDimension:     XY\nBounding box:  xmin: 98.18107 ymin: 10.95469 xmax: 101.4546 ymax: 15.66074\nGeodetic CRS:  WGS 84\n# A tibble: 80 × 6\n   nb         wt         ADM1_EN    year total_value                    geometry\n * &lt;nb&gt;       &lt;list&gt;     &lt;chr&gt;     &lt;dbl&gt;       &lt;dbl&gt;               &lt;POLYGON [°]&gt;\n 1 &lt;int [19]&gt; &lt;dbl [19]&gt; Ang Thong  2019      796444 ((100.3329 14.79905, 100.3…\n 2 &lt;int [19]&gt; &lt;dbl [19]&gt; Ang Thong  2020      369062 ((100.3329 14.79905, 100.3…\n 3 &lt;int [19]&gt; &lt;dbl [19]&gt; Ang Thong  2021      253957 ((100.3329 14.79905, 100.3…\n 4 &lt;int [19]&gt; &lt;dbl [19]&gt; Ang Thong  2022      670079 ((100.3329 14.79905, 100.3…\n 5 &lt;int [19]&gt; &lt;dbl [19]&gt; Ang Thong  2023      161835 ((100.3329 14.79905, 100.3…\n 6 &lt;int [29]&gt; &lt;dbl [29]&gt; Bangkok    2019    42073847 ((100.6128 13.9552, 100.61…\n 7 &lt;int [29]&gt; &lt;dbl [29]&gt; Bangkok    2020    18795401 ((100.6128 13.9552, 100.61…\n 8 &lt;int [29]&gt; &lt;dbl [29]&gt; Bangkok    2021    11946480 ((100.6128 13.9552, 100.61…\n 9 &lt;int [29]&gt; &lt;dbl [29]&gt; Bangkok    2022    28793993 ((100.6128 13.9552, 100.61…\n10 &lt;int [29]&gt; &lt;dbl [29]&gt; Bangkok    2023     5290145 ((100.6128 13.9552, 100.61…\n# ℹ 70 more rows\n\n\n\n\n\n\nShow the code\nwm_q_numbers_foreign_yearly &lt;- tourist_numbers_foreign_yearly %&gt;%\n  mutate(nb = st_contiguity(geometry),\n         wt = st_weights(nb,\n                         style = \"W\"),\n         .before = 1) \n\n\n\nsaveRDS(wm_q_numbers_foreign_yearly,\"data/rds/wm_q_numbers_foreign_yearly.rds\")\n\n\nwm_q_numbers_foreign_yearly &lt;- readRDS(\"data/rds/wm_q_numbers_foreign_yearly.rds\")\n\n\nwm_q_numbers_foreign_yearly \n\nSimple feature collection with 80 features and 5 fields\nGeometry type: GEOMETRY\nDimension:     XY\nBounding box:  xmin: 98.18107 ymin: 10.95469 xmax: 101.4546 ymax: 15.66074\nGeodetic CRS:  WGS 84\n# A tibble: 80 × 6\n   nb         wt         ADM1_EN    year total_value                    geometry\n * &lt;nb&gt;       &lt;list&gt;     &lt;chr&gt;     &lt;dbl&gt;       &lt;dbl&gt;               &lt;POLYGON [°]&gt;\n 1 &lt;int [19]&gt; &lt;dbl [19]&gt; Ang Thong  2019       32112 ((100.3329 14.79905, 100.3…\n 2 &lt;int [19]&gt; &lt;dbl [19]&gt; Ang Thong  2020        8259 ((100.3329 14.79905, 100.3…\n 3 &lt;int [19]&gt; &lt;dbl [19]&gt; Ang Thong  2021           0 ((100.3329 14.79905, 100.3…\n 4 &lt;int [19]&gt; &lt;dbl [19]&gt; Ang Thong  2022         670 ((100.3329 14.79905, 100.3…\n 5 &lt;int [19]&gt; &lt;dbl [19]&gt; Ang Thong  2023        1032 ((100.3329 14.79905, 100.3…\n 6 &lt;int [29]&gt; &lt;dbl [29]&gt; Bangkok    2019    24892715 ((100.6128 13.9552, 100.61…\n 7 &lt;int [29]&gt; &lt;dbl [29]&gt; Bangkok    2020     4822513 ((100.6128 13.9552, 100.61…\n 8 &lt;int [29]&gt; &lt;dbl [29]&gt; Bangkok    2021      625362 ((100.6128 13.9552, 100.61…\n 9 &lt;int [29]&gt; &lt;dbl [29]&gt; Bangkok    2022     9832457 ((100.6128 13.9552, 100.61…\n10 &lt;int [29]&gt; &lt;dbl [29]&gt; Bangkok    2023     4279587 ((100.6128 13.9552, 100.61…\n# ℹ 70 more rows\n\n\n\n\n\n\nShow the code\nwm_q_numbers_local_monthly2019 &lt;- tourist_numbers_2019_monthly %&gt;%\n  mutate(nb = st_contiguity(geometry),\n         wt = st_weights(nb,\n                         style = \"W\"),\n         .before = 1) \n\n\n\nsaveRDS(wm_q_numbers_local_monthly2019,\"data/rds/wm_q_numbers_monthly2019.rds\")\n\n\nwm_q_numbers_local_monthly2019 &lt;- readRDS(\"data/rds/wm_q_numbers_monthly2019.rds\")\n\n\nwm_q_numbers_local_monthly2019 \n\nSimple feature collection with 192 features and 6 fields\nGeometry type: GEOMETRY\nDimension:     XY\nBounding box:  xmin: 98.18107 ymin: 10.95469 xmax: 101.4546 ymax: 15.66074\nGeodetic CRS:  WGS 84\n# A tibble: 192 × 7\n   nb         wt     ADM1_EN    year month total_value                  geometry\n * &lt;nb&gt;       &lt;list&gt; &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt;       &lt;dbl&gt;             &lt;POLYGON [°]&gt;\n 1 &lt;int [47]&gt; &lt;dbl&gt;  Ang Thong  2019     1       98816 ((100.3329 14.79905, 100…\n 2 &lt;int [47]&gt; &lt;dbl&gt;  Ang Thong  2019     2       90029 ((100.3329 14.79905, 100…\n 3 &lt;int [47]&gt; &lt;dbl&gt;  Ang Thong  2019     3       96733 ((100.3329 14.79905, 100…\n 4 &lt;int [47]&gt; &lt;dbl&gt;  Ang Thong  2019     4       61929 ((100.3329 14.79905, 100…\n 5 &lt;int [47]&gt; &lt;dbl&gt;  Ang Thong  2019     5       69159 ((100.3329 14.79905, 100…\n 6 &lt;int [47]&gt; &lt;dbl&gt;  Ang Thong  2019     6       62095 ((100.3329 14.79905, 100…\n 7 &lt;int [47]&gt; &lt;dbl&gt;  Ang Thong  2019     7       60045 ((100.3329 14.79905, 100…\n 8 &lt;int [47]&gt; &lt;dbl&gt;  Ang Thong  2019     8       51666 ((100.3329 14.79905, 100…\n 9 &lt;int [47]&gt; &lt;dbl&gt;  Ang Thong  2019     9       57042 ((100.3329 14.79905, 100…\n10 &lt;int [47]&gt; &lt;dbl&gt;  Ang Thong  2019    10       53523 ((100.3329 14.79905, 100…\n# ℹ 182 more rows\n\n\n\n\n\n\nShow the code\nwm_q_numbers_foreign_monthly2019 &lt;- tourist_numbers_2019_foreign_monthly %&gt;%\n  mutate(nb = st_contiguity(geometry),\n         wt = st_weights(nb,\n                         style = \"W\"),\n         .before = 1) \n\n\n\nsaveRDS(wm_q_numbers_foreign_monthly2019,\"data/rds/wm_q_numbers_foreign_monthly2019.rds\")\n\n\nwm_q_numbers_foreign_monthly2019&lt;-readRDS(\"data/rds/wm_q_numbers_foreign_monthly2019.rds\")\n\n\nwm_q_numbers_foreign_monthly2019\n\nSimple feature collection with 192 features and 6 fields\nGeometry type: GEOMETRY\nDimension:     XY\nBounding box:  xmin: 98.18107 ymin: 10.95469 xmax: 101.4546 ymax: 15.66074\nGeodetic CRS:  WGS 84\n# A tibble: 192 × 7\n   nb         wt     ADM1_EN    year month total_value                  geometry\n * &lt;nb&gt;       &lt;list&gt; &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt;       &lt;dbl&gt;             &lt;POLYGON [°]&gt;\n 1 &lt;int [47]&gt; &lt;dbl&gt;  Ang Thong  2019     1        5281 ((100.3329 14.79905, 100…\n 2 &lt;int [47]&gt; &lt;dbl&gt;  Ang Thong  2019     2        3915 ((100.3329 14.79905, 100…\n 3 &lt;int [47]&gt; &lt;dbl&gt;  Ang Thong  2019     3        4690 ((100.3329 14.79905, 100…\n 4 &lt;int [47]&gt; &lt;dbl&gt;  Ang Thong  2019     4         899 ((100.3329 14.79905, 100…\n 5 &lt;int [47]&gt; &lt;dbl&gt;  Ang Thong  2019     5         764 ((100.3329 14.79905, 100…\n 6 &lt;int [47]&gt; &lt;dbl&gt;  Ang Thong  2019     6        1022 ((100.3329 14.79905, 100…\n 7 &lt;int [47]&gt; &lt;dbl&gt;  Ang Thong  2019     7        5989 ((100.3329 14.79905, 100…\n 8 &lt;int [47]&gt; &lt;dbl&gt;  Ang Thong  2019     8        2938 ((100.3329 14.79905, 100…\n 9 &lt;int [47]&gt; &lt;dbl&gt;  Ang Thong  2019     9        3390 ((100.3329 14.79905, 100…\n10 &lt;int [47]&gt; &lt;dbl&gt;  Ang Thong  2019    10        1200 ((100.3329 14.79905, 100…\n# ℹ 182 more rows\n\n\n\n\n\n\n\n\n\nShow the code\nwm_q_ratio_tourist_stay_yearly &lt;- ratio_tourist_stay_yearly %&gt;%\n  mutate(nb = st_contiguity(geometry),\n         wt = st_weights(nb,\n                         style = \"W\"),\n         .before = 1) \n\n\n\nsaveRDS(wm_q_ratio_tourist_stay_yearly,\"data/rds/wm_q_ratio_tourist_stay_yearly.rds\")\n\n\nwm_q_ratio_tourist_stay_yearly&lt;-readRDS(\"data/rds/wm_q_ratio_tourist_stay_yearly.rds\")\n\n\nwm_q_ratio_tourist_stay_yearly \n\nSimple feature collection with 80 features and 5 fields\nGeometry type: GEOMETRY\nDimension:     XY\nBounding box:  xmin: 98.18107 ymin: 10.95469 xmax: 101.4546 ymax: 15.66074\nGeodetic CRS:  WGS 84\n# A tibble: 80 × 6\n   nb         wt         ADM1_EN    year average_ratio                  geometry\n * &lt;nb&gt;       &lt;list&gt;     &lt;chr&gt;     &lt;dbl&gt;         &lt;dbl&gt;             &lt;POLYGON [°]&gt;\n 1 &lt;int [19]&gt; &lt;dbl [19]&gt; Ang Thong  2019          64.0 ((100.3329 14.79905, 100…\n 2 &lt;int [19]&gt; &lt;dbl [19]&gt; Ang Thong  2020          20.4 ((100.3329 14.79905, 100…\n 3 &lt;int [19]&gt; &lt;dbl [19]&gt; Ang Thong  2021          11.8 ((100.3329 14.79905, 100…\n 4 &lt;int [19]&gt; &lt;dbl [19]&gt; Ang Thong  2022          31.2 ((100.3329 14.79905, 100…\n 5 &lt;int [19]&gt; &lt;dbl [19]&gt; Ang Thong  2023          46.6 ((100.3329 14.79905, 100…\n 6 &lt;int [29]&gt; &lt;dbl [29]&gt; Bangkok    2019          82.2 ((100.6128 13.9552, 100.…\n 7 &lt;int [29]&gt; &lt;dbl [29]&gt; Bangkok    2020          28.2 ((100.6128 13.9552, 100.…\n 8 &lt;int [29]&gt; &lt;dbl [29]&gt; Bangkok    2021          13.0 ((100.6128 13.9552, 100.…\n 9 &lt;int [29]&gt; &lt;dbl [29]&gt; Bangkok    2022          46.6 ((100.6128 13.9552, 100.…\n10 &lt;int [29]&gt; &lt;dbl [29]&gt; Bangkok    2023          75.5 ((100.6128 13.9552, 100.…\n# ℹ 70 more rows\n\n\n\n\n\n\n\nLocal Tourists yearlyForeign Tourists yearly\n\n\n\n\nShow the code\nmoranI_numbers_thai_yearly &lt;- global_moran(wm_q_numbers_thai_yearly$total_value,\n                       wm_q_numbers_thai_yearly$nb,\n                       wm_q_numbers_thai_yearly$wt)\nglimpse(moranI_numbers_thai_yearly)\n\n\nList of 2\n $ I: num -0.042\n $ K: num 23.7\n\n\nAccording to the result: I = -0.042 indicates that the spatial autocorrelation is very weak and close to zero, suggesting that the values ​​between adjacent areas are almost randomly distributed.\nK = 23.7 indicates that the data distribution has a very steep peak, which means that most of the data is concentrated in a certain range and there are few discrete values.\n\n\n\n\nShow the code\nmoranI_numbers_foreign_yearly &lt;- global_moran(wm_q_numbers_foreign_yearly $total_value,\n                       wm_q_numbers_foreign_yearly $nb,\n                       wm_q_numbers_foreign_yearly $wt)\nglimpse(moranI_numbers_foreign_yearly)\n\n\nList of 2\n $ I: num 0.0152\n $ K: num 52.7\n\n\nAccording to the result: I = -0.0152 indicates that the spatial autocorrelation is very weak and close to zero, suggesting that the values ​​between adjacent areas are almost randomly distributed.\nK = 52.7 indicates that the data distribution has a very steep peak, which means that most of the data is concentrated in a certain range and there are few discrete values.\n\n\n\n\nLocal Tourists monthlyForeign Tourists monthly\n\n\n\n\nShow the code\nmoranI_numbers_thai_monthly &lt;- global_moran(wm_q_numbers_local_monthly2019$total_value,wm_q_numbers_local_monthly2019$nb, wm_q_numbers_local_monthly2019$wt)\n\nglimpse(moranI_numbers_thai_monthly)\n\n\nList of 2\n $ I: num 0.00825\n $ K: num 12.9\n\n\nFrom the resutl: I = 0.00825 indicates that there is a slight positive spatial autocorrelation and there may be some similarity between adjacent areas.\nK = 12.9 indicates that the data distribution is highly concentrated, concentrated in a narrow interval, with a very steep peak.\n\n\n\n\nShow the code\nmoranI_numbers_foreign_monthly &lt;- global_moran(wm_q_numbers_foreign_monthly2019$total_value,                                             wm_q_numbers_foreign_monthly2019$nb,\n            wm_q_numbers_foreign_monthly2019$wt)\n\nglimpse(moranI_numbers_foreign_monthly)\n\n\nList of 2\n $ I: num 0.0803\n $ K: num 14.9\n\n\nFrom the resutl: I = 0.0803 indicates that there is a slight positive spatial autocorrelation and there may be some similarity between adjacent areas.\nK = 14.9 indicates that the data distribution is highly concentrated, concentrated in a narrow interval, with a very steep peak.\n\n\n\n\n\n\n\nShow the code\nmoranI_tourist_stay &lt;- global_moran(wm_q_ratio_tourist_stay_yearly$average_ratio,\n                                    wm_q_ratio_tourist_stay_yearly$nb,\n                                    wm_q_ratio_tourist_stay_yearly $wt)\n\n\nglimpse(moranI_tourist_stay)\n\n\nList of 2\n $ I: num -0.0227\n $ K: num 1.95\n\n\nI = -0.0227: Indicates almost no spatial autocorrelation, or even slight negative spatial autocorrelation. There may be no obvious association or similarity between values ​​in adjacent areas. K = 1.95: Indicates that the data distribution is relatively flat, the data is more scattered, and there are more discrete values ​​or outliers.\n\n\n\n\n\nLocal Tourists yearlyForeign Tourists yearlyLocal Tourists monthlyForeign Tourists monthlyTourists stay yearly\n\n\n\nglobal_moran_test(wm_q_numbers_thai_yearly$total_value,\n                       wm_q_numbers_thai_yearly$nb,\n                       wm_q_numbers_thai_yearly$wt)\n\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = -1.1207, p-value = 0.8688\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n     -0.041986875      -0.012658228       0.000684876 \n\n\n\n\n\nglobal_moran_test(wm_q_numbers_foreign_yearly$total_value,\n                       wm_q_numbers_foreign_yearly$nb,\n                       wm_q_numbers_foreign_yearly$wt)\n\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 1.5378, p-value = 0.06205\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n     0.0151741493     -0.0126582278      0.0003275636 \n\n\n\n\n\nglobal_moran_test(wm_q_numbers_local_monthly2019$total_value,\n                       wm_q_numbers_local_monthly2019$nb,\n                       wm_q_numbers_local_monthly2019$wt)\n\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 1.1047, p-value = 0.1346\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n     0.0082504995     -0.0052356021      0.0001490398 \n\n\n\n\n\nglobal_moran_test(wm_q_numbers_foreign_monthly2019$total_value,\n                       wm_q_numbers_foreign_monthly2019$nb,\n                       wm_q_numbers_foreign_monthly2019$wt)\n\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 7.0478, p-value = 9.09e-13\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n     0.0803207165     -0.0052356021      0.0001473666 \n\n\n\n\n\nglobal_moran_test(wm_q_ratio_tourist_stay_yearly$average_ratio,\n                       wm_q_ratio_tourist_stay_yearly$nb,\n                       wm_q_ratio_tourist_stay_yearly$wt)\n\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = -0.32533, p-value = 0.6275\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n     -0.022706373      -0.012658228       0.000953943 \n\n\n\n\n\nThe data of foreign tourists show significant spatial clustering in certain time frames (such as monthly data), while the spatial distribution of local tourists and stay rates do not show obvious clustering.\n\n\n\nThis is to ensure that the computation is reproducible.\nNext, global_moran_perm() is used to perform Monte Carlo simulation.\n\nLocal Tourists yearlyForeign Tourists yearlyLocal Tourists monthlyForeign Tourists monthlyTourists stay yearly\n\n\n\nset.seed(1234)\nglobal_moran_perm_local_y=global_moran_perm(wm_q_numbers_thai_yearly$total_value,\n                       wm_q_numbers_thai_yearly$nb,\n                       wm_q_numbers_thai_yearly$wt,\n                  nsim = 999)\n\nglobal_moran_perm_local_y \n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = -0.041987, observed rank = 99, p-value = 0.198\nalternative hypothesis: two.sided\n\n\n\n\n\nset.seed(1234)\nglobal_moran_perm_foreign_y=global_moran_perm(wm_q_numbers_foreign_yearly$total_value,\n                       wm_q_numbers_foreign_yearly$nb,\n                       wm_q_numbers_foreign_yearly$wt,\n                  nsim = 99)\n\nglobal_moran_perm_foreign_y \n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 100 \n\nstatistic = 0.015174, observed rank = 88, p-value = 0.24\nalternative hypothesis: two.sided\n\n\n\n\n\nset.seed(1234)\nglobal_moran_perm_local_m=global_moran_perm(wm_q_numbers_local_monthly2019$total_value,\n                       wm_q_numbers_local_monthly2019$nb,\n                       wm_q_numbers_local_monthly2019$wt,\n                  nsim = 999)\n\nglobal_moran_perm_local_m \n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.0082505, observed rank = 874, p-value = 0.252\nalternative hypothesis: two.sided\n\n\n\n\n\nset.seed(1234)\nglobal_moran_perm_foreign_m=global_moran_perm(wm_q_numbers_foreign_monthly2019$total_value,wm_q_numbers_foreign_monthly2019$nb,wm_q_numbers_foreign_monthly2019$wt,\n                  nsim = 999)\n\nglobal_moran_perm_foreign_m\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.080321, observed rank = 1000, p-value &lt; 2.2e-16\nalternative hypothesis: two.sided\n\n\n\nhist(global_moran_perm_foreign_m$res, \n     freq=TRUE, \n     breaks=20, \n     xlab=\"Simulated Moran's I of Annual number of foreign tourists monthly\")\nabline(v=0, \n       col=\"red\") \n\n\n\n\n\n\n\n\n\n\n\nset.seed(1234)\nglobal_moran_perm_stay_y=global_moran_perm(wm_q_ratio_tourist_stay_yearly$average_ratio,\n                       wm_q_ratio_tourist_stay_yearly$nb,\n                       wm_q_ratio_tourist_stay_yearly$wt,\n                  nsim = 999)\n\nglobal_moran_perm_stay_y \n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = -0.022706, observed rank = 444, p-value = 0.888\nalternative hypothesis: two.sided\n\n\n\n\n\nMoran’s I Monte Carlo simulation of monthly foreign visitor data in 2019 shows significant spatial autocorrelation:\nThe simulated Moran’s I value is 0.0803 and the p-value is less than 2.2e-16, which means that the spatial autocorrelation in the data is very significant.\nThe histogram shows the distribution of the Moran’s I statistic generated by the simulation. Most of the simulated values are close to 0, but the actual observed statistic is around 0.08, which shows that the distribution of foreign tourist data has significant positive spatial autocorrelation. That is, adjacent areas have similar numbers of tourists, and tourists may be concentrated in certain areas.\nHowever, for the other indicators such as annual numbers of tourist and stay are not significant,which means these indicators are randomly distributed in various province.\n\n\n\n\nAlthough global analysis can tell us the overall spatial clustering of the data, it cannot point out which specific areas have clustering or anomalies. Local autocorrelation analysis can identify these specific hot spots or cold spots and provide more targeted regional analysis.\nTherefore we will continue our local spatial autocorrelation analysis.\n\n\nii (Local Moran’s I statistic): It reflects the spatial autocorrelation between each spatial unit and its surrounding units. Specifically, a positive ii value indicates that the spatial unit has similar values to its neighboring units (high-high or low-low clustering), while a negative ii value indicates that it has different values from its neighboring units (high-low or low-high inversion).\np_ii_sim: This is the p value associated with the ii value, reflecting the statistical significance calculated by simulation. It is calculated by Monte Carlo method or other randomization tests. If the p_ii_sim value is small (such as &lt; 0.05), it means that the spatial autocorrelation of the spatial unit is statistically significant, and the spatial clustering or inversion is not generated randomly, but there is a certain structure or pattern.\n\nLocal Tourists yearlyForeign Tourists yearlyLocal Tourists monthlyForeign Tourists monthlyComputing Contiguity Spatial Weights using spdepTourists stay yearly\n\n\n\nlisa_numbers_thai_yearly &lt;- wm_q_numbers_thai_yearly %&gt;% \n  mutate(local_moran = local_moran(\n    total_value, nb, wt, nsim = 99),\n         .before = 1) %&gt;%\n  unnest(local_moran)\n\nVisualising local Moran’s I\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\nmap1 &lt;- tm_shape(lisa_numbers_thai_yearly) +\n  tm_fill(\"ii\",\n          style = \"pretty\", \n          palette = \"RdBu\", \n          title = \"local Moran's I statistics\" ) + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8)) +\n  tm_layout(\n    main.title = \"local Moran's I of Annual number of local tourists\",\n    main.title.size = 0.7)\n\nmap2 &lt;- tm_shape(lisa_numbers_thai_yearly) +\n  tm_fill(\"p_ii_sim\",\n          breaks = c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf), \n          palette = \"-Blues\" ) + \n  tm_borders(alpha = 0.5) +\n   tm_layout(main.title = \"p-value of local Moran's I of Annual number of local tourists \",\n            main.title.size = 0.7)\ntmap_arrange(map1, map2, ncol = 2)\n\nVariable(s) \"ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\n\nThe dark red area indicates that the local Moran’s index is negative, indicating that the number of tourists in the area is low and the number of tourists in the surrounding areas is high, showing a low-high spatial pattern. The red area shows strong spatial differences, especially the area south of Bangkok.\nLight blue areas indicate that the local Moran index is positive, indicating that the number of tourists in this area is large, and the number of tourists in the surrounding areas is also large, forming a high-high spatial pattern. This pattern may indicate that these areas are relatively attractive to tourists, especially in central and northern Thailand.\nMost light gray areas indicate that the number of tourists in these areas has no obvious spatial autocorrelation with the surrounding areas, and the number of tourists is relatively evenly distributed.\nSome regions in Thailand show a strong spatial agglomeration effect of tourist arrivals (such as the blue areas in the central and northern parts), while tourist arrivals in other regions are relatively dispersed or have little connection with surrounding areas.\n\n\n\nlisa_numbers_foreign_yearly &lt;- wm_q_numbers_foreign_yearly %&gt;% \n  mutate(local_moran = local_moran(\n    total_value, nb, wt, nsim = 99),\n         .before = 1) %&gt;%\n  unnest(local_moran)\n\nlisa_numbers_foreign_yearly\n\nSimple feature collection with 80 features and 17 fields\nGeometry type: GEOMETRY\nDimension:     XY\nBounding box:  xmin: 98.18107 ymin: 10.95469 xmax: 101.4546 ymax: 15.66074\nGeodetic CRS:  WGS 84\n# A tibble: 80 × 18\n         ii       eii    var_ii   z_ii   p_ii p_ii_sim p_folded_sim skewness\n      &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1  0.0371  -0.00310  0.00237    0.825 0.409      0.42         0.21   -1.03 \n 2  0.0383  -0.00207  0.00317    0.718 0.473      0.54         0.27   -1.68 \n 3  0.0388  -0.00302  0.00236    0.860 0.390      0.52         0.26   -0.845\n 4  0.0387   0.00901  0.00199    0.667 0.504      0.58         0.29   -1.81 \n 5  0.0387  -0.00218  0.00305    0.741 0.459      0.5          0.25   -1.73 \n 6  0.304   -0.746    0.455      1.56  0.119      0.16         0.08    0.860\n 7  0.366    0.00216  0.0705     1.37  0.171      0.24         0.12    1.21 \n 8 -0.00584  0.000774 0.0000110 -1.99  0.0466     0.14         0.07   -1.65 \n 9  0.635   -0.181    0.229      1.70  0.0885     0.12         0.06    1.28 \n10  0.325   -0.00717  0.0594     1.36  0.173      0.16         0.08    1.11 \n# ℹ 70 more rows\n# ℹ 10 more variables: kurtosis &lt;dbl&gt;, mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;,\n#   nb &lt;nb&gt;, wt &lt;list&gt;, ADM1_EN &lt;chr&gt;, year &lt;dbl&gt;, total_value &lt;dbl&gt;,\n#   geometry &lt;POLYGON [°]&gt;\n\n\nVisualising local Moran’s I\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\nmap3 &lt;- tm_shape(lisa_numbers_foreign_yearly) +\n  tm_fill(\"ii\",\n          style = \"pretty\", \n          palette = \"RdBu\", \n          title = \"local Moran's I statistics\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8)) +\n  tm_layout(\n    main.title = \"local Moran's I of Annual number of foreign tourists\",\n    main.title.size = 0.7)\n\nmap4 &lt;- tm_shape(lisa_numbers_foreign_yearly) +\n  tm_fill(\"p_ii_sim\",\n          breaks = c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf), \n          palette = \"-Blues\" ) + \n  tm_borders(alpha = 0.5) +\n   tm_layout(main.title = \"p-value of local Moran's I of Annual number of foreign tourists \",\n            main.title.size = 0.7)\ntmap_arrange(map3, map4, ncol = 2)\n\nVariable(s) \"ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\n\nLight orange and light red areas indicate local negative Moran’s index values. These areas may have a low-high spatial pattern, suggesting that these areas have fewer tourists, but their neighboring areas have more tourists.\nThe tourism pattern of some areas (such as the dark blue area) has a strong spatial agglomeration effect\n\n\n\nlisa_numbers_thai_monthly &lt;- wm_q_numbers_local_monthly2019 %&gt;% \n  mutate(local_moran = local_moran(\n    total_value, nb, wt, nsim = 99),\n         .before = 1) %&gt;%\n  unnest(local_moran)\n\nlisa_numbers_thai_monthly\n\nSimple feature collection with 192 features and 18 fields\nGeometry type: GEOMETRY\nDimension:     XY\nBounding box:  xmin: 98.18107 ymin: 10.95469 xmax: 101.4546 ymax: 15.66074\nGeodetic CRS:  WGS 84\n# A tibble: 192 × 19\n      ii       eii  var_ii  z_ii   p_ii p_ii_sim p_folded_sim skewness kurtosis\n   &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;\n 1 0.171 -0.0213   0.00646  2.39 0.0168     0.02         0.01   -0.317   -0.185\n 2 0.175  0.00809  0.00586  2.17 0.0297     0.02         0.01   -0.686    0.333\n 3 0.172  0.000403 0.00450  2.56 0.0106     0.02         0.01   -0.335    0.313\n 4 0.186 -0.00134  0.00549  2.53 0.0115     0.02         0.01   -0.506   -0.381\n 5 0.183 -0.0109   0.00682  2.35 0.0189     0.02         0.01   -0.368   -0.104\n 6 0.186 -0.0118   0.00703  2.36 0.0184     0.02         0.01   -0.208   -0.187\n 7 0.187 -0.00314  0.00791  2.13 0.0328     0.02         0.01   -0.448   -0.104\n 8 0.190  0.00561  0.00657  2.28 0.0229     0.02         0.01   -0.124   -0.836\n 9 0.188 -0.0148   0.00762  2.32 0.0202     0.02         0.01   -0.470    0.179\n10 0.189  0.00326  0.00787  2.10 0.0360     0.02         0.01   -0.658    0.655\n# ℹ 182 more rows\n# ℹ 10 more variables: mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;, nb &lt;nb&gt;,\n#   wt &lt;list&gt;, ADM1_EN &lt;chr&gt;, year &lt;dbl&gt;, month &lt;dbl&gt;, total_value &lt;dbl&gt;,\n#   geometry &lt;POLYGON [°]&gt;\n\n\nVisualising local Moran’s I\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\nmap5 &lt;- tm_shape(lisa_numbers_thai_monthly) +\n  tm_fill(\"ii\",\n          style = \"pretty\", \n          palette = \"RdBu\", \n          title = \"local Moran's I statistics\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8)) +\n  tm_layout(\n    main.title = \"local Moran's I of Monthly number of local tourists\",\n    main.title.size = 0.7)\n\nmap6 &lt;- tm_shape(lisa_numbers_thai_monthly) +\n  tm_fill(\"p_ii_sim\",\n          breaks = c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf), \n          palette = \"-Blues\") + \n  tm_borders(alpha = 0.5) +\n   tm_layout(main.title = \"p-value of local Moran's I of Monthly number of local tourists \",\n            main.title.size = 0.7)\ntmap_arrange(map5, map6, ncol = 2)\n\nVariable(s) \"ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\n\nThe dark blue areas in the figure indicate high-high agglomeration effects, which may mean that these areas stand out in terms of the number of tourists, etc., while the red areas may be low-high patterns, indicating that these areas do not have the same characteristics as neighboring areas.\n\n\n\nlisa_numbers_foreign_monthly &lt;- wm_q_numbers_foreign_monthly2019 %&gt;% \n  mutate(local_moran = local_moran(\n    total_value, nb, wt, nsim = 99),\n         .before = 1) %&gt;%\n  unnest(local_moran)\n\nlisa_numbers_foreign_monthly\n\nSimple feature collection with 192 features and 18 fields\nGeometry type: GEOMETRY\nDimension:     XY\nBounding box:  xmin: 98.18107 ymin: 10.95469 xmax: 101.4546 ymax: 15.66074\nGeodetic CRS:  WGS 84\n# A tibble: 192 × 19\n       ii       eii  var_ii  z_ii   p_ii p_ii_sim p_folded_sim skewness kurtosis\n    &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;\n 1 0.0765 -0.00442  0.00256  1.60 0.110      0.06         0.03  -0.574   -0.0513\n 2 0.0772 -0.00175  0.00192  1.80 0.0716     0.04         0.02  -0.519   -0.153 \n 3 0.0768  0.000772 0.00208  1.67 0.0956     0.14         0.07  -0.279   -0.453 \n 4 0.0786 -0.00372  0.00259  1.62 0.106      0.08         0.04  -0.475   -0.0874\n 5 0.0786 -0.000677 0.00324  1.39 0.164      0.18         0.09  -0.490   -0.0297\n 6 0.0785  0.00367  0.00197  1.68 0.0921     0.02         0.01  -0.821    0.605 \n 7 0.0762  0.00222  0.00227  1.55 0.120      0.12         0.06  -0.333   -0.690 \n 8 0.0776  0.000580 0.00196  1.74 0.0822     0.08         0.04  -0.288   -0.323 \n 9 0.0774 -0.000973 0.00186  1.82 0.0689     0.1          0.05  -0.0473  -0.519 \n10 0.0784  0.00859  0.00185  1.62 0.104      0.12         0.06  -0.558    0.337 \n# ℹ 182 more rows\n# ℹ 10 more variables: mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;, nb &lt;nb&gt;,\n#   wt &lt;list&gt;, ADM1_EN &lt;chr&gt;, year &lt;dbl&gt;, month &lt;dbl&gt;, total_value &lt;dbl&gt;,\n#   geometry &lt;POLYGON [°]&gt;\n\n\nVisualising local Moran’s I\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\nmap3 &lt;- tm_shape(lisa_numbers_foreign_monthly) +\n  tm_fill(\"ii\",\n          style = \"pretty\", \n          palette = \"RdBu\", \n          title = \"local Moran's I statistics\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8)) +\n  tm_layout(\n    main.title = \"local Moran's I of Monthly number of foreign tourists\",\n    main.title.size = 0.7)\n\nmap4 &lt;- tm_shape(lisa_numbers_thai_monthly) +\n  tm_fill(\"p_ii_sim\",\n          breaks = c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf), \n          palette = \"-Blues\") + \n  tm_borders(alpha = 0.5) +\n   tm_layout(main.title = \"p-value of local Moran's I of Monthly number of foreign tourists \",\n            main.title.size = 0.7)\ntmap_arrange(map3, map4, ncol = 2)\n\nVariable(s) \"ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\n\nThe distribution of local tourists in 2019 showed a certain degree of spatial autocorrelation, with some areas (such as the light orange color area) showing a sparse number of tourists and a concentration in the surrounding areas.\nThe spatial autocorrelation of foreign tourists was more significant, especially in the central region, where foreign tourists were concentrated, while other areas were sparsely distributed, showing a strong spatial agglomeration effect.\nHere we are using the spdep package for additional Local spatial autocorrelation analysis\n\n\n\ndecember_data &lt;- tourist_numbers_2019_foreign_monthly %&gt;%\n  filter(month == 12)\n\n\nwm_q &lt;- poly2nb(december_data, \n                queen=TRUE)\n\n\nsaveRDS(wm_q,\"data/rds/wm_q.rds\")\n\n\nwm_q &lt;- readRDS(\"data/rds/wm_q.rds\")\n\n\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 16 \nNumber of nonzero links: 58 \nPercentage nonzero weights: 22.65625 \nAverage number of links: 3.625 \nLink number distribution:\n\n1 2 3 4 5 6 7 \n2 2 4 3 3 1 1 \n2 least connected regions:\n9 11 with 1 link\n1 most connected region:\n4 with 7 links\n\n\nOn average, each region has 54.5 neighbors, but some regions have fewer connections (e.g., only 12 neighbors) and others have more connections (e.g., 95 neighbors).\n10464 non-zero connections indicate that most regions are neighbors (28.38542% of possible region pairs)\nThe spatial neighbor relationship is converted into a standardized spatial weight matrix in order to prepare for the subsequent spatial autocorrelation analysis.\n\nrswm_q &lt;- nb2listw(wm_q, \n                   style=\"W\", \n                   zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 16 \nNumber of nonzero links: 58 \nPercentage nonzero weights: 22.65625 \nAverage number of links: 3.625 \n\nWeights style: W \nWeights constants summary:\n   n  nn S0       S1       S2\nW 16 256 16 10.39167 68.28294\n\n\nThis code uses the local Moran’s I method to analyze the local spatial autocorrelation of each region in the december_data dataset. By observing the Z-score and p-value in the results, we can determine which regions are spatially significantly correlated with their neighbors. This can help identify spatial clusters or discrete areas.\n\nfips &lt;- order(december_data$ADM1_EN)\nlocalMI &lt;- localmoran(december_data$total_value, rswm_q)\nhead(localMI)\n\n           Ii         E.Ii      Var.Ii       Z.Ii Pr(z != E(Ii))\n1  0.07125353 -0.007368153 0.033434805  0.4299748     0.66721401\n2 -1.07176832 -0.990483093 0.021545910 -0.5537697     0.57973645\n3  0.07971451 -0.004133874 0.018819588  0.6112089     0.54106130\n4 -0.10611081 -0.006677720 0.008663677 -1.0682670     0.28540011\n5 -0.24855223 -0.005995100 0.018728784 -1.7723898     0.07632987\n6 -0.19754957 -0.003888768 0.012174313 -1.7551713     0.07923002\n\n\n\ndecember_data.localMI &lt;- cbind(december_data,localMI) %&gt;%\n  rename(Pr.Ii = Pr.z....E.Ii..)\n\n\ndecember_data.localMI &lt;- cbind(december_data,localMI) %&gt;%\n  rename(Pr.Ii = Pr.z....E.Ii..)\n\nList the content of the local Moran matrix\n\nprintCoefmat(data.frame(\n  localMI[fips,], \n  row.names=december_data$ADM1_EN[fips]),\n  check.names=FALSE)\n\n                                  Ii        E.Ii      Var.Ii        Z.Ii\nAng Thong                 7.1254e-02 -7.3682e-03  3.3435e-02  4.2997e-01\nBangkok                  -1.0718e+00 -9.9048e-01  2.1546e-02 -5.5377e-01\nKanchanaburi              7.9715e-02 -4.1339e-03  1.8820e-02  6.1121e-01\nNakhon Pathom            -1.0611e-01 -6.6777e-03  8.6637e-03 -1.0683e+00\nNonthaburi               -2.4855e-01 -5.9951e-03  1.8729e-02 -1.7724e+00\nPathum Thani             -1.9755e-01 -3.8888e-03  1.2174e-02 -1.7552e+00\nPhetchaburi               5.3820e-02 -3.4386e-03  1.5665e-02  4.5748e-01\nPhra Nakhon Si Ayutthaya -5.7268e-03 -2.3771e-05  4.0749e-05 -8.9340e-01\nPrachuap Khiri Khan       1.6534e-02 -3.5333e-04  5.6513e-03  2.2464e-01\nRatchaburi                9.1602e-02 -6.6681e-03  1.5140e-02  7.9866e-01\nSamut Prakan             -7.6581e-01 -2.6316e-03  4.1994e-02 -3.7242e+00\nSamut Sakhon             -2.4193e-01 -7.4242e-03  2.3160e-02 -1.5409e+00\nSamut Songkhram           9.4104e-02 -6.9070e-03  3.1357e-02  5.7043e-01\nSaraburi                  3.3588e-02 -6.0695e-03  4.4814e-02  1.8734e-01\nSing Buri                 1.1032e-01 -7.4487e-03  5.4921e-02  5.0251e-01\nSuphan Buri               7.9500e-02 -7.1552e-03  1.6238e-02  6.8003e-01\n                         Pr.z....E.Ii..\nAng Thong                        0.6672\nBangkok                          0.5797\nKanchanaburi                     0.5411\nNakhon Pathom                    0.2854\nNonthaburi                       0.0763\nPathum Thani                     0.0792\nPhetchaburi                      0.6473\nPhra Nakhon Si Ayutthaya         0.3716\nPrachuap Khiri Khan              0.8223\nRatchaburi                       0.4245\nSamut Prakan                     0.0002\nSamut Sakhon                     0.1233\nSamut Songkhram                  0.5684\nSaraburi                         0.8514\nSing Buri                        0.6153\nSuphan Buri                      0.4965\n\n\nIi: This is the local Moran’s I statistic. If Ii is positive, it means that there is a positive correlation between the region and its neighboring regions (hot spot), and if it is negative, it means that there is a negative correlation between the region and its neighboring regions (cold spot or outlier)\nFor example, Ratchaburi’s Ii is 9.1602e-02, indicating that the number of foreign tourists in this area shows positive spatial autocorrelation in space, and it may be a hot spot.\nOn the contrary, Bangkok’s Ii is -1.0718e+00, indicating that the number of foreign tourists in this area and its neighbors shows negative spatial correlation, and it may be a cold spot or outlier.\n\n\n\nnci &lt;- moran.plot(december_data$total_value, rswm_q,\n                  labels=as.character(december_data$ADM1_EN), \n                  xlab=\"Foreign tourists 2019.12\", \n                  ylab=\"Spatially Lag Foreign tourists 2019.12\")\n\n\n\n\n\n\n\n\n\n\n\n\ndecember_data$Z.Total_value &lt;- scale(december_data$total_value) %&gt;% \n  as.vector \n\n\nnci2 &lt;- moran.plot(december_data$Z.Total_value, rswm_q,\n                   labels=as.character(december_data$ADM1_EN),\n                   xlab=\"Z.Total_value 2019.12\", \n                   ylab=\"Spatially Lag z-Total_value 2019.12\")\n\n\n\n\n\n\n\n\nIn both cases: Regression line: The regression line shows the general trend between the number of tourists and the number of spatially lagged tourists. Here, the slope of the regression line is very small and almost horizontal, indicating that the number of foreign tourists overall is not strongly correlated with the number of tourists in its neighboring areas.\n\n\n\nThe dotted lines in the figure divide the scatter plot into four quadrants to help us identify “hot spots” and “cold spots”:\n“High-High” (upper right): The number of tourists and the number of tourists in its neighbors are both high, representing a potential “hot spot” area.\n“Low-High” (upper left): There are few tourists in this area, but many tourists in its neighbors, which may be a spatial outlier or transition area.\n“Low-Low” (lower left): There are few tourists and few tourists in its neighbors, which may be a “cold spot”.\n“High-Low” (lower right): There are many tourists in this area, but few tourists in its neighbors, which may be a spatial outlier\nWe can see that most of the points are concentrated in the lower left corner, indicating that these areas and their neighboring areas have relatively few tourists. “Bangkok” and Samut Prakan are located in the lower right corner and above, respectively, indicating that:\nBangkok has a very large number of foreign tourists, but its neighboring areas have relatively few tourists.\nThe neighboring areas of the Samut Prakan area have more tourists, while the area itself has fewer tourists.\n\n\n\nPrepare a LISA cluster map\n\nquadrant &lt;- vector(mode=\"numeric\",length=nrow(localMI))\n\nderives the spatially lagged variable of interest (i.e. GDPPC) and centers the spatially lagged variable around its mean.\n\ndecember_data$lag_total_value &lt;- lag.listw(rswm_q, december_data$total_value)\nDV &lt;- december_data$lag_total_value - mean(december_data$lag_total_value)     \n\nThis is follow by centering the local Moran’s around the mean.\n\nLM_I &lt;- localMI[,1] - mean(localMI[,1])    \n\nNext, we will set a statistical significance level for the local Moran.\n\nsignif &lt;- 0.05 \n\nThese four command lines define the low-low (1), low-high (2), high-low (3) and high-high (4) categories.\n\nquadrant[DV &lt;0 & LM_I&gt;0] &lt;- 1\nquadrant[DV &gt;0 & LM_I&lt;0] &lt;- 2\nquadrant[DV &lt;0 & LM_I&lt;0] &lt;- 3  \nquadrant[DV &gt;0 & LM_I&gt;0] &lt;- 4      \n\nLastly, places non-significant Moran in the category 0.\n\nquadrant[localMI[,5]&gt;signif] &lt;- 0\n\nIn fact, we can combined all the steps into one single code chunk as shown below:\n\nquadrant &lt;- vector(mode=\"numeric\",length=nrow(localMI))\ndecember_data$lag_total_value &lt;- lag.listw(rswm_q, december_data$total_value)\nDV &lt;- december_data$lag_total_value - mean(december_data$lag_total_value)     \nLM_I &lt;- localMI[,1]   \nsignif &lt;- 0.05       \nquadrant[DV &lt;0 & LM_I&gt;0] &lt;- 1\nquadrant[DV &gt;0 & LM_I&lt;0] &lt;- 2\nquadrant[DV &lt;0 & LM_I&lt;0] &lt;- 3  \nquadrant[DV &gt;0 & LM_I&gt;0] &lt;- 4    \nquadrant[localMI[,5]&gt;signif] &lt;- 0\n\n\n\n\n\ndecember_data.localMI$quadrant &lt;- quadrant\ncolors &lt;- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters &lt;- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\ntm_shape(december_data.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\n\n\n\n\n\n\n\nThis means that Samut Prakan itself may not be attractive, resulting in low tourist numbers, but its neighboring areas such as Bangkok are relatively popular, attracting more tourists.\n\n\n\n\nlisa_numbers_ratio_tourist_stay_yearly &lt;- wm_q_ratio_tourist_stay_yearly %&gt;% \n  mutate(local_moran = local_moran(\n    average_ratio, nb, wt, nsim = 99),\n         .before = 1) %&gt;%\n  unnest(local_moran)\n\nVisualising local Moran’s I\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\nmap9 &lt;- tm_shape(lisa_numbers_ratio_tourist_stay_yearly) +\n  tm_fill(\"ii\",\n          style = \"pretty\", \n          palette = \"RdBu\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8)) +\n  tm_layout(\n    main.title = \"local Moran's I of Annual Ratio Tourists\",\n    main.title.size = 0.7)\n\nmap10 &lt;- tm_shape(lisa_numbers_ratio_tourist_stay_yearly) +\n  tm_fill(\"p_ii_sim\",\n          breaks = c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf), \n          palette = \"-Blues\") + \n  tm_borders(alpha = 0.5) +\n   tm_layout(main.title = \"p-value of local Moran's I of Annual Ratio Tourists\",\n            main.title.size = 0.7)\ntmap_arrange(map9, map10, ncol = 2)\n\nVariable(s) \"ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\n\nThe left map indicates that blue areas indicate positive local Moran’s index, which means that the stay rates in these areas are similar to those in the surrounding areas, and these areas may be clusters of higher stay rates.\nlight red areas indicate negative local Moran’s index, which means that the stay rates in these areas are different from those in the surrounding areas, and may form isolated areas of low stay rates.\nAreas with neutral colors (close to 0) indicate that there is no significant spatial autocorrelation and the distribution of stay rates is relatively random.\nHowever the right map indicates that the stay rates in these areas have no obvious spatial dependence or agglomeration.\n\n\n\n\n\n\nThrough the analysis of Local Moran’s I and p values, tourism activities in central Thailand (especially Bangkok and its surrounding areas) show significant autocorrelation and clustering effects in space.\nThe data of local and foreign tourists in Bangkok and surrounding areas show a significant tourist clustering effect. The annual and monthly tourist data show that Bangkok is not only a major tourist destination, but surrounding provinces such as Pathum Thani and Nonthaburi are also important tourist hubs.\nThe high stay ratio of tourists in southern provinces such as Nakhon Si Thammarat and Songkhla indicates that these areas may be popular places for vacations and long-term stays.\n\n\n\n\nAn analytical method for detecting spatial and spatiotemporal patterns, often used to identify hot spots and cold spots in geographic areas or data. It can not only identify current hot and cold spots, but also discover emerging, persistent, declining or temporary hot and cold spots by analyzing trends over time.\nMain Types of EHSA：\nPersistent Hot Spot: An area that has been a hot spot for the entire time period.\nEmerging Hot Spot: An area that has recently become a hot spot, perhaps due to some event or trend.\nDiminishing Hot Spot: An area that was a hot spot but is losing its influence.\nRebounding Hot Spot: An area that was a hot spot before, then disappeared or weakened, but has become a hot spot again.\nSporadic Hot Spot: An area that is sometimes a hot spot and sometimes not during a time period.\nCold Spot: The opposite of a hot spot, a cold spot indicates that the area has a low value for a period of time, and may represent a low activity or low density area of ​​a phenomenon.\n\nLocal Tourists yearlyLocal Tourists monthlyForeign Tourists monthlyTourists stay ratio\n\n\nComputing Gi*\nA method in geospatial statistics used to identify hot spots and cold spots in spatial data. It is a local spatial autocorrelation statistic used to detect whether there is a significant clustering pattern within a given spatial unit (such as a geographic area), that is, whether the value of the area is significantly higher or lower than its surrounding neighboring areas.\n\ntourist_numbers_thai_yearly_st2 &lt;- tourist_numbers_thai_yearly_st %&gt;%\n  activate(\"geometry\")\n\ntourist_numbers_thai_yearly_st_nb &lt;- tourist_numbers_thai_yearly_st2 %&gt;%\n  mutate(\n    centroid = st_centroid(geometry),\n    nb = include_self(st_contiguity(geometry)), \n    wt = st_inverse_distance(nb, centroid, scale = 1, alpha = 1),  \n    .before = 1\n  ) %&gt;%\n  set_nbs(\"nb\") %&gt;%\n  set_wts(\"wt\")\n\n\ngi_stars_tourist_numbers_thai_yearly &lt;- tourist_numbers_thai_yearly_st_nb %&gt;% \n  group_by(year) %&gt;% \n  mutate(\n    gi_star = local_gstar_perm(total_value,nb,wt)\n  ) %&gt;% \n  tidyr::unnest(gi_star)\n\nMann-Kendall Test A monotonic series or function is one that only increases (or decreases) and never changes direction. So long as the function either stays flat or continues to increase, it is monotonic.\nH0: No monotonic trend\nH1: Monotonic trend is present\nInterpretation\nReject the null-hypothesis null if the p-value is smaller than the alpha value (i.e. 1-confident level) Tau ranges between -1 and 1 where:\n-1 is a perfectly decreasing series, and\n1 is a perfectly increasing series.\nMann-Kendall Test on Gi\nWith these Gi* measures we can then evaluate each location for a trend using the Mann-Kendall test. The code chunk below uses Bangkok.\n\nbkg &lt;- gi_stars_tourist_numbers_thai_yearly %&gt;% \n  ungroup() %&gt;% \n  filter(ADM1_EN == \"Bangkok\") %&gt;% \n  select(ADM1_EN, year, gi_star)\n\n\nggplot(data = bkg, \n       aes(x = year, \n           y = gi_star)) +\n  geom_line() +\n  theme_light()\n\n\n\n\n\n\n\n\nPrinting Mann-Kendall test report\n\nbkg %&gt;%\n  summarise(mk = list(\n    unclass(\n      Kendall::MannKendall(gi_star)))) %&gt;% \n  tidyr::unnest_wider(mk)\n\n# A tibble: 1 × 5\n    tau     sl     S     D  varS\n  &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1    -1 0.0275   -10    10  16.7\n\n\nFrom the above result, sl is the p-value &lt; 0.05. With reference to the results, we will reject the hypothesis null and tau=-1 infer that a downward trend.\nMann-Kendall test data.frame\nWe can replicate this for each location by using group_by() of dplyr package.\n\nehsa_tourist_numbers_thai_yearly &lt;- gi_stars_tourist_numbers_thai_yearly %&gt;%\n  group_by(ADM1_EN) %&gt;%\n  summarise(mk = list(\n    unclass(\n      Kendall::MannKendall(gi_star)))) %&gt;%\n  tidyr::unnest_wider(mk)\nhead(ehsa_tourist_numbers_thai_yearly)\n\n# A tibble: 6 × 6\n  ADM1_EN          tau     sl     S     D  varS\n  &lt;chr&gt;          &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 Ang Thong     -0.400 0.462     -4    10  16.7\n2 Bangkok       -1     0.0275   -10    10  16.7\n3 Kanchanaburi   0.800 0.0864     8    10  16.7\n4 Nakhon Pathom -0.800 0.0864    -8    10  16.7\n5 Nonthaburi    -1     0.0275   -10    10  16.7\n6 Pathum Thani  -1     0.0275   -10    10  16.7\n\n\nWe can also sort to show significant emerging hot/cold spots\n\nemerging &lt;- ehsa_tourist_numbers_thai_yearly %&gt;% \n  arrange(sl, abs(tau)) %&gt;% \n  slice(1:10)\nhead(emerging)\n\n# A tibble: 6 × 6\n  ADM1_EN               tau     sl     S     D  varS\n  &lt;chr&gt;               &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 Phetchaburi             1 0.0275    10    10  16.7\n2 Prachuap Khiri Khan     1 0.0275    10    10  16.7\n3 Bangkok                -1 0.0275   -10    10  16.7\n4 Nonthaburi             -1 0.0275   -10    10  16.7\n5 Pathum Thani           -1 0.0275   -10    10  16.7\n6 Samut Prakan           -1 0.0275   -10    10  16.7\n\n\nPerforming Emerging Hotspot Analysis\n\nehsa_tourist_numbers_thai_yearly &lt;- emerging_hotspot_analysis(\n  x = tourist_numbers_thai_yearly_st_nb, \n  .var = \"total_value\", \n  k = 1, \n  nsim = 99,\n  nb_col = \"nb\",  \n  wt_col = \"wt\"\n)\n\n\nggplot(data = ehsa_tourist_numbers_thai_yearly,\n       aes(x = classification)) +\n  geom_bar()\n\n\n\n\n\n\n\n\nNo Pattern Detected: Most areas (12.5) show no significant spatial hot or cold spot patterns. This shows that in these areas, the data does not show a specific hot or cold spot trend, and may be areas where changes are relatively uniform.\nSporadic Coldspot: There are some areas (around 1-2) that exhibit an intermittent coldspot pattern, which means that these areas exhibit lower values during certain periods of time that are not as good as their surroundings. Significantly.\nSporadic Hotspot: There are a few areas (approximately 1-2) that exhibit an intermittent hotspot pattern, meaning that these areas exhibit higher values during certain periods of time, showing contrast with their surroundings.\nVisualising EHSA\n\nb1_filtered_ehsa &lt;- b1_filtered %&gt;%\n  left_join(ehsa_tourist_numbers_thai_yearly,\n            by = join_by(ADM1_EN == location))\n\n\nb1_filtered_sig &lt;- b1_filtered_ehsa %&gt;%\n  filter(p_value &gt; 0.5)  \n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(b1_filtered_ehsa) +\n  tm_polygons(\"classification\") + \n  tm_borders(alpha = 0.5) +\n  tm_shape(b1_filtered_sig) +\n  tm_borders(alpha = 0.4)\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n\n\n\n\n\n\n\n\n\nThe yellow area represents the sporadic cold spot, which means that in these areas, the tourist stay rate shows a lower value at certain times, and this phenomenon is not continuous, but sporadic. Therefore, the number of the tourists in these areas is lower than that in the surrounding areas.\nThe purple area represents the sporadic hot spot, which means that these areas have a higher number of tourists at certain times, but this high stay rate phenomenon is also sporadic, not continuous. This shows that the tourist stay rate in these areas is higher than that in the surrounding areas, but this phenomenon is not fixed.\n\n\n\ntourist_numbers_local_monthly2019_st2 &lt;- tourist_numbers_local_monthly2019_st %&gt;%\n  activate(\"geometry\")\n\ntourist_numbers_local_monthly_st_nb &lt;- tourist_numbers_local_monthly2019_st2 %&gt;%\n  mutate(\n    centroid = st_centroid(geometry),\n    nb = include_self(st_contiguity(geometry)), \n    wt = st_inverse_distance(nb, centroid, scale = 1, alpha = 1),  \n    .before = 1\n  ) %&gt;%\n  set_nbs(\"nb\") %&gt;%\n  set_wts(\"wt\")\n\n\ngi_stars_tourist_numbers_local_monthly &lt;- tourist_numbers_local_monthly_st_nb %&gt;% \n  group_by(month) %&gt;% \n  mutate(\n    gi_star = local_gstar_perm(total_value,nb,wt)\n  ) %&gt;% \n  tidyr::unnest(gi_star)\n\n\nbkglm &lt;- gi_stars_tourist_numbers_local_monthly %&gt;% \n  ungroup() %&gt;% \n  filter(ADM1_EN == \"Bangkok\") %&gt;% \n  select(ADM1_EN, month, gi_star)\n\n\nggplot(data = bkglm, \n       aes(x = month, \n           y = gi_star)) +\n  geom_line() +\n  theme_light()\n\n\n\n\n\n\n\n\nPrinting Mann-Kendall test report\n\nbkglm %&gt;%\n  summarise(mk = list(\n    unclass(\n      Kendall::MannKendall(gi_star)))) %&gt;% \n  tidyr::unnest_wider(mk)\n\n# A tibble: 1 × 5\n     tau    sl     S     D  varS\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 -0.364 0.115   -24  66.0  213.\n\n\nFrom the above result, sl is the p-value &gt; 0.05. With reference to the results, we will not reject the hypothesis null but we can see that a downward trend at the end of 2019,which means the epidemic indeed affect the number of the foreign tourists.\nMann-Kendall test data.frame We can replicate this for each location by using group_by() of dplyr package.\n\nehsa_tourist_numbers_local_month &lt;- gi_stars_tourist_numbers_local_monthly %&gt;%\n  group_by(ADM1_EN) %&gt;%\n  summarise(mk = list(\n    unclass(\n      Kendall::MannKendall(gi_star)))) %&gt;%\n  tidyr::unnest_wider(mk)\nhead(ehsa_tourist_numbers_local_month)\n\n# A tibble: 6 × 6\n  ADM1_EN           tau      sl     S     D  varS\n  &lt;chr&gt;           &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 Ang Thong     -0.273  0.244     -18  66.0  213.\n2 Bangkok       -0.364  0.115     -24  66.0  213.\n3 Kanchanaburi   0.667  0.00319    44  66.0  213.\n4 Nakhon Pathom -0.0303 0.945      -2  66.0  213.\n5 Nonthaburi    -0.515  0.0236    -34  66.0  213.\n6 Pathum Thani  -0.455  0.0467    -30  66.0  213.\n\n\nWe can also sort to show significant emerging hot/cold spots\n\nemerging &lt;- ehsa_tourist_numbers_local_month %&gt;% \n  arrange(sl, abs(tau)) %&gt;% \n  slice(1:10)\nhead(emerging)\n\n# A tibble: 6 × 6\n  ADM1_EN         tau      sl     S     D  varS\n  &lt;chr&gt;         &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 Kanchanaburi  0.667 0.00319    44  66.0  213.\n2 Saraburi      0.667 0.00319    44  66.0  213.\n3 Suphan Buri   0.606 0.00749    40  66.0  213.\n4 Nonthaburi   -0.515 0.0236    -34  66.0  213.\n5 Samut Prakan -0.485 0.0335    -32  66.0  213.\n6 Pathum Thani -0.455 0.0467    -30  66.0  213.\n\n\nPerforming Emerging Hotspot Analysis\n\nehsa_tourist_numbers_local_month &lt;- emerging_hotspot_analysis(\n  x = tourist_numbers_local_monthly_st_nb, \n  .var = \"total_value\", \n  k = 1, \n  nsim = 99,\n  nb_col = \"nb\",  \n  wt_col = \"wt\"        \n)\n\n\nggplot(data = ehsa_tourist_numbers_local_month,\n       aes(x = classification)) +\n  geom_bar()\n\n\n\n\n\n\n\n\nNo Pattern Detected: Most areas show no significant spatial hot or cold spot patterns. This shows that in these areas, the data does not show a specific hot or cold spot trend, and may be areas where changes are relatively uniform.\nSporadic Coldspot: There are some areas (around 2) that exhibit an intermittent coldspot pattern, which means that these areas exhibit lower values during certain periods of time that are not as good as their surroundings. Significantly.\nSporadic Hotspot: There are a few areas (approximately 3) that exhibit an intermittent hotspot pattern, meaning that these areas exhibit higher values during certain periods of time, showing contrast with their surroundings.\nVisualising EHSA\n\nb1_filtered_ehsa_lm &lt;- b1_filtered %&gt;%\n  left_join(ehsa_tourist_numbers_local_month,\n            by = join_by(ADM1_EN == location))\n\n\nb1_filtered_sig_lm &lt;- b1_filtered_ehsa_lm %&gt;%\n  filter(p_value &lt; 0.5)  \n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(b1_filtered_ehsa_lm) +\n  tm_polygons(\"classification\") + \n  tm_borders(alpha = 0.5) +\n  tm_shape(b1_filtered_sig_lm) +\n  tm_borders(alpha = 0.4)\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n\n\n\n\n\n\n\n\n\n\n\n\ntourist_numbers_froeign_monthly2019_st2 &lt;- tourist_numbers_froeign_monthly2019_st %&gt;%\n  activate(\"geometry\")\n\ntourist_numbers_froeign_monthly_st_nb &lt;- tourist_numbers_froeign_monthly2019_st2 %&gt;%\n  mutate(\n    centroid = st_centroid(geometry),\n    nb = include_self(st_contiguity(geometry)), \n    wt = st_inverse_distance(nb, centroid, scale = 1, alpha = 1),  \n    .before = 1\n  ) %&gt;%\n  set_nbs(\"nb\") %&gt;%\n  set_wts(\"wt\")\n\n\ngi_stars_tourist_numbers_froeign_monthly &lt;- tourist_numbers_froeign_monthly_st_nb %&gt;% \n  group_by(month) %&gt;% \n  mutate(\n    gi_star = local_gstar_perm(total_value,nb,wt)\n  ) %&gt;% \n  tidyr::unnest(gi_star)\n\n\nbkgm &lt;- gi_stars_tourist_numbers_froeign_monthly %&gt;% \n  ungroup() %&gt;% \n  filter(ADM1_EN == \"Bangkok\") %&gt;% \n  select(ADM1_EN, month, gi_star)\n\n\nggplot(data = bkgm, \n       aes(x = month, \n           y = gi_star)) +\n  geom_line() +\n  theme_light()\n\n\n\n\n\n\n\n\nPrinting Mann-Kendall test report\n\nbkgm %&gt;%\n  summarise(mk = list(\n    unclass(\n      Kendall::MannKendall(gi_star)))) %&gt;% \n  tidyr::unnest_wider(mk)\n\n# A tibble: 1 × 5\n     tau     sl     S     D  varS\n   &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 -0.576 0.0112   -38  66.0  213.\n\n\nFrom the above result, sl is the p-value &lt; 0.05. With reference to the results, we will reject the hypothesis null and tau &lt; 0 infer that a downward trend.\nMann-Kendall test data.frame We can replicate this for each location by using group_by() of dplyr package.\n\nehsa_tourist_numbers_foreign_month &lt;- gi_stars_tourist_numbers_froeign_monthly %&gt;%\n  group_by(ADM1_EN) %&gt;%\n  summarise(mk = list(\n    unclass(\n      Kendall::MannKendall(gi_star)))) %&gt;%\n  tidyr::unnest_wider(mk)\nhead(ehsa_tourist_numbers_foreign_month)\n\n# A tibble: 6 × 6\n  ADM1_EN           tau     sl     S     D  varS\n  &lt;chr&gt;           &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 Ang Thong      0.212  0.373     14  66.0  213.\n2 Bangkok       -0.576  0.0112   -38  66.0  213.\n3 Kanchanaburi   0.0606 0.837      4  66.0  213.\n4 Nakhon Pathom  0.0909 0.732      6  66.0  213.\n5 Nonthaburi     0.0606 0.837      4  66.0  213.\n6 Pathum Thani   0.182  0.451     12  66.0  213.\n\n\nWe can also sort to show significant emerging hot/cold spots\n\nemerging &lt;- ehsa_tourist_numbers_foreign_month %&gt;% \n  arrange(sl, abs(tau)) %&gt;% \n  slice(1:10)\nhead(emerging)\n\n# A tibble: 6 × 6\n  ADM1_EN                     tau      sl     S     D  varS\n  &lt;chr&gt;                     &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 Saraburi                  0.636 0.00493    42  66.0  213.\n2 Bangkok                  -0.576 0.0112    -38  66.0  213.\n3 Samut Prakan             -0.455 0.0467    -30  66.0  213.\n4 Ang Thong                 0.212 0.373      14  66.0  213.\n5 Pathum Thani              0.182 0.451      12  66.0  213.\n6 Phra Nakhon Si Ayutthaya  0.152 0.537      10  66.0  213.\n\n\nPerforming Emerging Hotspot Analysis\n\nehsa_tourist_numbers_foreign_month &lt;- emerging_hotspot_analysis(\n  x = tourist_numbers_froeign_monthly_st_nb, \n  .var = \"total_value\", \n  k = 1, \n  nsim = 99,\n  nb_col = \"nb\",  \n  wt_col = \"wt\"        \n)\n\n\nggplot(data = ehsa_tourist_numbers_foreign_month,\n       aes(x = classification)) +\n  geom_bar()\n\n\n\n\n\n\n\n\nNo pattern detected: This is the largest category, with more than 10 areas with no significant pattern detected.\nSporadic coldspot: This type of area ranks second, with about 3 areas classified as sporadic coldspots, indicating that there are significantly lower values than the surrounding areas during certain periods.\nSporadic hotspot: About 2 areas are classified as sporadic hotspots, indicating that these areas have significantly higher values than the surrounding areas during certain periods.\nPersistent hotspot: Almost few areas in this figure are detected as persistent hotspots, indicating that there are very few areas in this category.\nVisualising EHSA\n\nb1_filtered_ehsa_fm &lt;- b1_filtered %&gt;%\n  left_join(ehsa_tourist_numbers_foreign_month,\n            by = join_by(ADM1_EN == location))\n\n\nb1_filtered_sig_fm &lt;- b1_filtered_ehsa_fm %&gt;%\n  filter(p_value &lt; 0.5)  \n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(b1_filtered_ehsa_fm) +\n  tm_polygons(\"classification\") + \n  tm_borders(alpha = 0.5) +\n  tm_shape(b1_filtered_sig_fm) +\n  tm_borders(alpha = 0.4)\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n\n\n\n\n\n\n\n\n\n\n\n\nratio_tourist_stay_yearly_st2 &lt;- ratio_tourist_stay_yearly_st %&gt;%\n  activate(\"geometry\")\n\nratio_tourist_stay_yearly_st_nb &lt;- ratio_tourist_stay_yearly_st2 %&gt;%\n  mutate(\n    centroid = st_centroid(geometry),\n    nb = include_self(st_contiguity(geometry)), \n    wt = st_inverse_distance(nb, centroid, scale = 1, alpha = 1),  \n    .before = 1\n  ) %&gt;%\n  set_nbs(\"nb\") %&gt;%\n  set_wts(\"wt\")\n\n\ngi_stars_ratio_tourist_stay_yearly &lt;- ratio_tourist_stay_yearly_st_nb %&gt;% \n  group_by(year) %&gt;% \n  mutate(\n    gi_star = local_gstar_perm(average_ratio,nb,wt)\n  ) %&gt;% \n  tidyr::unnest(gi_star)\n\n\nbkgry &lt;- gi_stars_ratio_tourist_stay_yearly %&gt;% \n  ungroup() %&gt;% \n  select(ADM1_EN, year, gi_star)\n\n\nggplot(data = bkgry, \n       aes(x = year, \n           y = gi_star)) +\n  geom_line() +\n  theme_light()\n\n\n\n\n\n\n\n\nPrinting Mann-Kendall test report\n\nbkgry %&gt;%\n  summarise(mk = list(\n    unclass(\n      Kendall::MannKendall(gi_star)))) %&gt;% \n  tidyr::unnest_wider(mk)\n\n# A tibble: 1 × 5\n      tau    sl     S     D   varS\n    &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;\n1 -0.0576 0.452  -182 3160. 57933.\n\n\nn the above result, sl is the p-value &gt; 0.05. With reference to the results, we will reject the hypothesis null and infer that a downward trend.\nMann-Kendall test data.frame We can replicate this for each location by using group_by() of dplyr package.\n\nehsa_ratio_tourist_stay_yearly &lt;- gi_stars_ratio_tourist_stay_yearly %&gt;%\n  group_by(ADM1_EN) %&gt;%\n  summarise(mk = list(\n    unclass(\n      Kendall::MannKendall(gi_star)))) %&gt;%\n  tidyr::unnest_wider(mk)\nhead(ehsa_ratio_tourist_stay_yearly)\n\n# A tibble: 6 × 6\n  ADM1_EN          tau     sl     S     D  varS\n  &lt;chr&gt;          &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 Ang Thong     -0.800 0.0864    -8    10  16.7\n2 Bangkok        0     1          0    10  16.7\n3 Kanchanaburi  -0.400 0.462     -4    10  16.7\n4 Nakhon Pathom -0.800 0.0864    -8    10  16.7\n5 Nonthaburi     0     1          0    10  16.7\n6 Pathum Thani   0.400 0.462      4    10  16.7\n\n\nWe can also sort to show significant emerging hot/cold spots\n\nemerging &lt;- ehsa_ratio_tourist_stay_yearly %&gt;% \n  arrange(sl, abs(tau)) %&gt;% \n  slice(1:10)\nhead(emerging)\n\n# A tibble: 6 × 6\n  ADM1_EN                     tau     sl     S     D  varS\n  &lt;chr&gt;                     &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 Prachuap Khiri Khan       1     0.0275    10    10  16.7\n2 Suphan Buri              -1     0.0275   -10    10  16.7\n3 Ang Thong                -0.800 0.0864    -8    10  16.7\n4 Nakhon Pathom            -0.800 0.0864    -8    10  16.7\n5 Sing Buri                -0.800 0.0864    -8    10  16.7\n6 Phra Nakhon Si Ayutthaya -0.600 0.221     -6    10  16.7\n\n\nPerforming Emerging Hotspot Analysis\n\nehsa_ratio_tourist_stay_yearly &lt;- emerging_hotspot_analysis(\n  x = ratio_tourist_stay_yearly_st_nb, \n  .var = \"average_ratio\", \n  k = 1, \n  nsim = 99,\n  nb_col = \"nb\",  \n  wt_col = \"wt\"        \n)\n\n\nggplot(data = ehsa_ratio_tourist_stay_yearly,\n       aes(x = classification)) +\n  geom_bar()\n\n\n\n\n\n\n\n\nNo pattern detected means these areas do not have significant clustering (hotspot) or sparse (coldspot) phenomena, and the stay rate may be affected by other external factors rather than spatial factors.\nAreas with occasional hotspots indicate that the stay rate of tourists in these areas is high and significantly different from the stay rate in surrounding areas. This phenomenon may be related to specific tourist attractions, infrastructure or seasonal activities\nVisualising EHSA\n\nb1_filtered_ehsa_sy &lt;- b1_filtered %&gt;%\n  left_join(ehsa_ratio_tourist_stay_yearly,\n            by = join_by(ADM1_EN == location))\n\n\nb1_filtered_sig_sy &lt;- b1_filtered_ehsa_sy %&gt;%\n  filter(p_value &gt; 0.5)  \n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(b1_filtered_ehsa_sy) +\n  tm_polygons(\"classification\") + \n  tm_borders(alpha = 0.5) +\n  tm_shape(b1_filtered_sig_sy) +\n  tm_borders(alpha = 0.4)\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThrough EHSA analysis, some regions show different types of hotspots and coldspots. Among them, several regions are shown as “sporadic hotspots”, that is, the stay ratio in these regions has intermittent high hotspots in the time period. Some areas in the north are shown as cold spots, which means that the tourist stay ratio is low and shows a regular decline. Monthly analysis of foreign tourists:\nFrom the EHSA analysis, it is known that the number of foreign tourists fluctuates between months, and some regions show hotspots, especially in areas with developed tourism. Sporadic hotspots indicate that these areas will attract a large number of foreign tourists in certain months. Monthly analysis of local tourists:\nCompared with foreign tourists, the hotspot areas of local tourists are more concentrated. In particular, some core tourist cities have relatively stable monthly tourist volume and form hotspots, while the cold spots in the periphery may indicate that these places are not common destinations for local tourists. Annual tourist data:\nAnalyzed by year, different types of patterns are shown across the country. Popular tourist areas such as the southern coastal areas have long remained hot spots, while some areas have shown cold spots or no obvious patterns. The emergence of these patterns may be related to changes in the economy, transportation or infrastructure.\n\n\n\n1.Tin Seong Kam.Spatail weight and applications 8.9.10\n2.Tin Seong Kam.In-class Exercise 4.5.6\n3.Spacetime and spacetime cubes\n4.Kim, M.; Lee, S. (2023). Identification of Emerging Roadkill Hotspots on Korean Expressways Using Space–Time Cubes. International Journal of Environmental Research and Public Health, 20, 4896. https://doi.org/10.3390/ijerph20064896."
  },
  {
    "objectID": "Take_home_Ex/Take_home_Ex02/Take_home_Ex02.html#the-scene",
    "href": "Take_home_Ex/Take_home_Ex02/Take_home_Ex02.html#the-scene",
    "title": "Take home Exercise2",
    "section": "",
    "text": "Tourism is one of Thailand’s largest industries, accounting for some 20% of the gross domestic product (GDP). In 2019, Thailand earned 90 billion US$ from domestic and international tourism, but the COVID-19 pandemic caused revenues to crash to 24 billion US$ in 2020.\n\nObjectivesThe Task\n\n\nAs a curious geospatial analytics green horn, we are interested to discover:\n\nIf the key indicators of tourism economy of Thailand are independent from space and space and time.\nIf the tourism economy is indeed spatial and spatio-temporal dependent, then, you would like to detect where are the clusters and outliers, and the emerging hot spot/cold spot areas.\n\n\n\nThe specific tasks of this take-home exercise are as follows:\n\nUsing appropriate function of sf and tidyverse, preparing the following geospatial data layer:\na study area layer in sf polygon features. It must be at province level (including Bangkok) of Thailand.\na tourism economy indicators layer within the study area in sf polygon features.\na derived tourism economy indicator layer in spacetime s3 class of sfdep. Keep the time series at month and year levels.\nUsing the extracted data, perform global spatial autocorrelation analysis by using sfdep methods.\nUsing the extracted data, perform local spatial autocorrelation analysis by using sfdep methods.\nUsing the extracted data, perform emerging hotspot analysis by using sfdep methods\nDescribe the spatial patterns revealed by the analysis above."
  },
  {
    "objectID": "Take_home_Ex/Take_home_Ex02/Take_home_Ex02.html#the-data",
    "href": "Take_home_Ex/Take_home_Ex02/Take_home_Ex02.html#the-data",
    "title": "Take home Exercise2",
    "section": "",
    "text": "For the purpose of this take-home exercise, two data sets shall be used, they are:\n\nThailand Domestic Tourism Statistics at Kaggle. we are required to use version 2 of the data set.\nThailand - Subnational Administrative Boundaries at HDX. we are required to use the province boundary data set."
  },
  {
    "objectID": "Take_home_Ex/Take_home_Ex02/Take_home_Ex02.html#getting-started",
    "href": "Take_home_Ex/Take_home_Ex02/Take_home_Ex02.html#getting-started",
    "title": "Take home Exercise2",
    "section": "",
    "text": "pacman::p_load(sf, sfdep,spdep, tmap, tidyverse,ggplot2,plotly,Kendall)\n\n\n\nImport csv file into r environment\n\ntt1923 &lt;- read_csv(\"data/rawdata/thailand_domestic_tourism_2019_2023_ver2.csv\")\n\nRows: 30800 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (5): province_thai, province_eng, region_thai, region_eng, variable\ndbl  (1): value\ndate (1): date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nImport shapefile into r environment\n\nb1 &lt;- st_read(dsn = \"data/rawdata\", \n                 layer = \"tha_admbnda_adm1_rtsd_20220121\")\n\nReading layer `tha_admbnda_adm1_rtsd_20220121' from data source \n  `/Users/yangyayong/Downloads/学校文件/smu文件/Term 3/G/yyyirene/ISSS626-GAA/Take_home_Ex/Take_home_Ex02/data/rawdata' \n  using driver `ESRI Shapefile'\nSimple feature collection with 77 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 97.34336 ymin: 5.613038 xmax: 105.637 ymax: 20.46507\nGeodetic CRS:  WGS 84\n\n\nA tourism economy indicators layer within the study area in sf polygon features.\n\nna_rows &lt;- tt1923[is.na(tt1923$region_eng), ]\n\nna_rows\n\n# A tibble: 0 × 7\n# ℹ 7 variables: date &lt;date&gt;, province_thai &lt;chr&gt;, province_eng &lt;chr&gt;,\n#   region_thai &lt;chr&gt;, region_eng &lt;chr&gt;, variable &lt;chr&gt;, value &lt;dbl&gt;\n\n\nAs can be seen from the figure, na_rows is a data frame containing 0 rows, which #means that is.na(tt1923_selected$region_eng) did not match any NA values, so no rows #were filtered out. Therefore, it can be confirmed that there are no missing values #in the region_eng column.\nCheck the number of unique values for different columns in a dataset and list the unique entries in a specific column\n\nunique_counts &lt;- sapply(tt1923, n_distinct)\nprint(unique_counts)\n\n         date province_thai  province_eng   region_thai    region_eng \n           50            77            77             5             5 \n     variable         value \n            8         23267 \n\n\n\nunique(tt1923$region_eng)\n\n[1] \"central\"        \"east\"           \"south\"          \"north\"         \n[5] \"east_northeast\"\n\n\nThe code unique(tt1923$variable) retrieves all unique values ​​in the variable column in the tt1923 dataset. The output shows 8 different variable names in the column, representing different tourism-related indicators.\n\nunique(tt1923$variable)\n\n[1] \"ratio_tourist_stay\" \"no_tourist_stay\"    \"no_tourist_all\"    \n[4] \"no_tourist_thai\"    \"no_tourist_foreign\" \"revenue_all\"       \n[7] \"revenue_thai\"       \"revenue_foreign\""
  },
  {
    "objectID": "Take_home_Ex/Take_home_Ex02/Take_home_Ex02.html#data-wrangling",
    "href": "Take_home_Ex/Take_home_Ex02/Take_home_Ex02.html#data-wrangling",
    "title": "Take home Exercise2",
    "section": "",
    "text": "In this assignment,i mainly focus on these three indicator:\n\nno_tourist_thai - number of local tourists\nno_tourist_foreign - number of foreign tourists\nratio_tourist_stay - ratio of tourists staying\n\nThere are 5 different region names in the region_eng column: “central”, “east”, “south”, “north”, and “east_northeast”\n\nunique(tt1923$region_eng)\n\n[1] \"central\"        \"east\"           \"south\"          \"north\"         \n[5] \"east_northeast\"\n\n\n\nregion_total_revenue &lt;- tt1923 %&gt;%\n  filter(variable == \"revenue_all\") %&gt;%  \n  group_by(region_eng) %&gt;%                \n  summarise(total_revenue = sum(value, na.rm = TRUE))  \n\n\nregion_total_revenue &lt;- region_total_revenue %&gt;%\n  arrange(desc(total_revenue))\n\nggplot(region_total_revenue, aes(x = reorder(region_eng, total_revenue), y = total_revenue, fill = region_eng)) +\n  geom_bar(stat = \"identity\") +\n  labs(title = \"Total Tourism Revenue by Region\", x = \"Region\", y = \"Total Revenue\") +\n  theme_minimal() +\n  coord_flip() +\n  guides(fill = \"none\")\n\n\n\n\n\n\n\n\nFrom the perspective of tourism revenue, Central (Central Region) is the most valuable area because its tourism revenue is significantly higher than other regions, especially Bangkok, as an important transportation hub and cultural center, attracting a large number of domestic and international tourists.\n\n\n\nNext, we select the central region as our research area.\n\ntb_sc &lt;- tt1923  %&gt;%\n  filter(region_eng == \"central\") %&gt;%\n  select(date, province_eng, region_eng, variable,value)\n\n\ncentral_provinces &lt;- tb_sc %&gt;%\n  filter(region_eng == \"central\") %&gt;%\n  select(province_eng) %&gt;%  \n  distinct()          \n\ncentral_provinces\n\n# A tibble: 18 × 1\n   province_eng            \n   &lt;chr&gt;                   \n 1 Bangkok                 \n 2 Lopburi                 \n 3 Phra Nakhon Si Ayutthaya\n 4 Saraburi                \n 5 Chainat                 \n 6 Nakhon Pathom           \n 7 Sing Buri               \n 8 Ang Thong               \n 9 Nonthaburi              \n10 Pathum Thani            \n11 Samut Prakan            \n12 Samut Sakhon            \n13 Ratchaburi              \n14 Kanchanaburi            \n15 Samut Songkhram         \n16 Suphan Buri             \n17 Phetchaburi             \n18 Prachuap Khiri Khan     \n\n\nTo ensure geographic consistency, we delete two regions that are not included in the boundary data.\n\ntb_sc_filtered &lt;- tb_sc %&gt;%\n  filter(!(province_eng %in% c(\"Lopburi\", \"Chainat\")))\n\n\nselected_provinces &lt;- c(\n  \"Bangkok\", \"Lopburi\", \"Phra Nakhon Si Ayutthaya\", \"Saraburi\", \"Chainat\",\n  \"Nakhon Pathom\", \"Sing Buri\", \"Ang Thong\", \"Nonthaburi\", \"Pathum Thani\",\n  \"Samut Prakan\", \"Samut Sakhon\", \"Ratchaburi\", \"Kanchanaburi\",\n  \"Samut Songkhram\", \"Suphan Buri\", \"Phetchaburi\", \"Prachuap Khiri Khan\"\n)\n\nTo reduce data cache, we select the columns to be studied\n\nb1_filtered &lt;- b1 %&gt;%\n  filter(ADM1_EN %in% selected_provinces)  %&gt;%\nselect(ADM1_EN, Shape_Area, Shape_Leng, geometry)\n\nNow we plot the study area\n\nplot(b1_filtered)\n\n\n\n\n\n\n\n\n\n\n\nBy merging these two datasets, we can get both geographic and economic attribute data in one data frame, which makes it easier to perform analysis or visualization\n\nmerged_data &lt;- left_join(b1_filtered, tb_sc_filtered, by = c(\"ADM1_EN\" = \"province_eng\"))\n\nCheck if there are any missing values ​​after merging\n\nna_rows2 &lt;- merged_data[is.na(merged_data$region_eng), ]\nmerged_data_date &lt;- merged_data %&gt;%\n  mutate(\n    YearMonth = as.integer(format(date, \"%Y%m\"))\n  )\n\n\nna_rows2 &lt;- merged_data_date[is.na(merged_data_date$region_eng), ]\n\nna_rows2\n\nSimple feature collection with 0 features and 8 fields\nBounding box:  xmin: NA ymin: NA xmax: NA ymax: NA\nGeodetic CRS:  WGS 84\n[1] ADM1_EN    Shape_Area Shape_Leng date       region_eng variable   value     \n[8] geometry   YearMonth \n&lt;0 rows&gt; (or 0-length row.names)\n\n\nSince the return result is empty, it means that the region_eng column in merged_data has no missing values.\nFinally check the central provinces that we need.\n\ncentral_provinces2 &lt;- unique(merged_data %&gt;% dplyr::pull(ADM1_EN))\n\nprint(central_provinces2)\n\n [1] \"Bangkok\"                  \"Samut Prakan\"            \n [3] \"Nonthaburi\"               \"Pathum Thani\"            \n [5] \"Phra Nakhon Si Ayutthaya\" \"Ang Thong\"               \n [7] \"Sing Buri\"                \"Saraburi\"                \n [9] \"Ratchaburi\"               \"Kanchanaburi\"            \n[11] \"Suphan Buri\"              \"Nakhon Pathom\"           \n[13] \"Samut Sakhon\"             \"Samut Songkhram\"         \n[15] \"Phetchaburi\"              \"Prachuap Khiri Khan\"     \n\n\n\n\n\nFrom data provided,we perform three economic indicators：\n\n\nFirstly,filter the data to generate two new data sets, representing the number of local tourists and foreign tourists in Thailand respectively.\n\ntourist_numbers_thai &lt;- merged_data_date %&gt;%\n  filter(variable %in% c( \"no_tourist_thai\"))\n\ntourist_numbers_foreign &lt;- merged_data %&gt;%\n  filter(variable %in% c( \"no_tourist_foreign\"))\n\nThen we focus on yearly analysis.\nAggregate data by year\n\ntourist_numbers_thai_yearly &lt;- tourist_numbers_thai %&gt;%\n  mutate(year = lubridate::year(date)) %&gt;%  \n  group_by(ADM1_EN, year) %&gt;%  \n  summarise(total_value = sum(value, na.rm = TRUE)) %&gt;%  \n  ungroup()\n\n\ntourist_numbers_foreign_yearly &lt;- tourist_numbers_foreign %&gt;%\n  mutate(year = lubridate::year(date)) %&gt;%  \n  group_by(ADM1_EN, year) %&gt;%  \n  summarise(total_value = sum(value, na.rm = TRUE)) %&gt;%  \n  ungroup()\n\nsaveRDS(): Saves the data object as a .rds file for quick loading and use later.\nreadRDS(): Reads the saved data object from a .rds file to avoid recalculation or processing.\n\nsaveRDS(tourist_numbers_thai_yearly,\"data/rds/tourist_numbers_thai_yearly.rds\")\n\n\ntourist_numbers_thai_yearly &lt;- readRDS(\"data/rds/tourist_numbers_thai_yearly.rds\")\n\n\nsaveRDS(tourist_numbers_foreign_yearly,\"data/rds/tourist_numbers_foreign_yearly.rds\")\n\n\ntourist_numbers_foreign_yearly &lt;-readRDS(\"data/rds/tourist_numbers_foreign_yearly.rds\")\n\nKeep the time series at month and year levels\nWe aggregate by year to calculate the total number of tourists per province per year.\n\n\n\nEqual\n\n\nShow the code\ntmap_mode(\"plot\")\n\n\ntmap mode set to plotting\n\n\nShow the code\ntm_shape(tourist_numbers_thai_yearly) +\n  tm_fill(\"total_value\", \n          style = \"equal\", \n          palette = \"Blues\", \n          title = \"Total Local Tourists(Quantile Classification)\") +\n  tm_borders(alpha = 0.5) +\n  tm_facets(by = \"year\") +  \n  tm_layout(main.title = \"Total Local Tourists(Quantile Classification)\",\n            main.title.size = 0.7,\n            legend.width = 1.2, \n            legend.text.size = 0.8)\n\n\n\n\n\n\n\n\n\nQuantile\n\n\nShow the code\ntmap_mode(\"plot\")\n\n\ntmap mode set to plotting\n\n\nShow the code\ntm_shape(tourist_numbers_thai_yearly) +\n  tm_fill(\"total_value\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          title = \"Total Local Tourists(Quantile Classification)\") +\n  tm_borders(alpha = 0.5) +\n  tm_facets(by = \"year\") +  \n  tm_layout(main.title = \"Total Local Tourists(Quantile Classification)\",\n            main.title.size = 0.7,\n            legend.width = 1.2, \n            legend.text.size = 0.8)\n\n\n\n\n\n\n\n\n\nTourist concentration areas: The first picture shows the trend of tourists continuing to concentrate in the central region, while the second picture reveals the details of the fluctuations in the number of tourists, especially in 2020 and 2022, when tourists were more evenly distributed in the south and the central region.\nClassification: The second picture is more detailed, allowing us to observe more regional differences, even areas with lower tourist numbers are distinguished.\nTrend: In both pictures, it can be seen that the number of tourists in 2019 and 2022 was more concentrated, while 2020 and 2023 showed different degrees of tourist distribution, especially fluctuations in the central and southern regions.\n\n\n\nEqual\n\ntourist_numbers_foreign_yearly &lt;- tourist_numbers_foreign %&gt;%\n  mutate(year = lubridate::year(date)) %&gt;%  \n  group_by(ADM1_EN, year) %&gt;%  \n  summarise(total_value = sum(value, na.rm = TRUE)) %&gt;%  \n  ungroup()\n\n`summarise()` has grouped output by 'ADM1_EN'. You can override using the\n`.groups` argument.\n\n\n\n\nShow the code\ntmap_mode(\"plot\")\n\n\ntmap mode set to plotting\n\n\nShow the code\ntm_shape(tourist_numbers_foreign_yearly) +\n  tm_fill(\"total_value\", \n          style = \"equal\", \n          palette = \"Greens\", \n          title = \"Total Foreign Tourists(Equal Classification)\") +\n  tm_borders(alpha = 0.5) +  \n  tm_facets(by = \"year\") + \n  tm_layout(main.title = \"Total Foreign Tourists(Equal Classification)\",\n            main.title.size = 0.7,\n            legend.width = 1.2,  \n            legend.text.size = 0.8)\n\n\n\n\n\n\n\n\n\nQuantile\n\n\nShow the code\ntmap_mode(\"plot\")\n\n\ntmap mode set to plotting\n\n\nShow the code\ntm_shape(tourist_numbers_foreign_yearly) +\n  tm_fill(\"total_value\", \n          style = \"quantile\", \n          palette = \"Greens\", \n          title = \"Total Foreign Tourists(Quantile Classification)\") +\n  tm_borders(alpha = 0.5) +  \n  tm_facets(by = \"year\") + \n  tm_layout(main.title = \"Total Foreign Tourists(Quantile Classification)\",\n            main.title.size = 0.7,\n            legend.width = 1.2,  \n            legend.text.size = 0.8)\n\n\n\n\n\n\n\n\n\nThe first map shows more clearly the significant advantage of Bangkok in receiving foreign tourists in 2019, while the overall number of tourists in the following years has dropped sharply.\nThrough second map, it can be seen that in addition to Bangkok, other regions such as the southern region also have relatively more reception in terms of tourist inflow.\nSome areas may not be obvious in the annual data, but may become important in certain months.So next we will mainly analysis numbers of tourists on the monthly aspect to find more insights.\n\n\n\nWe aggregate by month to calculate the total number of tourists per province per month.\n\ntourist_numbers_thai_monthly &lt;- tourist_numbers_thai %&gt;%\n  mutate(\n    year = year(date),\n    month = month(date)\n  ) %&gt;%\n  group_by(ADM1_EN, year, month) %&gt;% \n  summarise(total_value = sum(value, na.rm = TRUE)) %&gt;%\n  ungroup()\n\n\ntourist_numbers_foreign_monthly &lt;- tourist_numbers_foreign %&gt;%\n  mutate(\n    year = year(date),\n    month = month(date)\n  ) %&gt;%\n  group_by(ADM1_EN, year, month) %&gt;% \n  summarise(total_value = sum(value, na.rm = TRUE)) %&gt;%\n  ungroup()\n\nsaveRDS(): Saves the data object as a .rds file for quick loading and use later.\nreadRDS(): Reads the saved data object from a .rds file to avoid recalculation or processing.\n\nsaveRDS(tourist_numbers_thai_monthly,\"data/rds/tourist_numbers_thai_monthly.rds\")\n\n\ntourist_numbers_thai_monthly &lt;- readRDS(\"data/rds/tourist_numbers_thai_monthly.rds\")\n\n\nsaveRDS(tourist_numbers_foreign_monthly,\"data/rds/tourist_numbers_foreign_monthly.rds\")\n\n\ntourist_numbers_foreign_monthly &lt;-readRDS(\"data/rds/tourist_numbers_foreign_monthly.rds\")\n\n\n\n\nFrom the data,we notice that in 2020-2023，they were too many data unrecorded,so we choose 2019 which least unrecorded data to analysis.\n\ntourist_numbers_2019_monthly &lt;- tourist_numbers_thai_monthly %&gt;%\n  filter(year == 2019)\n\nEqual\n\n\nShow the code\ntmap_mode(\"plot\")\n\n\ntmap mode set to plotting\n\n\nShow the code\ntm_shape(tourist_numbers_2019_monthly) +\n  tm_fill(\"total_value\", \n          style = \"equal\", \n          palette = \"YlOrBr\", \n          title = \"Total Local Tourists for monthly 2019(Equal Classification)\") +\n  tm_borders(alpha = 0.5) +\n  tm_facets(by = \"month\") +  \n  tm_layout(main.title = \"Total Local Tourists for monthly 2019(Equal Classification)\",\n            main.title.size = 0.7,\n            legend.width = 1.2, \n            legend.text.size = 0.8)\n\n\n\n\n\n\n\n\n\nQuantile\n\n\nShow the code\ntmap_mode(\"plot\")\n\n\ntmap mode set to plotting\n\n\nShow the code\ntm_shape(tourist_numbers_2019_monthly) +\n  tm_fill(\"total_value\", \n          style = \"quantile\", \n          palette = \"YlOrBr\", \n          title = \"Total Local Tourists for monthly 2019 (Quantile Classification)\") +\n  tm_borders(alpha = 0.5) +\n  tm_facets(by = \"month\") +  \n  tm_layout(main.title = \"Total Local Tourists for monthly 2019(Quantile Classification)\",\n            main.title.size = 0.7,\n            legend.width = 1.2, \n            legend.text.size = 0.8)\n\n\n\n\n\n\n\n\n\n\n\n\n\ntourist_numbers_2019_foreign_monthly &lt;- tourist_numbers_foreign_monthly %&gt;%\n  filter(year == 2019)\n\nEqual\n\n\nShow the code\ntmap_mode(\"plot\")\n\n\ntmap mode set to plotting\n\n\nShow the code\ntm_shape(tourist_numbers_2019_foreign_monthly) +\n  tm_fill(\"total_value\", \n          style = \"equal\", \n          palette = \"PuRd\", \n          title = \"Total Foreign Tourists for monthly 2019(Equal Classification)\") +\n  tm_borders(alpha = 0.5) +\n  tm_facets(by = \"month\") +  \n  tm_layout(main.title = \"Total Foreign Tourists for monthly 2019(Equal Classification)\",\n            main.title.size = 0.7,\n            legend.width = 1.2, \n            legend.text.size = 0.8)\n\n\n\n\n\n\n\n\n\nQuantile\n\n\nShow the code\ntmap_mode(\"plot\")\n\n\ntmap mode set to plotting\n\n\nShow the code\ntm_shape(tourist_numbers_2019_foreign_monthly) +\n  tm_fill(\"total_value\", \n          style = \"quantile\", \n          palette = \"PuRd\", \n          title = \"Total Foreign Tourists for monthly 2019 (Quantile Classification)\") +\n  tm_borders(alpha = 0.5) +\n  tm_facets(by = \"month\") +  \n  tm_layout(main.title = \"Total Foreign Tourists for monthly 2019(Quantile Classification)\",\n            main.title.size = 0.7,\n            legend.width = 1.2, \n            legend.text.size = 0.8)\n\n\n\n\n\n\n\n\n\nHowever，tourism for foreign tourists has been affected by the epidemic，especially in Bangkok at the end of the 2019.\n\n\n\nTravel restrictions and health and safety concerns during the pandemic may cause tourists to shorten their stay or even cancel their trips,on the other hand,the length of time tourists stay in a country directly affects their local consumption level, including accommodation, catering, shopping, and entertainment. If the stay rate is high, tourists’ local consumption will usually be higher, thus making a greater contribution to the local economy.\nWe extracted the data for the ratio indicators.\n\nratio_tourist_stay &lt;- merged_data %&gt;%\n  filter(variable %in% c( \"ratio_tourist_stay\"))\n\nWe use mutate() to extract the year from the date, then use group_by() to group by province and year, and finally use summarise() to calculate the average of each group.\n\nratio_tourist_stay_yearly &lt;- ratio_tourist_stay %&gt;%\n  mutate(year = year(date)) %&gt;%  \n  group_by(ADM1_EN, year) %&gt;%  \n  summarise(average_ratio = mean(value, na.rm = TRUE)) %&gt;%  \n  ungroup()\n\n\nsaveRDS(ratio_tourist_stay_yearly,\"data/rds/ratio_tourist_stay_yearly.rds\")\n\n\nratio_tourist_stay_yearly &lt;- readRDS(\"data/rds/ratio_tourist_stay_yearly.rds\")\n\nVisualising Tourist behavior Indicator using Equal and Quantile\nEqual\n\n\nShow the code\ntmap_mode(\"plot\")\n\n\ntmap mode set to plotting\n\n\nShow the code\ntm_shape(ratio_tourist_stay_yearly) +\n  tm_fill(\"average_ratio\", \n          style = \"equal\", \n          palette = \"GnBu\", \n          title = \"Ratio of Tourist stay (Equal)\") +\n  tm_borders(alpha = 0.5) +\n  tm_facets(by = \"year\") +  \n  tm_layout(main.title = \"Ratio of Tourist stay (equal Classification)\",\n            main.title.size = 0.7,\n            legend.width = 1.2,  \n            legend.text.size = 0.8)\n\n\n\n\n\n\n\n\n\nQuantile\n\n\nShow the code\ntmap_mode(\"plot\")\n\n\ntmap mode set to plotting\n\n\nShow the code\ntm_shape(ratio_tourist_stay_yearly) +\n  tm_fill(\"average_ratio\", \n          style = \"quantile\", \n          palette = \"GnBu\", \n          title = \"Ratio of Tourist stay (Quantile)\") +\n  tm_borders(alpha = 0.5) +\n  tm_facets(by = \"year\") +  \n  tm_layout(main.title = \"Ratio of Tourist stay (Quantile Classification)\",\n            main.title.size = 0.7,\n            legend.width = 1.2,  \n            legend.text.size = 0.8)\n\n\n\n\n\n\n\n\n\n2019: Before the pandemic, many regions in Thailand had high rates of tourist stay, especially in some provinces in the central and southern parts of the country.\n2020-2021: With the outbreak of COVID-19, the tourism industry has been severely affected. It can be clearly seen in the figure that the tourist stay rate in most regions in these years has dropped sharply, especially in 2021, when the stay rate in almost all regions is at the lowest level.\n2022-2023: As the pandemic gradually eases, the tourism industry begins to recover. It can be seen in the figure that the tourist stay rate in some regions has gradually recovered, but it has not returned to the level of 2019."
  },
  {
    "objectID": "Take_home_Ex/Take_home_Ex02/Take_home_Ex02.html#creating-a-time-series-cube",
    "href": "Take_home_Ex/Take_home_Ex02/Take_home_Ex02.html#creating-a-time-series-cube",
    "title": "Take home Exercise2",
    "section": "",
    "text": "Compare to temporal-spatial,the impact of COVID-19 on tourism in different provinces is not just static data for a certain period of time, but gradually changes in each region over time. Spacetime can help us identify these dynamic changes.\nBecause our data both have geometry, so we use “as_spacetime”.\n\n\n\ntourist_numbers_thai_yearly_st &lt;- as_spacetime(tourist_numbers_thai_yearly, \"ADM1_EN\", \"year\")\n\n\ntourist_numbers_foreign_yearly_st &lt;- as_spacetime(tourist_numbers_foreign_yearly, \"ADM1_EN\", \"year\")\n\n\nsaveRDS(tourist_numbers_thai_yearly_st,\"data/rds/tourist_numbers_thai_yearly_st.rds\")\n\n\ntourist_numbers_thai_yearly_st &lt;- readRDS(\"data/rds/tourist_numbers_thai_yearly_st.rds\")\n\n\nsaveRDS(tourist_numbers_foreign_yearly_st,\"data/rds/tourist_numbers_foreign_yearly_st.rds\")\n\n\ntourist_numbers_foreign_yearly_st &lt;- readRDS(\"data/rds/tourist_numbers_foreign_yearly_st.rds\")\n\nCheck whether convert successfully\n\nis_spacetime_cube(tourist_numbers_thai_yearly_st)\n\n[1] TRUE\n\n\n\nis_spacetime_cube(tourist_numbers_foreign_yearly_st)\n\n[1] TRUE\n\n\n\n\n\nWe choose 2019 to see the impact.\n\ntourist_numbers_local_monthly2019_st &lt;- as_spacetime(tourist_numbers_2019_monthly, \"ADM1_EN\", \"month\")\n\n\nsaveRDS(tourist_numbers_local_monthly2019_st,\"data/rds/tourist_numbers_local_monthly2019_st.rds\")\n\n\ntourist_numbers_local_monthly2019_st &lt;- readRDS(\"data/rds/tourist_numbers_local_monthly2019_st.rds\")\n\n\ntourist_numbers_froeign_monthly2019_st &lt;- as_spacetime(tourist_numbers_2019_foreign_monthly, \"ADM1_EN\", \"month\")\n\n\nsaveRDS(tourist_numbers_froeign_monthly2019_st,\"data/rds/tourist_numbers_froeign_monthly2019_st.rds\")\n\n\ntourist_numbers_froeign_monthly2019_st &lt;- readRDS(\"data/rds/tourist_numbers_froeign_monthly2019_st.rds\")\n\n\nis_spacetime_cube(tourist_numbers_froeign_monthly2019_st)\n\n[1] TRUE\n\n\n\nis_spacetime_cube(tourist_numbers_local_monthly2019_st)\n\n[1] TRUE\n\n\n\n\n\n\nratio_tourist_stay_yearly_st &lt;- as_spacetime(ratio_tourist_stay_yearly, \"ADM1_EN\", \"year\")\n\n\nsaveRDS(ratio_tourist_stay_yearly_st,\"data/rds/ratio_tourist_stay_yearly_st.rds\")\n\n\nratio_tourist_stay_yearly_st &lt;- readRDS(\"data/rds/ratio_tourist_stay_yearly_st.rds\")\n\n\nis_spacetime_cube(ratio_tourist_stay_yearly_st)\n\n[1] TRUE"
  },
  {
    "objectID": "Take_home_Ex/Take_home_Ex02/Take_home_Ex02.html#global-and-local-measures-of-spatial-autocorrelation",
    "href": "Take_home_Ex/Take_home_Ex02/Take_home_Ex02.html#global-and-local-measures-of-spatial-autocorrelation",
    "title": "Take home Exercise2",
    "section": "",
    "text": "Global Spatial Autocorrelation：Understand whether the data show spatial dependence or spatial correlation as a whole. If Moran’s I is significant, it means that the variable values are clustered in space rather than randomly distributed.\nIn this case we will use sfdep methods.\n\n\nStep 1: Deriving Queen’s contiguity weights: sfdep methods\n\nLocal Tourists yearlyForeign Tourists yearlyLocal Tourists monthlyForeign Tourists monthly\n\n\n\n\nShow the code\nwm_q_numbers_thai_yearly &lt;- tourist_numbers_thai_yearly %&gt;%\n  mutate(nb = st_contiguity(geometry),\n         wt = st_weights(nb,\n                         style = \"W\"),\n         .before = 1) \n\n\n\nsaveRDS(wm_q_numbers_thai_yearly,\"data/rds/wm_q_numbers_thai_yearly.rds\")\n\n\nwm_q_numbers_thai_yearly &lt;- readRDS(\"data/rds/wm_q_numbers_thai_yearly.rds\")\n\n\nwm_q_numbers_thai_yearly\n\nSimple feature collection with 80 features and 5 fields\nGeometry type: GEOMETRY\nDimension:     XY\nBounding box:  xmin: 98.18107 ymin: 10.95469 xmax: 101.4546 ymax: 15.66074\nGeodetic CRS:  WGS 84\n# A tibble: 80 × 6\n   nb         wt         ADM1_EN    year total_value                    geometry\n * &lt;nb&gt;       &lt;list&gt;     &lt;chr&gt;     &lt;dbl&gt;       &lt;dbl&gt;               &lt;POLYGON [°]&gt;\n 1 &lt;int [19]&gt; &lt;dbl [19]&gt; Ang Thong  2019      796444 ((100.3329 14.79905, 100.3…\n 2 &lt;int [19]&gt; &lt;dbl [19]&gt; Ang Thong  2020      369062 ((100.3329 14.79905, 100.3…\n 3 &lt;int [19]&gt; &lt;dbl [19]&gt; Ang Thong  2021      253957 ((100.3329 14.79905, 100.3…\n 4 &lt;int [19]&gt; &lt;dbl [19]&gt; Ang Thong  2022      670079 ((100.3329 14.79905, 100.3…\n 5 &lt;int [19]&gt; &lt;dbl [19]&gt; Ang Thong  2023      161835 ((100.3329 14.79905, 100.3…\n 6 &lt;int [29]&gt; &lt;dbl [29]&gt; Bangkok    2019    42073847 ((100.6128 13.9552, 100.61…\n 7 &lt;int [29]&gt; &lt;dbl [29]&gt; Bangkok    2020    18795401 ((100.6128 13.9552, 100.61…\n 8 &lt;int [29]&gt; &lt;dbl [29]&gt; Bangkok    2021    11946480 ((100.6128 13.9552, 100.61…\n 9 &lt;int [29]&gt; &lt;dbl [29]&gt; Bangkok    2022    28793993 ((100.6128 13.9552, 100.61…\n10 &lt;int [29]&gt; &lt;dbl [29]&gt; Bangkok    2023     5290145 ((100.6128 13.9552, 100.61…\n# ℹ 70 more rows\n\n\n\n\n\n\nShow the code\nwm_q_numbers_foreign_yearly &lt;- tourist_numbers_foreign_yearly %&gt;%\n  mutate(nb = st_contiguity(geometry),\n         wt = st_weights(nb,\n                         style = \"W\"),\n         .before = 1) \n\n\n\nsaveRDS(wm_q_numbers_foreign_yearly,\"data/rds/wm_q_numbers_foreign_yearly.rds\")\n\n\nwm_q_numbers_foreign_yearly &lt;- readRDS(\"data/rds/wm_q_numbers_foreign_yearly.rds\")\n\n\nwm_q_numbers_foreign_yearly \n\nSimple feature collection with 80 features and 5 fields\nGeometry type: GEOMETRY\nDimension:     XY\nBounding box:  xmin: 98.18107 ymin: 10.95469 xmax: 101.4546 ymax: 15.66074\nGeodetic CRS:  WGS 84\n# A tibble: 80 × 6\n   nb         wt         ADM1_EN    year total_value                    geometry\n * &lt;nb&gt;       &lt;list&gt;     &lt;chr&gt;     &lt;dbl&gt;       &lt;dbl&gt;               &lt;POLYGON [°]&gt;\n 1 &lt;int [19]&gt; &lt;dbl [19]&gt; Ang Thong  2019       32112 ((100.3329 14.79905, 100.3…\n 2 &lt;int [19]&gt; &lt;dbl [19]&gt; Ang Thong  2020        8259 ((100.3329 14.79905, 100.3…\n 3 &lt;int [19]&gt; &lt;dbl [19]&gt; Ang Thong  2021           0 ((100.3329 14.79905, 100.3…\n 4 &lt;int [19]&gt; &lt;dbl [19]&gt; Ang Thong  2022         670 ((100.3329 14.79905, 100.3…\n 5 &lt;int [19]&gt; &lt;dbl [19]&gt; Ang Thong  2023        1032 ((100.3329 14.79905, 100.3…\n 6 &lt;int [29]&gt; &lt;dbl [29]&gt; Bangkok    2019    24892715 ((100.6128 13.9552, 100.61…\n 7 &lt;int [29]&gt; &lt;dbl [29]&gt; Bangkok    2020     4822513 ((100.6128 13.9552, 100.61…\n 8 &lt;int [29]&gt; &lt;dbl [29]&gt; Bangkok    2021      625362 ((100.6128 13.9552, 100.61…\n 9 &lt;int [29]&gt; &lt;dbl [29]&gt; Bangkok    2022     9832457 ((100.6128 13.9552, 100.61…\n10 &lt;int [29]&gt; &lt;dbl [29]&gt; Bangkok    2023     4279587 ((100.6128 13.9552, 100.61…\n# ℹ 70 more rows\n\n\n\n\n\n\nShow the code\nwm_q_numbers_local_monthly2019 &lt;- tourist_numbers_2019_monthly %&gt;%\n  mutate(nb = st_contiguity(geometry),\n         wt = st_weights(nb,\n                         style = \"W\"),\n         .before = 1) \n\n\n\nsaveRDS(wm_q_numbers_local_monthly2019,\"data/rds/wm_q_numbers_monthly2019.rds\")\n\n\nwm_q_numbers_local_monthly2019 &lt;- readRDS(\"data/rds/wm_q_numbers_monthly2019.rds\")\n\n\nwm_q_numbers_local_monthly2019 \n\nSimple feature collection with 192 features and 6 fields\nGeometry type: GEOMETRY\nDimension:     XY\nBounding box:  xmin: 98.18107 ymin: 10.95469 xmax: 101.4546 ymax: 15.66074\nGeodetic CRS:  WGS 84\n# A tibble: 192 × 7\n   nb         wt     ADM1_EN    year month total_value                  geometry\n * &lt;nb&gt;       &lt;list&gt; &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt;       &lt;dbl&gt;             &lt;POLYGON [°]&gt;\n 1 &lt;int [47]&gt; &lt;dbl&gt;  Ang Thong  2019     1       98816 ((100.3329 14.79905, 100…\n 2 &lt;int [47]&gt; &lt;dbl&gt;  Ang Thong  2019     2       90029 ((100.3329 14.79905, 100…\n 3 &lt;int [47]&gt; &lt;dbl&gt;  Ang Thong  2019     3       96733 ((100.3329 14.79905, 100…\n 4 &lt;int [47]&gt; &lt;dbl&gt;  Ang Thong  2019     4       61929 ((100.3329 14.79905, 100…\n 5 &lt;int [47]&gt; &lt;dbl&gt;  Ang Thong  2019     5       69159 ((100.3329 14.79905, 100…\n 6 &lt;int [47]&gt; &lt;dbl&gt;  Ang Thong  2019     6       62095 ((100.3329 14.79905, 100…\n 7 &lt;int [47]&gt; &lt;dbl&gt;  Ang Thong  2019     7       60045 ((100.3329 14.79905, 100…\n 8 &lt;int [47]&gt; &lt;dbl&gt;  Ang Thong  2019     8       51666 ((100.3329 14.79905, 100…\n 9 &lt;int [47]&gt; &lt;dbl&gt;  Ang Thong  2019     9       57042 ((100.3329 14.79905, 100…\n10 &lt;int [47]&gt; &lt;dbl&gt;  Ang Thong  2019    10       53523 ((100.3329 14.79905, 100…\n# ℹ 182 more rows\n\n\n\n\n\n\nShow the code\nwm_q_numbers_foreign_monthly2019 &lt;- tourist_numbers_2019_foreign_monthly %&gt;%\n  mutate(nb = st_contiguity(geometry),\n         wt = st_weights(nb,\n                         style = \"W\"),\n         .before = 1) \n\n\n\nsaveRDS(wm_q_numbers_foreign_monthly2019,\"data/rds/wm_q_numbers_foreign_monthly2019.rds\")\n\n\nwm_q_numbers_foreign_monthly2019&lt;-readRDS(\"data/rds/wm_q_numbers_foreign_monthly2019.rds\")\n\n\nwm_q_numbers_foreign_monthly2019\n\nSimple feature collection with 192 features and 6 fields\nGeometry type: GEOMETRY\nDimension:     XY\nBounding box:  xmin: 98.18107 ymin: 10.95469 xmax: 101.4546 ymax: 15.66074\nGeodetic CRS:  WGS 84\n# A tibble: 192 × 7\n   nb         wt     ADM1_EN    year month total_value                  geometry\n * &lt;nb&gt;       &lt;list&gt; &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt;       &lt;dbl&gt;             &lt;POLYGON [°]&gt;\n 1 &lt;int [47]&gt; &lt;dbl&gt;  Ang Thong  2019     1        5281 ((100.3329 14.79905, 100…\n 2 &lt;int [47]&gt; &lt;dbl&gt;  Ang Thong  2019     2        3915 ((100.3329 14.79905, 100…\n 3 &lt;int [47]&gt; &lt;dbl&gt;  Ang Thong  2019     3        4690 ((100.3329 14.79905, 100…\n 4 &lt;int [47]&gt; &lt;dbl&gt;  Ang Thong  2019     4         899 ((100.3329 14.79905, 100…\n 5 &lt;int [47]&gt; &lt;dbl&gt;  Ang Thong  2019     5         764 ((100.3329 14.79905, 100…\n 6 &lt;int [47]&gt; &lt;dbl&gt;  Ang Thong  2019     6        1022 ((100.3329 14.79905, 100…\n 7 &lt;int [47]&gt; &lt;dbl&gt;  Ang Thong  2019     7        5989 ((100.3329 14.79905, 100…\n 8 &lt;int [47]&gt; &lt;dbl&gt;  Ang Thong  2019     8        2938 ((100.3329 14.79905, 100…\n 9 &lt;int [47]&gt; &lt;dbl&gt;  Ang Thong  2019     9        3390 ((100.3329 14.79905, 100…\n10 &lt;int [47]&gt; &lt;dbl&gt;  Ang Thong  2019    10        1200 ((100.3329 14.79905, 100…\n# ℹ 182 more rows\n\n\n\n\n\n\n\n\n\nShow the code\nwm_q_ratio_tourist_stay_yearly &lt;- ratio_tourist_stay_yearly %&gt;%\n  mutate(nb = st_contiguity(geometry),\n         wt = st_weights(nb,\n                         style = \"W\"),\n         .before = 1) \n\n\n\nsaveRDS(wm_q_ratio_tourist_stay_yearly,\"data/rds/wm_q_ratio_tourist_stay_yearly.rds\")\n\n\nwm_q_ratio_tourist_stay_yearly&lt;-readRDS(\"data/rds/wm_q_ratio_tourist_stay_yearly.rds\")\n\n\nwm_q_ratio_tourist_stay_yearly \n\nSimple feature collection with 80 features and 5 fields\nGeometry type: GEOMETRY\nDimension:     XY\nBounding box:  xmin: 98.18107 ymin: 10.95469 xmax: 101.4546 ymax: 15.66074\nGeodetic CRS:  WGS 84\n# A tibble: 80 × 6\n   nb         wt         ADM1_EN    year average_ratio                  geometry\n * &lt;nb&gt;       &lt;list&gt;     &lt;chr&gt;     &lt;dbl&gt;         &lt;dbl&gt;             &lt;POLYGON [°]&gt;\n 1 &lt;int [19]&gt; &lt;dbl [19]&gt; Ang Thong  2019          64.0 ((100.3329 14.79905, 100…\n 2 &lt;int [19]&gt; &lt;dbl [19]&gt; Ang Thong  2020          20.4 ((100.3329 14.79905, 100…\n 3 &lt;int [19]&gt; &lt;dbl [19]&gt; Ang Thong  2021          11.8 ((100.3329 14.79905, 100…\n 4 &lt;int [19]&gt; &lt;dbl [19]&gt; Ang Thong  2022          31.2 ((100.3329 14.79905, 100…\n 5 &lt;int [19]&gt; &lt;dbl [19]&gt; Ang Thong  2023          46.6 ((100.3329 14.79905, 100…\n 6 &lt;int [29]&gt; &lt;dbl [29]&gt; Bangkok    2019          82.2 ((100.6128 13.9552, 100.…\n 7 &lt;int [29]&gt; &lt;dbl [29]&gt; Bangkok    2020          28.2 ((100.6128 13.9552, 100.…\n 8 &lt;int [29]&gt; &lt;dbl [29]&gt; Bangkok    2021          13.0 ((100.6128 13.9552, 100.…\n 9 &lt;int [29]&gt; &lt;dbl [29]&gt; Bangkok    2022          46.6 ((100.6128 13.9552, 100.…\n10 &lt;int [29]&gt; &lt;dbl [29]&gt; Bangkok    2023          75.5 ((100.6128 13.9552, 100.…\n# ℹ 70 more rows\n\n\n\n\n\n\n\nLocal Tourists yearlyForeign Tourists yearly\n\n\n\n\nShow the code\nmoranI_numbers_thai_yearly &lt;- global_moran(wm_q_numbers_thai_yearly$total_value,\n                       wm_q_numbers_thai_yearly$nb,\n                       wm_q_numbers_thai_yearly$wt)\nglimpse(moranI_numbers_thai_yearly)\n\n\nList of 2\n $ I: num -0.042\n $ K: num 23.7\n\n\nAccording to the result: I = -0.042 indicates that the spatial autocorrelation is very weak and close to zero, suggesting that the values ​​between adjacent areas are almost randomly distributed.\nK = 23.7 indicates that the data distribution has a very steep peak, which means that most of the data is concentrated in a certain range and there are few discrete values.\n\n\n\n\nShow the code\nmoranI_numbers_foreign_yearly &lt;- global_moran(wm_q_numbers_foreign_yearly $total_value,\n                       wm_q_numbers_foreign_yearly $nb,\n                       wm_q_numbers_foreign_yearly $wt)\nglimpse(moranI_numbers_foreign_yearly)\n\n\nList of 2\n $ I: num 0.0152\n $ K: num 52.7\n\n\nAccording to the result: I = -0.0152 indicates that the spatial autocorrelation is very weak and close to zero, suggesting that the values ​​between adjacent areas are almost randomly distributed.\nK = 52.7 indicates that the data distribution has a very steep peak, which means that most of the data is concentrated in a certain range and there are few discrete values.\n\n\n\n\nLocal Tourists monthlyForeign Tourists monthly\n\n\n\n\nShow the code\nmoranI_numbers_thai_monthly &lt;- global_moran(wm_q_numbers_local_monthly2019$total_value,wm_q_numbers_local_monthly2019$nb, wm_q_numbers_local_monthly2019$wt)\n\nglimpse(moranI_numbers_thai_monthly)\n\n\nList of 2\n $ I: num 0.00825\n $ K: num 12.9\n\n\nFrom the resutl: I = 0.00825 indicates that there is a slight positive spatial autocorrelation and there may be some similarity between adjacent areas.\nK = 12.9 indicates that the data distribution is highly concentrated, concentrated in a narrow interval, with a very steep peak.\n\n\n\n\nShow the code\nmoranI_numbers_foreign_monthly &lt;- global_moran(wm_q_numbers_foreign_monthly2019$total_value,                                             wm_q_numbers_foreign_monthly2019$nb,\n            wm_q_numbers_foreign_monthly2019$wt)\n\nglimpse(moranI_numbers_foreign_monthly)\n\n\nList of 2\n $ I: num 0.0803\n $ K: num 14.9\n\n\nFrom the resutl: I = 0.0803 indicates that there is a slight positive spatial autocorrelation and there may be some similarity between adjacent areas.\nK = 14.9 indicates that the data distribution is highly concentrated, concentrated in a narrow interval, with a very steep peak.\n\n\n\n\n\n\n\nShow the code\nmoranI_tourist_stay &lt;- global_moran(wm_q_ratio_tourist_stay_yearly$average_ratio,\n                                    wm_q_ratio_tourist_stay_yearly$nb,\n                                    wm_q_ratio_tourist_stay_yearly $wt)\n\n\nglimpse(moranI_tourist_stay)\n\n\nList of 2\n $ I: num -0.0227\n $ K: num 1.95\n\n\nI = -0.0227: Indicates almost no spatial autocorrelation, or even slight negative spatial autocorrelation. There may be no obvious association or similarity between values ​​in adjacent areas. K = 1.95: Indicates that the data distribution is relatively flat, the data is more scattered, and there are more discrete values ​​or outliers.\n\n\n\n\n\nLocal Tourists yearlyForeign Tourists yearlyLocal Tourists monthlyForeign Tourists monthlyTourists stay yearly\n\n\n\nglobal_moran_test(wm_q_numbers_thai_yearly$total_value,\n                       wm_q_numbers_thai_yearly$nb,\n                       wm_q_numbers_thai_yearly$wt)\n\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = -1.1207, p-value = 0.8688\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n     -0.041986875      -0.012658228       0.000684876 \n\n\n\n\n\nglobal_moran_test(wm_q_numbers_foreign_yearly$total_value,\n                       wm_q_numbers_foreign_yearly$nb,\n                       wm_q_numbers_foreign_yearly$wt)\n\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 1.5378, p-value = 0.06205\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n     0.0151741493     -0.0126582278      0.0003275636 \n\n\n\n\n\nglobal_moran_test(wm_q_numbers_local_monthly2019$total_value,\n                       wm_q_numbers_local_monthly2019$nb,\n                       wm_q_numbers_local_monthly2019$wt)\n\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 1.1047, p-value = 0.1346\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n     0.0082504995     -0.0052356021      0.0001490398 \n\n\n\n\n\nglobal_moran_test(wm_q_numbers_foreign_monthly2019$total_value,\n                       wm_q_numbers_foreign_monthly2019$nb,\n                       wm_q_numbers_foreign_monthly2019$wt)\n\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 7.0478, p-value = 9.09e-13\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n     0.0803207165     -0.0052356021      0.0001473666 \n\n\n\n\n\nglobal_moran_test(wm_q_ratio_tourist_stay_yearly$average_ratio,\n                       wm_q_ratio_tourist_stay_yearly$nb,\n                       wm_q_ratio_tourist_stay_yearly$wt)\n\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = -0.32533, p-value = 0.6275\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n     -0.022706373      -0.012658228       0.000953943 \n\n\n\n\n\nThe data of foreign tourists show significant spatial clustering in certain time frames (such as monthly data), while the spatial distribution of local tourists and stay rates do not show obvious clustering.\n\n\n\nThis is to ensure that the computation is reproducible.\nNext, global_moran_perm() is used to perform Monte Carlo simulation.\n\nLocal Tourists yearlyForeign Tourists yearlyLocal Tourists monthlyForeign Tourists monthlyTourists stay yearly\n\n\n\nset.seed(1234)\nglobal_moran_perm_local_y=global_moran_perm(wm_q_numbers_thai_yearly$total_value,\n                       wm_q_numbers_thai_yearly$nb,\n                       wm_q_numbers_thai_yearly$wt,\n                  nsim = 999)\n\nglobal_moran_perm_local_y \n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = -0.041987, observed rank = 99, p-value = 0.198\nalternative hypothesis: two.sided\n\n\n\n\n\nset.seed(1234)\nglobal_moran_perm_foreign_y=global_moran_perm(wm_q_numbers_foreign_yearly$total_value,\n                       wm_q_numbers_foreign_yearly$nb,\n                       wm_q_numbers_foreign_yearly$wt,\n                  nsim = 99)\n\nglobal_moran_perm_foreign_y \n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 100 \n\nstatistic = 0.015174, observed rank = 88, p-value = 0.24\nalternative hypothesis: two.sided\n\n\n\n\n\nset.seed(1234)\nglobal_moran_perm_local_m=global_moran_perm(wm_q_numbers_local_monthly2019$total_value,\n                       wm_q_numbers_local_monthly2019$nb,\n                       wm_q_numbers_local_monthly2019$wt,\n                  nsim = 999)\n\nglobal_moran_perm_local_m \n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.0082505, observed rank = 874, p-value = 0.252\nalternative hypothesis: two.sided\n\n\n\n\n\nset.seed(1234)\nglobal_moran_perm_foreign_m=global_moran_perm(wm_q_numbers_foreign_monthly2019$total_value,wm_q_numbers_foreign_monthly2019$nb,wm_q_numbers_foreign_monthly2019$wt,\n                  nsim = 999)\n\nglobal_moran_perm_foreign_m\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.080321, observed rank = 1000, p-value &lt; 2.2e-16\nalternative hypothesis: two.sided\n\n\n\nhist(global_moran_perm_foreign_m$res, \n     freq=TRUE, \n     breaks=20, \n     xlab=\"Simulated Moran's I of Annual number of foreign tourists monthly\")\nabline(v=0, \n       col=\"red\") \n\n\n\n\n\n\n\n\n\n\n\nset.seed(1234)\nglobal_moran_perm_stay_y=global_moran_perm(wm_q_ratio_tourist_stay_yearly$average_ratio,\n                       wm_q_ratio_tourist_stay_yearly$nb,\n                       wm_q_ratio_tourist_stay_yearly$wt,\n                  nsim = 999)\n\nglobal_moran_perm_stay_y \n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = -0.022706, observed rank = 444, p-value = 0.888\nalternative hypothesis: two.sided\n\n\n\n\n\nMoran’s I Monte Carlo simulation of monthly foreign visitor data in 2019 shows significant spatial autocorrelation:\nThe simulated Moran’s I value is 0.0803 and the p-value is less than 2.2e-16, which means that the spatial autocorrelation in the data is very significant.\nThe histogram shows the distribution of the Moran’s I statistic generated by the simulation. Most of the simulated values are close to 0, but the actual observed statistic is around 0.08, which shows that the distribution of foreign tourist data has significant positive spatial autocorrelation. That is, adjacent areas have similar numbers of tourists, and tourists may be concentrated in certain areas.\nHowever, for the other indicators such as annual numbers of tourist and stay are not significant,which means these indicators are randomly distributed in various province."
  },
  {
    "objectID": "Take_home_Ex/Take_home_Ex02/Take_home_Ex02.html#local-spatial-autocorrelation-analysis",
    "href": "Take_home_Ex/Take_home_Ex02/Take_home_Ex02.html#local-spatial-autocorrelation-analysis",
    "title": "Take home Exercise2",
    "section": "",
    "text": "Although global analysis can tell us the overall spatial clustering of the data, it cannot point out which specific areas have clustering or anomalies. Local autocorrelation analysis can identify these specific hot spots or cold spots and provide more targeted regional analysis.\nTherefore we will continue our local spatial autocorrelation analysis.\n\n\nii (Local Moran’s I statistic): It reflects the spatial autocorrelation between each spatial unit and its surrounding units. Specifically, a positive ii value indicates that the spatial unit has similar values to its neighboring units (high-high or low-low clustering), while a negative ii value indicates that it has different values from its neighboring units (high-low or low-high inversion).\np_ii_sim: This is the p value associated with the ii value, reflecting the statistical significance calculated by simulation. It is calculated by Monte Carlo method or other randomization tests. If the p_ii_sim value is small (such as &lt; 0.05), it means that the spatial autocorrelation of the spatial unit is statistically significant, and the spatial clustering or inversion is not generated randomly, but there is a certain structure or pattern.\n\nLocal Tourists yearlyForeign Tourists yearlyLocal Tourists monthlyForeign Tourists monthlyComputing Contiguity Spatial Weights using spdepTourists stay yearly\n\n\n\nlisa_numbers_thai_yearly &lt;- wm_q_numbers_thai_yearly %&gt;% \n  mutate(local_moran = local_moran(\n    total_value, nb, wt, nsim = 99),\n         .before = 1) %&gt;%\n  unnest(local_moran)\n\nVisualising local Moran’s I\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\nmap1 &lt;- tm_shape(lisa_numbers_thai_yearly) +\n  tm_fill(\"ii\",\n          style = \"pretty\", \n          palette = \"RdBu\", \n          title = \"local Moran's I statistics\" ) + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8)) +\n  tm_layout(\n    main.title = \"local Moran's I of Annual number of local tourists\",\n    main.title.size = 0.7)\n\nmap2 &lt;- tm_shape(lisa_numbers_thai_yearly) +\n  tm_fill(\"p_ii_sim\",\n          breaks = c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf), \n          palette = \"-Blues\" ) + \n  tm_borders(alpha = 0.5) +\n   tm_layout(main.title = \"p-value of local Moran's I of Annual number of local tourists \",\n            main.title.size = 0.7)\ntmap_arrange(map1, map2, ncol = 2)\n\nVariable(s) \"ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\n\nThe dark red area indicates that the local Moran’s index is negative, indicating that the number of tourists in the area is low and the number of tourists in the surrounding areas is high, showing a low-high spatial pattern. The red area shows strong spatial differences, especially the area south of Bangkok.\nLight blue areas indicate that the local Moran index is positive, indicating that the number of tourists in this area is large, and the number of tourists in the surrounding areas is also large, forming a high-high spatial pattern. This pattern may indicate that these areas are relatively attractive to tourists, especially in central and northern Thailand.\nMost light gray areas indicate that the number of tourists in these areas has no obvious spatial autocorrelation with the surrounding areas, and the number of tourists is relatively evenly distributed.\nSome regions in Thailand show a strong spatial agglomeration effect of tourist arrivals (such as the blue areas in the central and northern parts), while tourist arrivals in other regions are relatively dispersed or have little connection with surrounding areas.\n\n\n\nlisa_numbers_foreign_yearly &lt;- wm_q_numbers_foreign_yearly %&gt;% \n  mutate(local_moran = local_moran(\n    total_value, nb, wt, nsim = 99),\n         .before = 1) %&gt;%\n  unnest(local_moran)\n\nlisa_numbers_foreign_yearly\n\nSimple feature collection with 80 features and 17 fields\nGeometry type: GEOMETRY\nDimension:     XY\nBounding box:  xmin: 98.18107 ymin: 10.95469 xmax: 101.4546 ymax: 15.66074\nGeodetic CRS:  WGS 84\n# A tibble: 80 × 18\n         ii       eii    var_ii   z_ii   p_ii p_ii_sim p_folded_sim skewness\n      &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1  0.0371  -0.00310  0.00237    0.825 0.409      0.42         0.21   -1.03 \n 2  0.0383  -0.00207  0.00317    0.718 0.473      0.54         0.27   -1.68 \n 3  0.0388  -0.00302  0.00236    0.860 0.390      0.52         0.26   -0.845\n 4  0.0387   0.00901  0.00199    0.667 0.504      0.58         0.29   -1.81 \n 5  0.0387  -0.00218  0.00305    0.741 0.459      0.5          0.25   -1.73 \n 6  0.304   -0.746    0.455      1.56  0.119      0.16         0.08    0.860\n 7  0.366    0.00216  0.0705     1.37  0.171      0.24         0.12    1.21 \n 8 -0.00584  0.000774 0.0000110 -1.99  0.0466     0.14         0.07   -1.65 \n 9  0.635   -0.181    0.229      1.70  0.0885     0.12         0.06    1.28 \n10  0.325   -0.00717  0.0594     1.36  0.173      0.16         0.08    1.11 \n# ℹ 70 more rows\n# ℹ 10 more variables: kurtosis &lt;dbl&gt;, mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;,\n#   nb &lt;nb&gt;, wt &lt;list&gt;, ADM1_EN &lt;chr&gt;, year &lt;dbl&gt;, total_value &lt;dbl&gt;,\n#   geometry &lt;POLYGON [°]&gt;\n\n\nVisualising local Moran’s I\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\nmap3 &lt;- tm_shape(lisa_numbers_foreign_yearly) +\n  tm_fill(\"ii\",\n          style = \"pretty\", \n          palette = \"RdBu\", \n          title = \"local Moran's I statistics\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8)) +\n  tm_layout(\n    main.title = \"local Moran's I of Annual number of foreign tourists\",\n    main.title.size = 0.7)\n\nmap4 &lt;- tm_shape(lisa_numbers_foreign_yearly) +\n  tm_fill(\"p_ii_sim\",\n          breaks = c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf), \n          palette = \"-Blues\" ) + \n  tm_borders(alpha = 0.5) +\n   tm_layout(main.title = \"p-value of local Moran's I of Annual number of foreign tourists \",\n            main.title.size = 0.7)\ntmap_arrange(map3, map4, ncol = 2)\n\nVariable(s) \"ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\n\nLight orange and light red areas indicate local negative Moran’s index values. These areas may have a low-high spatial pattern, suggesting that these areas have fewer tourists, but their neighboring areas have more tourists.\nThe tourism pattern of some areas (such as the dark blue area) has a strong spatial agglomeration effect\n\n\n\nlisa_numbers_thai_monthly &lt;- wm_q_numbers_local_monthly2019 %&gt;% \n  mutate(local_moran = local_moran(\n    total_value, nb, wt, nsim = 99),\n         .before = 1) %&gt;%\n  unnest(local_moran)\n\nlisa_numbers_thai_monthly\n\nSimple feature collection with 192 features and 18 fields\nGeometry type: GEOMETRY\nDimension:     XY\nBounding box:  xmin: 98.18107 ymin: 10.95469 xmax: 101.4546 ymax: 15.66074\nGeodetic CRS:  WGS 84\n# A tibble: 192 × 19\n      ii       eii  var_ii  z_ii   p_ii p_ii_sim p_folded_sim skewness kurtosis\n   &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;\n 1 0.171 -0.0213   0.00646  2.39 0.0168     0.02         0.01   -0.317   -0.185\n 2 0.175  0.00809  0.00586  2.17 0.0297     0.02         0.01   -0.686    0.333\n 3 0.172  0.000403 0.00450  2.56 0.0106     0.02         0.01   -0.335    0.313\n 4 0.186 -0.00134  0.00549  2.53 0.0115     0.02         0.01   -0.506   -0.381\n 5 0.183 -0.0109   0.00682  2.35 0.0189     0.02         0.01   -0.368   -0.104\n 6 0.186 -0.0118   0.00703  2.36 0.0184     0.02         0.01   -0.208   -0.187\n 7 0.187 -0.00314  0.00791  2.13 0.0328     0.02         0.01   -0.448   -0.104\n 8 0.190  0.00561  0.00657  2.28 0.0229     0.02         0.01   -0.124   -0.836\n 9 0.188 -0.0148   0.00762  2.32 0.0202     0.02         0.01   -0.470    0.179\n10 0.189  0.00326  0.00787  2.10 0.0360     0.02         0.01   -0.658    0.655\n# ℹ 182 more rows\n# ℹ 10 more variables: mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;, nb &lt;nb&gt;,\n#   wt &lt;list&gt;, ADM1_EN &lt;chr&gt;, year &lt;dbl&gt;, month &lt;dbl&gt;, total_value &lt;dbl&gt;,\n#   geometry &lt;POLYGON [°]&gt;\n\n\nVisualising local Moran’s I\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\nmap5 &lt;- tm_shape(lisa_numbers_thai_monthly) +\n  tm_fill(\"ii\",\n          style = \"pretty\", \n          palette = \"RdBu\", \n          title = \"local Moran's I statistics\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8)) +\n  tm_layout(\n    main.title = \"local Moran's I of Monthly number of local tourists\",\n    main.title.size = 0.7)\n\nmap6 &lt;- tm_shape(lisa_numbers_thai_monthly) +\n  tm_fill(\"p_ii_sim\",\n          breaks = c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf), \n          palette = \"-Blues\") + \n  tm_borders(alpha = 0.5) +\n   tm_layout(main.title = \"p-value of local Moran's I of Monthly number of local tourists \",\n            main.title.size = 0.7)\ntmap_arrange(map5, map6, ncol = 2)\n\nVariable(s) \"ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\n\nThe dark blue areas in the figure indicate high-high agglomeration effects, which may mean that these areas stand out in terms of the number of tourists, etc., while the red areas may be low-high patterns, indicating that these areas do not have the same characteristics as neighboring areas.\n\n\n\nlisa_numbers_foreign_monthly &lt;- wm_q_numbers_foreign_monthly2019 %&gt;% \n  mutate(local_moran = local_moran(\n    total_value, nb, wt, nsim = 99),\n         .before = 1) %&gt;%\n  unnest(local_moran)\n\nlisa_numbers_foreign_monthly\n\nSimple feature collection with 192 features and 18 fields\nGeometry type: GEOMETRY\nDimension:     XY\nBounding box:  xmin: 98.18107 ymin: 10.95469 xmax: 101.4546 ymax: 15.66074\nGeodetic CRS:  WGS 84\n# A tibble: 192 × 19\n       ii       eii  var_ii  z_ii   p_ii p_ii_sim p_folded_sim skewness kurtosis\n    &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;\n 1 0.0765 -0.00442  0.00256  1.60 0.110      0.06         0.03  -0.574   -0.0513\n 2 0.0772 -0.00175  0.00192  1.80 0.0716     0.04         0.02  -0.519   -0.153 \n 3 0.0768  0.000772 0.00208  1.67 0.0956     0.14         0.07  -0.279   -0.453 \n 4 0.0786 -0.00372  0.00259  1.62 0.106      0.08         0.04  -0.475   -0.0874\n 5 0.0786 -0.000677 0.00324  1.39 0.164      0.18         0.09  -0.490   -0.0297\n 6 0.0785  0.00367  0.00197  1.68 0.0921     0.02         0.01  -0.821    0.605 \n 7 0.0762  0.00222  0.00227  1.55 0.120      0.12         0.06  -0.333   -0.690 \n 8 0.0776  0.000580 0.00196  1.74 0.0822     0.08         0.04  -0.288   -0.323 \n 9 0.0774 -0.000973 0.00186  1.82 0.0689     0.1          0.05  -0.0473  -0.519 \n10 0.0784  0.00859  0.00185  1.62 0.104      0.12         0.06  -0.558    0.337 \n# ℹ 182 more rows\n# ℹ 10 more variables: mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;, nb &lt;nb&gt;,\n#   wt &lt;list&gt;, ADM1_EN &lt;chr&gt;, year &lt;dbl&gt;, month &lt;dbl&gt;, total_value &lt;dbl&gt;,\n#   geometry &lt;POLYGON [°]&gt;\n\n\nVisualising local Moran’s I\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\nmap3 &lt;- tm_shape(lisa_numbers_foreign_monthly) +\n  tm_fill(\"ii\",\n          style = \"pretty\", \n          palette = \"RdBu\", \n          title = \"local Moran's I statistics\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8)) +\n  tm_layout(\n    main.title = \"local Moran's I of Monthly number of foreign tourists\",\n    main.title.size = 0.7)\n\nmap4 &lt;- tm_shape(lisa_numbers_thai_monthly) +\n  tm_fill(\"p_ii_sim\",\n          breaks = c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf), \n          palette = \"-Blues\") + \n  tm_borders(alpha = 0.5) +\n   tm_layout(main.title = \"p-value of local Moran's I of Monthly number of foreign tourists \",\n            main.title.size = 0.7)\ntmap_arrange(map3, map4, ncol = 2)\n\nVariable(s) \"ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\n\nThe distribution of local tourists in 2019 showed a certain degree of spatial autocorrelation, with some areas (such as the light orange color area) showing a sparse number of tourists and a concentration in the surrounding areas.\nThe spatial autocorrelation of foreign tourists was more significant, especially in the central region, where foreign tourists were concentrated, while other areas were sparsely distributed, showing a strong spatial agglomeration effect.\nHere we are using the spdep package for additional Local spatial autocorrelation analysis\n\n\n\ndecember_data &lt;- tourist_numbers_2019_foreign_monthly %&gt;%\n  filter(month == 12)\n\n\nwm_q &lt;- poly2nb(december_data, \n                queen=TRUE)\n\n\nsaveRDS(wm_q,\"data/rds/wm_q.rds\")\n\n\nwm_q &lt;- readRDS(\"data/rds/wm_q.rds\")\n\n\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 16 \nNumber of nonzero links: 58 \nPercentage nonzero weights: 22.65625 \nAverage number of links: 3.625 \nLink number distribution:\n\n1 2 3 4 5 6 7 \n2 2 4 3 3 1 1 \n2 least connected regions:\n9 11 with 1 link\n1 most connected region:\n4 with 7 links\n\n\nOn average, each region has 54.5 neighbors, but some regions have fewer connections (e.g., only 12 neighbors) and others have more connections (e.g., 95 neighbors).\n10464 non-zero connections indicate that most regions are neighbors (28.38542% of possible region pairs)\nThe spatial neighbor relationship is converted into a standardized spatial weight matrix in order to prepare for the subsequent spatial autocorrelation analysis.\n\nrswm_q &lt;- nb2listw(wm_q, \n                   style=\"W\", \n                   zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 16 \nNumber of nonzero links: 58 \nPercentage nonzero weights: 22.65625 \nAverage number of links: 3.625 \n\nWeights style: W \nWeights constants summary:\n   n  nn S0       S1       S2\nW 16 256 16 10.39167 68.28294\n\n\nThis code uses the local Moran’s I method to analyze the local spatial autocorrelation of each region in the december_data dataset. By observing the Z-score and p-value in the results, we can determine which regions are spatially significantly correlated with their neighbors. This can help identify spatial clusters or discrete areas.\n\nfips &lt;- order(december_data$ADM1_EN)\nlocalMI &lt;- localmoran(december_data$total_value, rswm_q)\nhead(localMI)\n\n           Ii         E.Ii      Var.Ii       Z.Ii Pr(z != E(Ii))\n1  0.07125353 -0.007368153 0.033434805  0.4299748     0.66721401\n2 -1.07176832 -0.990483093 0.021545910 -0.5537697     0.57973645\n3  0.07971451 -0.004133874 0.018819588  0.6112089     0.54106130\n4 -0.10611081 -0.006677720 0.008663677 -1.0682670     0.28540011\n5 -0.24855223 -0.005995100 0.018728784 -1.7723898     0.07632987\n6 -0.19754957 -0.003888768 0.012174313 -1.7551713     0.07923002\n\n\n\ndecember_data.localMI &lt;- cbind(december_data,localMI) %&gt;%\n  rename(Pr.Ii = Pr.z....E.Ii..)\n\n\ndecember_data.localMI &lt;- cbind(december_data,localMI) %&gt;%\n  rename(Pr.Ii = Pr.z....E.Ii..)\n\nList the content of the local Moran matrix\n\nprintCoefmat(data.frame(\n  localMI[fips,], \n  row.names=december_data$ADM1_EN[fips]),\n  check.names=FALSE)\n\n                                  Ii        E.Ii      Var.Ii        Z.Ii\nAng Thong                 7.1254e-02 -7.3682e-03  3.3435e-02  4.2997e-01\nBangkok                  -1.0718e+00 -9.9048e-01  2.1546e-02 -5.5377e-01\nKanchanaburi              7.9715e-02 -4.1339e-03  1.8820e-02  6.1121e-01\nNakhon Pathom            -1.0611e-01 -6.6777e-03  8.6637e-03 -1.0683e+00\nNonthaburi               -2.4855e-01 -5.9951e-03  1.8729e-02 -1.7724e+00\nPathum Thani             -1.9755e-01 -3.8888e-03  1.2174e-02 -1.7552e+00\nPhetchaburi               5.3820e-02 -3.4386e-03  1.5665e-02  4.5748e-01\nPhra Nakhon Si Ayutthaya -5.7268e-03 -2.3771e-05  4.0749e-05 -8.9340e-01\nPrachuap Khiri Khan       1.6534e-02 -3.5333e-04  5.6513e-03  2.2464e-01\nRatchaburi                9.1602e-02 -6.6681e-03  1.5140e-02  7.9866e-01\nSamut Prakan             -7.6581e-01 -2.6316e-03  4.1994e-02 -3.7242e+00\nSamut Sakhon             -2.4193e-01 -7.4242e-03  2.3160e-02 -1.5409e+00\nSamut Songkhram           9.4104e-02 -6.9070e-03  3.1357e-02  5.7043e-01\nSaraburi                  3.3588e-02 -6.0695e-03  4.4814e-02  1.8734e-01\nSing Buri                 1.1032e-01 -7.4487e-03  5.4921e-02  5.0251e-01\nSuphan Buri               7.9500e-02 -7.1552e-03  1.6238e-02  6.8003e-01\n                         Pr.z....E.Ii..\nAng Thong                        0.6672\nBangkok                          0.5797\nKanchanaburi                     0.5411\nNakhon Pathom                    0.2854\nNonthaburi                       0.0763\nPathum Thani                     0.0792\nPhetchaburi                      0.6473\nPhra Nakhon Si Ayutthaya         0.3716\nPrachuap Khiri Khan              0.8223\nRatchaburi                       0.4245\nSamut Prakan                     0.0002\nSamut Sakhon                     0.1233\nSamut Songkhram                  0.5684\nSaraburi                         0.8514\nSing Buri                        0.6153\nSuphan Buri                      0.4965\n\n\nIi: This is the local Moran’s I statistic. If Ii is positive, it means that there is a positive correlation between the region and its neighboring regions (hot spot), and if it is negative, it means that there is a negative correlation between the region and its neighboring regions (cold spot or outlier)\nFor example, Ratchaburi’s Ii is 9.1602e-02, indicating that the number of foreign tourists in this area shows positive spatial autocorrelation in space, and it may be a hot spot.\nOn the contrary, Bangkok’s Ii is -1.0718e+00, indicating that the number of foreign tourists in this area and its neighbors shows negative spatial correlation, and it may be a cold spot or outlier.\n\n\n\nnci &lt;- moran.plot(december_data$total_value, rswm_q,\n                  labels=as.character(december_data$ADM1_EN), \n                  xlab=\"Foreign tourists 2019.12\", \n                  ylab=\"Spatially Lag Foreign tourists 2019.12\")\n\n\n\n\n\n\n\n\n\n\n\n\ndecember_data$Z.Total_value &lt;- scale(december_data$total_value) %&gt;% \n  as.vector \n\n\nnci2 &lt;- moran.plot(december_data$Z.Total_value, rswm_q,\n                   labels=as.character(december_data$ADM1_EN),\n                   xlab=\"Z.Total_value 2019.12\", \n                   ylab=\"Spatially Lag z-Total_value 2019.12\")\n\n\n\n\n\n\n\n\nIn both cases: Regression line: The regression line shows the general trend between the number of tourists and the number of spatially lagged tourists. Here, the slope of the regression line is very small and almost horizontal, indicating that the number of foreign tourists overall is not strongly correlated with the number of tourists in its neighboring areas.\n\n\n\nThe dotted lines in the figure divide the scatter plot into four quadrants to help us identify “hot spots” and “cold spots”:\n“High-High” (upper right): The number of tourists and the number of tourists in its neighbors are both high, representing a potential “hot spot” area.\n“Low-High” (upper left): There are few tourists in this area, but many tourists in its neighbors, which may be a spatial outlier or transition area.\n“Low-Low” (lower left): There are few tourists and few tourists in its neighbors, which may be a “cold spot”.\n“High-Low” (lower right): There are many tourists in this area, but few tourists in its neighbors, which may be a spatial outlier\nWe can see that most of the points are concentrated in the lower left corner, indicating that these areas and their neighboring areas have relatively few tourists. “Bangkok” and Samut Prakan are located in the lower right corner and above, respectively, indicating that:\nBangkok has a very large number of foreign tourists, but its neighboring areas have relatively few tourists.\nThe neighboring areas of the Samut Prakan area have more tourists, while the area itself has fewer tourists.\n\n\n\nPrepare a LISA cluster map\n\nquadrant &lt;- vector(mode=\"numeric\",length=nrow(localMI))\n\nderives the spatially lagged variable of interest (i.e. GDPPC) and centers the spatially lagged variable around its mean.\n\ndecember_data$lag_total_value &lt;- lag.listw(rswm_q, december_data$total_value)\nDV &lt;- december_data$lag_total_value - mean(december_data$lag_total_value)     \n\nThis is follow by centering the local Moran’s around the mean.\n\nLM_I &lt;- localMI[,1] - mean(localMI[,1])    \n\nNext, we will set a statistical significance level for the local Moran.\n\nsignif &lt;- 0.05 \n\nThese four command lines define the low-low (1), low-high (2), high-low (3) and high-high (4) categories.\n\nquadrant[DV &lt;0 & LM_I&gt;0] &lt;- 1\nquadrant[DV &gt;0 & LM_I&lt;0] &lt;- 2\nquadrant[DV &lt;0 & LM_I&lt;0] &lt;- 3  \nquadrant[DV &gt;0 & LM_I&gt;0] &lt;- 4      \n\nLastly, places non-significant Moran in the category 0.\n\nquadrant[localMI[,5]&gt;signif] &lt;- 0\n\nIn fact, we can combined all the steps into one single code chunk as shown below:\n\nquadrant &lt;- vector(mode=\"numeric\",length=nrow(localMI))\ndecember_data$lag_total_value &lt;- lag.listw(rswm_q, december_data$total_value)\nDV &lt;- december_data$lag_total_value - mean(december_data$lag_total_value)     \nLM_I &lt;- localMI[,1]   \nsignif &lt;- 0.05       \nquadrant[DV &lt;0 & LM_I&gt;0] &lt;- 1\nquadrant[DV &gt;0 & LM_I&lt;0] &lt;- 2\nquadrant[DV &lt;0 & LM_I&lt;0] &lt;- 3  \nquadrant[DV &gt;0 & LM_I&gt;0] &lt;- 4    \nquadrant[localMI[,5]&gt;signif] &lt;- 0\n\n\n\n\n\ndecember_data.localMI$quadrant &lt;- quadrant\ncolors &lt;- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters &lt;- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\ntm_shape(december_data.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\n\n\n\n\n\n\n\nThis means that Samut Prakan itself may not be attractive, resulting in low tourist numbers, but its neighboring areas such as Bangkok are relatively popular, attracting more tourists.\n\n\n\n\nlisa_numbers_ratio_tourist_stay_yearly &lt;- wm_q_ratio_tourist_stay_yearly %&gt;% \n  mutate(local_moran = local_moran(\n    average_ratio, nb, wt, nsim = 99),\n         .before = 1) %&gt;%\n  unnest(local_moran)\n\nVisualising local Moran’s I\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\nmap9 &lt;- tm_shape(lisa_numbers_ratio_tourist_stay_yearly) +\n  tm_fill(\"ii\",\n          style = \"pretty\", \n          palette = \"RdBu\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8)) +\n  tm_layout(\n    main.title = \"local Moran's I of Annual Ratio Tourists\",\n    main.title.size = 0.7)\n\nmap10 &lt;- tm_shape(lisa_numbers_ratio_tourist_stay_yearly) +\n  tm_fill(\"p_ii_sim\",\n          breaks = c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf), \n          palette = \"-Blues\") + \n  tm_borders(alpha = 0.5) +\n   tm_layout(main.title = \"p-value of local Moran's I of Annual Ratio Tourists\",\n            main.title.size = 0.7)\ntmap_arrange(map9, map10, ncol = 2)\n\nVariable(s) \"ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\n\nThe left map indicates that blue areas indicate positive local Moran’s index, which means that the stay rates in these areas are similar to those in the surrounding areas, and these areas may be clusters of higher stay rates.\nlight red areas indicate negative local Moran’s index, which means that the stay rates in these areas are different from those in the surrounding areas, and may form isolated areas of low stay rates.\nAreas with neutral colors (close to 0) indicate that there is no significant spatial autocorrelation and the distribution of stay rates is relatively random.\nHowever the right map indicates that the stay rates in these areas have no obvious spatial dependence or agglomeration.\n\n\n\n\n\n\nThrough the analysis of Local Moran’s I and p values, tourism activities in central Thailand (especially Bangkok and its surrounding areas) show significant autocorrelation and clustering effects in space.\nThe data of local and foreign tourists in Bangkok and surrounding areas show a significant tourist clustering effect. The annual and monthly tourist data show that Bangkok is not only a major tourist destination, but surrounding provinces such as Pathum Thani and Nonthaburi are also important tourist hubs.\nThe high stay ratio of tourists in southern provinces such as Nakhon Si Thammarat and Songkhla indicates that these areas may be popular places for vacations and long-term stays."
  },
  {
    "objectID": "Take_home_Ex/Take_home_Ex02/Take_home_Ex02.html#emerging-hot-spots-analysis-ehsa",
    "href": "Take_home_Ex/Take_home_Ex02/Take_home_Ex02.html#emerging-hot-spots-analysis-ehsa",
    "title": "Take home Exercise2",
    "section": "",
    "text": "An analytical method for detecting spatial and spatiotemporal patterns, often used to identify hot spots and cold spots in geographic areas or data. It can not only identify current hot and cold spots, but also discover emerging, persistent, declining or temporary hot and cold spots by analyzing trends over time.\nMain Types of EHSA：\nPersistent Hot Spot: An area that has been a hot spot for the entire time period.\nEmerging Hot Spot: An area that has recently become a hot spot, perhaps due to some event or trend.\nDiminishing Hot Spot: An area that was a hot spot but is losing its influence.\nRebounding Hot Spot: An area that was a hot spot before, then disappeared or weakened, but has become a hot spot again.\nSporadic Hot Spot: An area that is sometimes a hot spot and sometimes not during a time period.\nCold Spot: The opposite of a hot spot, a cold spot indicates that the area has a low value for a period of time, and may represent a low activity or low density area of ​​a phenomenon.\n\nLocal Tourists yearlyLocal Tourists monthlyForeign Tourists monthlyTourists stay ratio\n\n\nComputing Gi*\nA method in geospatial statistics used to identify hot spots and cold spots in spatial data. It is a local spatial autocorrelation statistic used to detect whether there is a significant clustering pattern within a given spatial unit (such as a geographic area), that is, whether the value of the area is significantly higher or lower than its surrounding neighboring areas.\n\ntourist_numbers_thai_yearly_st2 &lt;- tourist_numbers_thai_yearly_st %&gt;%\n  activate(\"geometry\")\n\ntourist_numbers_thai_yearly_st_nb &lt;- tourist_numbers_thai_yearly_st2 %&gt;%\n  mutate(\n    centroid = st_centroid(geometry),\n    nb = include_self(st_contiguity(geometry)), \n    wt = st_inverse_distance(nb, centroid, scale = 1, alpha = 1),  \n    .before = 1\n  ) %&gt;%\n  set_nbs(\"nb\") %&gt;%\n  set_wts(\"wt\")\n\n\ngi_stars_tourist_numbers_thai_yearly &lt;- tourist_numbers_thai_yearly_st_nb %&gt;% \n  group_by(year) %&gt;% \n  mutate(\n    gi_star = local_gstar_perm(total_value,nb,wt)\n  ) %&gt;% \n  tidyr::unnest(gi_star)\n\nMann-Kendall Test A monotonic series or function is one that only increases (or decreases) and never changes direction. So long as the function either stays flat or continues to increase, it is monotonic.\nH0: No monotonic trend\nH1: Monotonic trend is present\nInterpretation\nReject the null-hypothesis null if the p-value is smaller than the alpha value (i.e. 1-confident level) Tau ranges between -1 and 1 where:\n-1 is a perfectly decreasing series, and\n1 is a perfectly increasing series.\nMann-Kendall Test on Gi\nWith these Gi* measures we can then evaluate each location for a trend using the Mann-Kendall test. The code chunk below uses Bangkok.\n\nbkg &lt;- gi_stars_tourist_numbers_thai_yearly %&gt;% \n  ungroup() %&gt;% \n  filter(ADM1_EN == \"Bangkok\") %&gt;% \n  select(ADM1_EN, year, gi_star)\n\n\nggplot(data = bkg, \n       aes(x = year, \n           y = gi_star)) +\n  geom_line() +\n  theme_light()\n\n\n\n\n\n\n\n\nPrinting Mann-Kendall test report\n\nbkg %&gt;%\n  summarise(mk = list(\n    unclass(\n      Kendall::MannKendall(gi_star)))) %&gt;% \n  tidyr::unnest_wider(mk)\n\n# A tibble: 1 × 5\n    tau     sl     S     D  varS\n  &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1    -1 0.0275   -10    10  16.7\n\n\nFrom the above result, sl is the p-value &lt; 0.05. With reference to the results, we will reject the hypothesis null and tau=-1 infer that a downward trend.\nMann-Kendall test data.frame\nWe can replicate this for each location by using group_by() of dplyr package.\n\nehsa_tourist_numbers_thai_yearly &lt;- gi_stars_tourist_numbers_thai_yearly %&gt;%\n  group_by(ADM1_EN) %&gt;%\n  summarise(mk = list(\n    unclass(\n      Kendall::MannKendall(gi_star)))) %&gt;%\n  tidyr::unnest_wider(mk)\nhead(ehsa_tourist_numbers_thai_yearly)\n\n# A tibble: 6 × 6\n  ADM1_EN          tau     sl     S     D  varS\n  &lt;chr&gt;          &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 Ang Thong     -0.400 0.462     -4    10  16.7\n2 Bangkok       -1     0.0275   -10    10  16.7\n3 Kanchanaburi   0.800 0.0864     8    10  16.7\n4 Nakhon Pathom -0.800 0.0864    -8    10  16.7\n5 Nonthaburi    -1     0.0275   -10    10  16.7\n6 Pathum Thani  -1     0.0275   -10    10  16.7\n\n\nWe can also sort to show significant emerging hot/cold spots\n\nemerging &lt;- ehsa_tourist_numbers_thai_yearly %&gt;% \n  arrange(sl, abs(tau)) %&gt;% \n  slice(1:10)\nhead(emerging)\n\n# A tibble: 6 × 6\n  ADM1_EN               tau     sl     S     D  varS\n  &lt;chr&gt;               &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 Phetchaburi             1 0.0275    10    10  16.7\n2 Prachuap Khiri Khan     1 0.0275    10    10  16.7\n3 Bangkok                -1 0.0275   -10    10  16.7\n4 Nonthaburi             -1 0.0275   -10    10  16.7\n5 Pathum Thani           -1 0.0275   -10    10  16.7\n6 Samut Prakan           -1 0.0275   -10    10  16.7\n\n\nPerforming Emerging Hotspot Analysis\n\nehsa_tourist_numbers_thai_yearly &lt;- emerging_hotspot_analysis(\n  x = tourist_numbers_thai_yearly_st_nb, \n  .var = \"total_value\", \n  k = 1, \n  nsim = 99,\n  nb_col = \"nb\",  \n  wt_col = \"wt\"\n)\n\n\nggplot(data = ehsa_tourist_numbers_thai_yearly,\n       aes(x = classification)) +\n  geom_bar()\n\n\n\n\n\n\n\n\nNo Pattern Detected: Most areas (12.5) show no significant spatial hot or cold spot patterns. This shows that in these areas, the data does not show a specific hot or cold spot trend, and may be areas where changes are relatively uniform.\nSporadic Coldspot: There are some areas (around 1-2) that exhibit an intermittent coldspot pattern, which means that these areas exhibit lower values during certain periods of time that are not as good as their surroundings. Significantly.\nSporadic Hotspot: There are a few areas (approximately 1-2) that exhibit an intermittent hotspot pattern, meaning that these areas exhibit higher values during certain periods of time, showing contrast with their surroundings.\nVisualising EHSA\n\nb1_filtered_ehsa &lt;- b1_filtered %&gt;%\n  left_join(ehsa_tourist_numbers_thai_yearly,\n            by = join_by(ADM1_EN == location))\n\n\nb1_filtered_sig &lt;- b1_filtered_ehsa %&gt;%\n  filter(p_value &gt; 0.5)  \n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(b1_filtered_ehsa) +\n  tm_polygons(\"classification\") + \n  tm_borders(alpha = 0.5) +\n  tm_shape(b1_filtered_sig) +\n  tm_borders(alpha = 0.4)\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n\n\n\n\n\n\n\n\n\nThe yellow area represents the sporadic cold spot, which means that in these areas, the tourist stay rate shows a lower value at certain times, and this phenomenon is not continuous, but sporadic. Therefore, the number of the tourists in these areas is lower than that in the surrounding areas.\nThe purple area represents the sporadic hot spot, which means that these areas have a higher number of tourists at certain times, but this high stay rate phenomenon is also sporadic, not continuous. This shows that the tourist stay rate in these areas is higher than that in the surrounding areas, but this phenomenon is not fixed.\n\n\n\ntourist_numbers_local_monthly2019_st2 &lt;- tourist_numbers_local_monthly2019_st %&gt;%\n  activate(\"geometry\")\n\ntourist_numbers_local_monthly_st_nb &lt;- tourist_numbers_local_monthly2019_st2 %&gt;%\n  mutate(\n    centroid = st_centroid(geometry),\n    nb = include_self(st_contiguity(geometry)), \n    wt = st_inverse_distance(nb, centroid, scale = 1, alpha = 1),  \n    .before = 1\n  ) %&gt;%\n  set_nbs(\"nb\") %&gt;%\n  set_wts(\"wt\")\n\n\ngi_stars_tourist_numbers_local_monthly &lt;- tourist_numbers_local_monthly_st_nb %&gt;% \n  group_by(month) %&gt;% \n  mutate(\n    gi_star = local_gstar_perm(total_value,nb,wt)\n  ) %&gt;% \n  tidyr::unnest(gi_star)\n\n\nbkglm &lt;- gi_stars_tourist_numbers_local_monthly %&gt;% \n  ungroup() %&gt;% \n  filter(ADM1_EN == \"Bangkok\") %&gt;% \n  select(ADM1_EN, month, gi_star)\n\n\nggplot(data = bkglm, \n       aes(x = month, \n           y = gi_star)) +\n  geom_line() +\n  theme_light()\n\n\n\n\n\n\n\n\nPrinting Mann-Kendall test report\n\nbkglm %&gt;%\n  summarise(mk = list(\n    unclass(\n      Kendall::MannKendall(gi_star)))) %&gt;% \n  tidyr::unnest_wider(mk)\n\n# A tibble: 1 × 5\n     tau    sl     S     D  varS\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 -0.364 0.115   -24  66.0  213.\n\n\nFrom the above result, sl is the p-value &gt; 0.05. With reference to the results, we will not reject the hypothesis null but we can see that a downward trend at the end of 2019,which means the epidemic indeed affect the number of the foreign tourists.\nMann-Kendall test data.frame We can replicate this for each location by using group_by() of dplyr package.\n\nehsa_tourist_numbers_local_month &lt;- gi_stars_tourist_numbers_local_monthly %&gt;%\n  group_by(ADM1_EN) %&gt;%\n  summarise(mk = list(\n    unclass(\n      Kendall::MannKendall(gi_star)))) %&gt;%\n  tidyr::unnest_wider(mk)\nhead(ehsa_tourist_numbers_local_month)\n\n# A tibble: 6 × 6\n  ADM1_EN           tau      sl     S     D  varS\n  &lt;chr&gt;           &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 Ang Thong     -0.273  0.244     -18  66.0  213.\n2 Bangkok       -0.364  0.115     -24  66.0  213.\n3 Kanchanaburi   0.667  0.00319    44  66.0  213.\n4 Nakhon Pathom -0.0303 0.945      -2  66.0  213.\n5 Nonthaburi    -0.515  0.0236    -34  66.0  213.\n6 Pathum Thani  -0.455  0.0467    -30  66.0  213.\n\n\nWe can also sort to show significant emerging hot/cold spots\n\nemerging &lt;- ehsa_tourist_numbers_local_month %&gt;% \n  arrange(sl, abs(tau)) %&gt;% \n  slice(1:10)\nhead(emerging)\n\n# A tibble: 6 × 6\n  ADM1_EN         tau      sl     S     D  varS\n  &lt;chr&gt;         &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 Kanchanaburi  0.667 0.00319    44  66.0  213.\n2 Saraburi      0.667 0.00319    44  66.0  213.\n3 Suphan Buri   0.606 0.00749    40  66.0  213.\n4 Nonthaburi   -0.515 0.0236    -34  66.0  213.\n5 Samut Prakan -0.485 0.0335    -32  66.0  213.\n6 Pathum Thani -0.455 0.0467    -30  66.0  213.\n\n\nPerforming Emerging Hotspot Analysis\n\nehsa_tourist_numbers_local_month &lt;- emerging_hotspot_analysis(\n  x = tourist_numbers_local_monthly_st_nb, \n  .var = \"total_value\", \n  k = 1, \n  nsim = 99,\n  nb_col = \"nb\",  \n  wt_col = \"wt\"        \n)\n\n\nggplot(data = ehsa_tourist_numbers_local_month,\n       aes(x = classification)) +\n  geom_bar()\n\n\n\n\n\n\n\n\nNo Pattern Detected: Most areas show no significant spatial hot or cold spot patterns. This shows that in these areas, the data does not show a specific hot or cold spot trend, and may be areas where changes are relatively uniform.\nSporadic Coldspot: There are some areas (around 2) that exhibit an intermittent coldspot pattern, which means that these areas exhibit lower values during certain periods of time that are not as good as their surroundings. Significantly.\nSporadic Hotspot: There are a few areas (approximately 3) that exhibit an intermittent hotspot pattern, meaning that these areas exhibit higher values during certain periods of time, showing contrast with their surroundings.\nVisualising EHSA\n\nb1_filtered_ehsa_lm &lt;- b1_filtered %&gt;%\n  left_join(ehsa_tourist_numbers_local_month,\n            by = join_by(ADM1_EN == location))\n\n\nb1_filtered_sig_lm &lt;- b1_filtered_ehsa_lm %&gt;%\n  filter(p_value &lt; 0.5)  \n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(b1_filtered_ehsa_lm) +\n  tm_polygons(\"classification\") + \n  tm_borders(alpha = 0.5) +\n  tm_shape(b1_filtered_sig_lm) +\n  tm_borders(alpha = 0.4)\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n\n\n\n\n\n\n\n\n\n\n\n\ntourist_numbers_froeign_monthly2019_st2 &lt;- tourist_numbers_froeign_monthly2019_st %&gt;%\n  activate(\"geometry\")\n\ntourist_numbers_froeign_monthly_st_nb &lt;- tourist_numbers_froeign_monthly2019_st2 %&gt;%\n  mutate(\n    centroid = st_centroid(geometry),\n    nb = include_self(st_contiguity(geometry)), \n    wt = st_inverse_distance(nb, centroid, scale = 1, alpha = 1),  \n    .before = 1\n  ) %&gt;%\n  set_nbs(\"nb\") %&gt;%\n  set_wts(\"wt\")\n\n\ngi_stars_tourist_numbers_froeign_monthly &lt;- tourist_numbers_froeign_monthly_st_nb %&gt;% \n  group_by(month) %&gt;% \n  mutate(\n    gi_star = local_gstar_perm(total_value,nb,wt)\n  ) %&gt;% \n  tidyr::unnest(gi_star)\n\n\nbkgm &lt;- gi_stars_tourist_numbers_froeign_monthly %&gt;% \n  ungroup() %&gt;% \n  filter(ADM1_EN == \"Bangkok\") %&gt;% \n  select(ADM1_EN, month, gi_star)\n\n\nggplot(data = bkgm, \n       aes(x = month, \n           y = gi_star)) +\n  geom_line() +\n  theme_light()\n\n\n\n\n\n\n\n\nPrinting Mann-Kendall test report\n\nbkgm %&gt;%\n  summarise(mk = list(\n    unclass(\n      Kendall::MannKendall(gi_star)))) %&gt;% \n  tidyr::unnest_wider(mk)\n\n# A tibble: 1 × 5\n     tau     sl     S     D  varS\n   &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 -0.576 0.0112   -38  66.0  213.\n\n\nFrom the above result, sl is the p-value &lt; 0.05. With reference to the results, we will reject the hypothesis null and tau &lt; 0 infer that a downward trend.\nMann-Kendall test data.frame We can replicate this for each location by using group_by() of dplyr package.\n\nehsa_tourist_numbers_foreign_month &lt;- gi_stars_tourist_numbers_froeign_monthly %&gt;%\n  group_by(ADM1_EN) %&gt;%\n  summarise(mk = list(\n    unclass(\n      Kendall::MannKendall(gi_star)))) %&gt;%\n  tidyr::unnest_wider(mk)\nhead(ehsa_tourist_numbers_foreign_month)\n\n# A tibble: 6 × 6\n  ADM1_EN           tau     sl     S     D  varS\n  &lt;chr&gt;           &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 Ang Thong      0.212  0.373     14  66.0  213.\n2 Bangkok       -0.576  0.0112   -38  66.0  213.\n3 Kanchanaburi   0.0606 0.837      4  66.0  213.\n4 Nakhon Pathom  0.0909 0.732      6  66.0  213.\n5 Nonthaburi     0.0606 0.837      4  66.0  213.\n6 Pathum Thani   0.182  0.451     12  66.0  213.\n\n\nWe can also sort to show significant emerging hot/cold spots\n\nemerging &lt;- ehsa_tourist_numbers_foreign_month %&gt;% \n  arrange(sl, abs(tau)) %&gt;% \n  slice(1:10)\nhead(emerging)\n\n# A tibble: 6 × 6\n  ADM1_EN                     tau      sl     S     D  varS\n  &lt;chr&gt;                     &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 Saraburi                  0.636 0.00493    42  66.0  213.\n2 Bangkok                  -0.576 0.0112    -38  66.0  213.\n3 Samut Prakan             -0.455 0.0467    -30  66.0  213.\n4 Ang Thong                 0.212 0.373      14  66.0  213.\n5 Pathum Thani              0.182 0.451      12  66.0  213.\n6 Phra Nakhon Si Ayutthaya  0.152 0.537      10  66.0  213.\n\n\nPerforming Emerging Hotspot Analysis\n\nehsa_tourist_numbers_foreign_month &lt;- emerging_hotspot_analysis(\n  x = tourist_numbers_froeign_monthly_st_nb, \n  .var = \"total_value\", \n  k = 1, \n  nsim = 99,\n  nb_col = \"nb\",  \n  wt_col = \"wt\"        \n)\n\n\nggplot(data = ehsa_tourist_numbers_foreign_month,\n       aes(x = classification)) +\n  geom_bar()\n\n\n\n\n\n\n\n\nNo pattern detected: This is the largest category, with more than 10 areas with no significant pattern detected.\nSporadic coldspot: This type of area ranks second, with about 3 areas classified as sporadic coldspots, indicating that there are significantly lower values than the surrounding areas during certain periods.\nSporadic hotspot: About 2 areas are classified as sporadic hotspots, indicating that these areas have significantly higher values than the surrounding areas during certain periods.\nPersistent hotspot: Almost few areas in this figure are detected as persistent hotspots, indicating that there are very few areas in this category.\nVisualising EHSA\n\nb1_filtered_ehsa_fm &lt;- b1_filtered %&gt;%\n  left_join(ehsa_tourist_numbers_foreign_month,\n            by = join_by(ADM1_EN == location))\n\n\nb1_filtered_sig_fm &lt;- b1_filtered_ehsa_fm %&gt;%\n  filter(p_value &lt; 0.5)  \n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(b1_filtered_ehsa_fm) +\n  tm_polygons(\"classification\") + \n  tm_borders(alpha = 0.5) +\n  tm_shape(b1_filtered_sig_fm) +\n  tm_borders(alpha = 0.4)\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n\n\n\n\n\n\n\n\n\n\n\n\nratio_tourist_stay_yearly_st2 &lt;- ratio_tourist_stay_yearly_st %&gt;%\n  activate(\"geometry\")\n\nratio_tourist_stay_yearly_st_nb &lt;- ratio_tourist_stay_yearly_st2 %&gt;%\n  mutate(\n    centroid = st_centroid(geometry),\n    nb = include_self(st_contiguity(geometry)), \n    wt = st_inverse_distance(nb, centroid, scale = 1, alpha = 1),  \n    .before = 1\n  ) %&gt;%\n  set_nbs(\"nb\") %&gt;%\n  set_wts(\"wt\")\n\n\ngi_stars_ratio_tourist_stay_yearly &lt;- ratio_tourist_stay_yearly_st_nb %&gt;% \n  group_by(year) %&gt;% \n  mutate(\n    gi_star = local_gstar_perm(average_ratio,nb,wt)\n  ) %&gt;% \n  tidyr::unnest(gi_star)\n\n\nbkgry &lt;- gi_stars_ratio_tourist_stay_yearly %&gt;% \n  ungroup() %&gt;% \n  select(ADM1_EN, year, gi_star)\n\n\nggplot(data = bkgry, \n       aes(x = year, \n           y = gi_star)) +\n  geom_line() +\n  theme_light()\n\n\n\n\n\n\n\n\nPrinting Mann-Kendall test report\n\nbkgry %&gt;%\n  summarise(mk = list(\n    unclass(\n      Kendall::MannKendall(gi_star)))) %&gt;% \n  tidyr::unnest_wider(mk)\n\n# A tibble: 1 × 5\n      tau    sl     S     D   varS\n    &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;\n1 -0.0576 0.452  -182 3160. 57933.\n\n\nn the above result, sl is the p-value &gt; 0.05. With reference to the results, we will reject the hypothesis null and infer that a downward trend.\nMann-Kendall test data.frame We can replicate this for each location by using group_by() of dplyr package.\n\nehsa_ratio_tourist_stay_yearly &lt;- gi_stars_ratio_tourist_stay_yearly %&gt;%\n  group_by(ADM1_EN) %&gt;%\n  summarise(mk = list(\n    unclass(\n      Kendall::MannKendall(gi_star)))) %&gt;%\n  tidyr::unnest_wider(mk)\nhead(ehsa_ratio_tourist_stay_yearly)\n\n# A tibble: 6 × 6\n  ADM1_EN          tau     sl     S     D  varS\n  &lt;chr&gt;          &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 Ang Thong     -0.800 0.0864    -8    10  16.7\n2 Bangkok        0     1          0    10  16.7\n3 Kanchanaburi  -0.400 0.462     -4    10  16.7\n4 Nakhon Pathom -0.800 0.0864    -8    10  16.7\n5 Nonthaburi     0     1          0    10  16.7\n6 Pathum Thani   0.400 0.462      4    10  16.7\n\n\nWe can also sort to show significant emerging hot/cold spots\n\nemerging &lt;- ehsa_ratio_tourist_stay_yearly %&gt;% \n  arrange(sl, abs(tau)) %&gt;% \n  slice(1:10)\nhead(emerging)\n\n# A tibble: 6 × 6\n  ADM1_EN                     tau     sl     S     D  varS\n  &lt;chr&gt;                     &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 Prachuap Khiri Khan       1     0.0275    10    10  16.7\n2 Suphan Buri              -1     0.0275   -10    10  16.7\n3 Ang Thong                -0.800 0.0864    -8    10  16.7\n4 Nakhon Pathom            -0.800 0.0864    -8    10  16.7\n5 Sing Buri                -0.800 0.0864    -8    10  16.7\n6 Phra Nakhon Si Ayutthaya -0.600 0.221     -6    10  16.7\n\n\nPerforming Emerging Hotspot Analysis\n\nehsa_ratio_tourist_stay_yearly &lt;- emerging_hotspot_analysis(\n  x = ratio_tourist_stay_yearly_st_nb, \n  .var = \"average_ratio\", \n  k = 1, \n  nsim = 99,\n  nb_col = \"nb\",  \n  wt_col = \"wt\"        \n)\n\n\nggplot(data = ehsa_ratio_tourist_stay_yearly,\n       aes(x = classification)) +\n  geom_bar()\n\n\n\n\n\n\n\n\nNo pattern detected means these areas do not have significant clustering (hotspot) or sparse (coldspot) phenomena, and the stay rate may be affected by other external factors rather than spatial factors.\nAreas with occasional hotspots indicate that the stay rate of tourists in these areas is high and significantly different from the stay rate in surrounding areas. This phenomenon may be related to specific tourist attractions, infrastructure or seasonal activities\nVisualising EHSA\n\nb1_filtered_ehsa_sy &lt;- b1_filtered %&gt;%\n  left_join(ehsa_ratio_tourist_stay_yearly,\n            by = join_by(ADM1_EN == location))\n\n\nb1_filtered_sig_sy &lt;- b1_filtered_ehsa_sy %&gt;%\n  filter(p_value &gt; 0.5)  \n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(b1_filtered_ehsa_sy) +\n  tm_polygons(\"classification\") + \n  tm_borders(alpha = 0.5) +\n  tm_shape(b1_filtered_sig_sy) +\n  tm_borders(alpha = 0.4)\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them)."
  },
  {
    "objectID": "Take_home_Ex/Take_home_Ex02/Take_home_Ex02.html#summary-1",
    "href": "Take_home_Ex/Take_home_Ex02/Take_home_Ex02.html#summary-1",
    "title": "Take home Exercise2",
    "section": "",
    "text": "Through EHSA analysis, some regions show different types of hotspots and coldspots. Among them, several regions are shown as “sporadic hotspots”, that is, the stay ratio in these regions has intermittent high hotspots in the time period. Some areas in the north are shown as cold spots, which means that the tourist stay ratio is low and shows a regular decline. Monthly analysis of foreign tourists:\nFrom the EHSA analysis, it is known that the number of foreign tourists fluctuates between months, and some regions show hotspots, especially in areas with developed tourism. Sporadic hotspots indicate that these areas will attract a large number of foreign tourists in certain months. Monthly analysis of local tourists:\nCompared with foreign tourists, the hotspot areas of local tourists are more concentrated. In particular, some core tourist cities have relatively stable monthly tourist volume and form hotspots, while the cold spots in the periphery may indicate that these places are not common destinations for local tourists. Annual tourist data:\nAnalyzed by year, different types of patterns are shown across the country. Popular tourist areas such as the southern coastal areas have long remained hot spots, while some areas have shown cold spots or no obvious patterns. The emergence of these patterns may be related to changes in the economy, transportation or infrastructure."
  },
  {
    "objectID": "Take_home_Ex/Take_home_Ex02/Take_home_Ex02.html#references",
    "href": "Take_home_Ex/Take_home_Ex02/Take_home_Ex02.html#references",
    "title": "Take home Exercise2",
    "section": "",
    "text": "1.Tin Seong Kam.Spatail weight and applications 8.9.10\n2.Tin Seong Kam.In-class Exercise 4.5.6\n3.Spacetime and spacetime cubes\n4.Kim, M.; Lee, S. (2023). Identification of Emerging Roadkill Hotspots on Korean Expressways Using Space–Time Cubes. International Journal of Environmental Research and Public Health, 20, 4896. https://doi.org/10.3390/ijerph20064896."
  },
  {
    "objectID": "In-class_EX/In-class_EX08/In-class_EX08.html",
    "href": "In-class_EX/In-class_EX08/In-class_EX08.html",
    "title": "In-Class Exercise 8",
    "section": "",
    "text": "pacman::p_load(tidyverse, sf, httr, jsonlite, rvest)\n\n\nresale &lt;- read_csv(\"data/rawdata/resale.csv\") %&gt;%\n  filter(month &gt;= \"2023-01\" & month &lt;= \"2024-09\")\n\nRows: 192234 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (8): month, town, flat_type, block, street_name, storey_range, flat_mode...\ndbl (3): floor_area_sqm, lease_commence_date, resale_price\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nresale_tidy &lt;- resale %&gt;%\n  mutate(address = paste(block,street_name)) %&gt;% # combine with each other \n  mutate(remaining_lease_yr = as.integer(    #\n    str_sub(remaining_lease, 0, 2)))%&gt;%  \n  mutate(remaining_lease_mth = as.integer(\n    str_sub(remaining_lease, 9, 11)))\n\n\nresale_selected &lt;- resale_tidy %&gt;%\n  filter(month == \"2024-09\")\n\n\nadd_list &lt;- sort(unique(resale_selected$address))   #just a list only have the address \n\n\nget_coords &lt;- function(add_list){\n  \n  # Create a data frame to store all retrieved coordinates\n  postal_coords &lt;- data.frame()\n    \n  for (i in add_list){\n    #print(i)\n\n    r &lt;- GET('https://www.onemap.gov.sg/api/common/elastic/search?',\n           query=list(searchVal=i,\n                     returnGeom='Y',\n                     getAddrDetails='Y'))\n    data &lt;- fromJSON(rawToChar(r$content))\n    found &lt;- data$found\n    res &lt;- data$results\n    \n    # Create a new data frame for each address\n    new_row &lt;- data.frame()\n    \n    # If single result, append \n    if (found == 1){\n      postal &lt;- res$POSTAL \n      lat &lt;- res$LATITUDE\n      lng &lt;- res$LONGITUDE\n      new_row &lt;- data.frame(address= i, \n                            postal = postal, \n                            latitude = lat, \n                            longitude = lng)\n    }\n    \n    # If multiple results, drop NIL and append top 1\n    else if (found &gt; 1){\n      # Remove those with NIL as postal\n      res_sub &lt;- res[res$POSTAL != \"NIL\", ]\n      \n      # Set as NA first if no Postal\n      if (nrow(res_sub) == 0) {\n          new_row &lt;- data.frame(address= i, \n                                postal = NA, \n                                latitude = NA, \n                                longitude = NA)\n      }\n      \n      else{\n        top1 &lt;- head(res_sub, n = 1)\n        postal &lt;- top1$POSTAL \n        lat &lt;- top1$LATITUDE    # return x and y\n        lng &lt;- top1$LONGITUDE\n        new_row &lt;- data.frame(address= i, \n                              postal = postal, \n                              latitude = lat, \n                              longitude = lng)\n      }\n    }\n\n    else {\n      new_row &lt;- data.frame(address= i, \n                            postal = NA,  \n                            latitude = NA, # take care of any possible data \n                            longitude = NA)\n    }\n    \n    # Add the row\n    postal_coords &lt;- rbind(postal_coords, new_row)\n  }\n  return(postal_coords)\n}\n\n\ncoords &lt;- get_coords(add_list)  # GS 84 # postal code is chr\n\n\nsaveRDS(coords, \"data/rds/coords.rds\")\n\n\ncoords &lt;- readRDS(\"data/rds/coords.rds\")\n\n\nvif &lt;- performance::check_collinearity(price_mlr)\nkable(vif,\n      caption=\"Variance Inflation Factor (VIF) Result\") %&gt;%\n\n\nplot(vif)+\n  theme(axis.text.x = element_text(angle = 45,hjust = 1))"
  }
]