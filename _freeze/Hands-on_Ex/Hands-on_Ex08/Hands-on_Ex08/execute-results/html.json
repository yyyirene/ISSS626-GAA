{
  "hash": "187f528ec620015b825f168c0240f0f4",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Hands-on Exercise 8\"\nauthor: \"yang yayong\"\ndate: \"Oct 18 2024\"\ndate-modified: \"last-modified\"\nexecute:\n  eval: true\n  echo: true\n  message: false\n  freeze: true\n---\n\n\n\n# **14Â  Geographically Weighted Predictive Models**\n\n## **14.1 Overview**\n\nPredictive modelling uses statistical learning or machine learning techniques to predict outcomes. By and large, the event one wants to predict is in the future. However, a set of known outcome and predictors (also known as variables) will be used to calibrate the predictive models.\n\nGeospatial predictive modelling is conceptually rooted in the principle that the occurrences of events being modeled are limited in distribution. When geographically referenced data are used, occurrences of events are neither uniform nor random in distribution over space. There are geospatial factors (infrastructure, sociocultural, topographic, etc.) that constrain and influence where the locations of events occur. Geospatial predictive modeling attempts to describe those constraints and influences by spatially correlating occurrences of historical geospatial locations with environmental factors that represent those constraints and influences.\n\n### **14.1.1 Learning outcome**\n\nIn this in-class exercise, wewill learn how to build predictive model by using geographical random forest method. By the end of this hands-on exercise, we will acquire the skills of:\n\n-   preparing training and test data sets by using appropriate data sampling methods,\n\n-   calibrating predictive models by using both geospatial statistical learning and machine learning methods,\n\n-   comparing and selecting the best model for predicting the future outcome,\n\n-   predicting the future outcomes by using the best model calibrated.c\n\n## **14.2 The Data**\n\n-   **Aspatial dataset**:\n\n    -   HDB Resale data: a list of HDB resale transacted prices in Singapore from Jan 2017 onwards. It is in csv format which can be downloaded from Data.gov.sg.\n\n-   **Geospatial dataset**:\n\n    -   *MP14_SUBZONE_WEB_PL*: a polygon feature data providing information of URA 2014 Master Plan Planning Subzone boundary data. It is in ESRI shapefile format. This data set was also downloaded from Data.gov.sg\n\n-   **Locational factors with geographic coordinates**:\n\n    -   Downloaded from **Data.gov.sg**.\n\n        -   **Eldercare** data is a list of eldercare in Singapore. It is in shapefile format.\n\n        -   **Hawker Centre** data is a list of hawker centres in Singapore. It is in geojson format.\n\n        -   **Parks** data is a list of parks in Singapore. It is in geojson format.\n\n        -   **Supermarket** data is a list of supermarkets in Singapore. It is in geojson format.\n\n        -   **CHAS clinics** data is a list of CHAS clinics in Singapore. It is in geojson format.\n\n        -   **Childcare service** data is a list of childcare services in Singapore. It is in geojson format.\n\n        -   **Kindergartens** data is a list of kindergartens in Singapore. It is in geojson format.\n\n    -   Downloaded from **Datamall.lta.gov.sg**.\n\n        -   **MRT** data is a list of MRT/LRT stations in Singapore with the station names and codes. It is in shapefile format.\n\n        -   **Bus stops** data is a list of bus stops in Singapore. It is in shapefile format.\n\n-   **Locational factors without geographic coordinates**:\n\n    -   Downloaded from **Data.gov.sg**.\n\n        -   **Primary school** data is extracted from the list on General information of schools from data.gov portal. It is in csv format.\n\n    -   Retrieved/Scraped from **other sources**\n\n        -   **CBD** coordinates obtained from Google.\n\n        -   **Shopping malls** data is a list of Shopping malls in Singapore obtained from [Wikipedia](https://en.wikipedia.org/wiki/List_of_shopping_malls_in_Singapore).\n\n        -   **Good primary schools** is a list of primary schools that are ordered in ranking in terms of popularity and this can be found at [Local Salary Forum](https://www.salary.sg/2021/best-primary-schools-2021-by-popularity).\n\n## **14.3 Installing and Loading R packages**\n\nThis code chunk performs 3 tasks:\n\n-   A list called packages will be created and will consists of all the R packages required to accomplish this exercise.\n\n-   Check if R packages on package have been installed in R and if not, they will be installed.\n\n-   After all the R packages have been installed, they will be loaded.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, spdep, GWmodel, SpatialML, tmap, rsample, Metrics, tidyverse)\n```\n:::\n\n\n\n## **14.4 Preparing Data**\n\n### **14.4.1 Reading data file to rds**\n\nReading the input data sets. It is in simple feature data frame.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmdata <- readRDS(\"data/mdata.rds\")\n```\n:::\n\n\n\n### **14.4.2 Data Sampling**\n\nThe entire data are split into training and test data sets with 65% and 35% respectively by using *initial_split()* of **rsample** package. rsample is one of the package of tigymodels.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\nresale_split <- initial_split(mdata, \n                              prop = 6.5/10,)\ntrain_data <- training(resale_split) #need to save them\ntest_data <- testing(resale_split)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsaveRDS(train_data,\"data/model/train_data.rds\")\nsaveRDS(train_data,\"data/model/test_data.rds\")\n```\n:::\n\n\n\n## **14.5 Computing Correlation Matrix**\n\nBefore loading the predictors into a predictive model, it is always a good practice to use correlation matrix to examine if there is sign of multicolinearity.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmdata_nogeo <- mdata %>%\n  st_drop_geometry()\ncorrplot::corrplot(cor(mdata_nogeo[, 2:17]), \n                   diag = FALSE, \n                   order = \"AOE\",\n                   tl.pos = \"td\", \n                   tl.cex = 0.5, \n                   method = \"number\", \n                   type = \"upper\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex08_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\n::: callout-note\nThe correlation matrix above shows that all the correlation values are below 0.8. Hence, there is no sign of multicollinearity.\n:::\n\n## **14.6 Retriving the Stored Data**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrain_data <- readRDS(\"data/model/train_data.rds\") \ntest_data <- readRDS(\"data/model/test_data.rds\")\n```\n:::\n\n\n\n## **14.7 Building a non-spatial multiple linear regression**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprice_mlr <- lm(resale_price ~ floor_area_sqm +\n                  storey_order + remaining_lease_mths +\n                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +\n                  PROX_MRT + PROX_PARK + PROX_MALL + \n                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                  WITHIN_1KM_PRISCH,\n                data=train_data)\nsummary(price_mlr)    #olsrr:: ols_regress.....\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = resale_price ~ floor_area_sqm + storey_order + remaining_lease_mths + \n    PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER + PROX_MRT + PROX_PARK + \n    PROX_MALL + PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN + \n    WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + WITHIN_1KM_PRISCH, \n    data = train_data)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-205193  -39120   -1930   36545  472355 \n\nCoefficients:\n                           Estimate Std. Error t value Pr(>|t|)    \n(Intercept)              107601.073  10601.261  10.150  < 2e-16 ***\nfloor_area_sqm             2780.698     90.579  30.699  < 2e-16 ***\nstorey_order              14299.298    339.115  42.167  < 2e-16 ***\nremaining_lease_mths        344.490      4.592  75.027  < 2e-16 ***\nPROX_CBD                 -16930.196    201.254 -84.124  < 2e-16 ***\nPROX_ELDERLYCARE         -14441.025    994.867 -14.516  < 2e-16 ***\nPROX_HAWKER              -19265.648   1273.597 -15.127  < 2e-16 ***\nPROX_MRT                 -32564.272   1744.232 -18.670  < 2e-16 ***\nPROX_PARK                 -5712.625   1483.885  -3.850 0.000119 ***\nPROX_MALL                -14717.388   2007.818  -7.330 2.47e-13 ***\nPROX_SUPERMARKET         -26881.938   4189.624  -6.416 1.46e-10 ***\nWITHIN_350M_KINDERGARTEN   8520.472    632.812  13.464  < 2e-16 ***\nWITHIN_350M_CHILDCARE     -4510.650    354.015 -12.741  < 2e-16 ***\nWITHIN_350M_BUS             813.493    222.574   3.655 0.000259 ***\nWITHIN_1KM_PRISCH         -8010.834    491.512 -16.298  < 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 61650 on 10320 degrees of freedom\nMultiple R-squared:  0.7373,\tAdjusted R-squared:  0.737 \nF-statistic:  2069 on 14 and 10320 DF,  p-value: < 2.2e-16\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsaveRDS(price_mlr, \"data/model/price_mlr.rds\" ) \n```\n:::\n\n\n\n## **14.8 gwr predictive method**\n\nIn this section, wewill learn how to calibrate a model to predict HDB resale price by using geographically weighted regression method of [**GWmodel**](https://cran.r-project.org/web/packages/GWmodel/index.html) package.\n\n### **14.8.1 Converting the sf data.frame to SpatialPointDataFrame**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrain_data_sp <- as_Spatial(train_data)\ntrain_data_sp\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nclass       : SpatialPointsDataFrame \nfeatures    : 10335 \nextent      : 11597.31, 42623.63, 28217.39, 48741.06  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 17\nnames       : resale_price, floor_area_sqm, storey_order, remaining_lease_mths,          PROX_CBD,     PROX_ELDERLYCARE,        PROX_HAWKER,           PROX_MRT,          PROX_PARK,   PROX_GOOD_PRISCH,        PROX_MALL,            PROX_CHAS,     PROX_SUPERMARKET, WITHIN_350M_KINDERGARTEN, WITHIN_350M_CHILDCARE, ... \nmin values  :       218000,             74,            1,                  555, 0.999393538715878, 1.98943787433087e-08, 0.0333358643817954, 0.0220407324774434, 0.0441643212802781, 0.0652540365486641,                0, 6.20621206270077e-09, 1.21715176356525e-07,                        0,                     0, ... \nmax values  :      1186888,            133,           17,                 1164,  19.6500691667807,     3.30163731686804,   2.86763031236184,   2.13060636038504,   2.41313695915468,   10.6223726149914, 2.27100643784442,    0.808332738794272,     1.57131703651196,                        7,                    20, ... \n```\n\n\n:::\n:::\n\n\n\n### **14.8.2 Computing adaptive bandwidth**\n\nNext, `bw.gwr()` of **GWmodel** package will be used to determine the optimal bandwidth to be used.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_adaptive <- bw.gwr(resale_price ~ floor_area_sqm +\n                  storey_order + remaining_lease_mths +\n                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +\n                  PROX_MRT + PROX_PARK + PROX_MALL + \n                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                  WITHIN_1KM_PRISCH,\n                  data=train_data_sp,\n                  approach=\"CV\",\n                  kernel=\"gaussian\",\n                  adaptive=TRUE,\n                  longlat=FALSE)\n```\n:::\n\n\n\n::: callout-note\nThe code chunk below is used to determine adaptive bandwidth and CV method is used to determine the optimal bandwidth.\n:::\n\nThe result shows that 40 neighbour points will be the optimal bandwidth to be used if adaptive bandwidth is used for this data set.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsaveRDS(bw_adaptive, \"data/model/bw_adaptive.rds\")\n```\n:::\n\n\n\n### **14.8.3 Constructing the adaptive bandwidth gwr model**\n\nFirst, let us call the save bandwidth by using the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_adaptive <- readRDS(\"data/model/bw_adaptive.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr_adaptive <- gwr.basic(formula = resale_price ~\n                            floor_area_sqm + storey_order +\n                            remaining_lease_mths + PROX_CBD + \n                            PROX_ELDERLYCARE + PROX_HAWKER +\n                            PROX_MRT + PROX_PARK + PROX_MALL + \n                            PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                            WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                            WITHIN_1KM_PRISCH,\n                          data=train_data_sp, ##\n                          bw=bw_adaptive, \n                          kernel = 'gaussian', \n                          adaptive=TRUE,\n                          longlat = FALSE)\n\n#gw no need sp anymore,sf now \n#spatial ml  \n```\n:::\n\n\n\nThe code chunk below will be used to save the model in rds format for future use.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsaveRDS(gwr_adaptive, \"data/model/gwr_adaptive.rds\")\n```\n:::\n\n\n\n### **14.8.4 Retrieve gwr output object**\n\nThe code chunk below will be used to retrieve the save gwr model object.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr_adaptive <- readRDS(\"data/model/gwr_adaptive.rds\")\n```\n:::\n\n\n\nThe code below can be used to display the model output.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr_adaptive\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n   Program starts at: 2024-10-22 22:58:27.769389 \n   Call:\n   gwr.basic(formula = resale_price ~ floor_area_sqm + storey_order + \n    remaining_lease_mths + PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER + \n    PROX_MRT + PROX_PARK + PROX_MALL + PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN + \n    WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + WITHIN_1KM_PRISCH, \n    data = train_data_sp, bw = bw_adaptive, kernel = \"gaussian\", \n    adaptive = TRUE, longlat = FALSE)\n\n   Dependent (y) variable:  resale_price\n   Independent variables:  floor_area_sqm storey_order remaining_lease_mths PROX_CBD PROX_ELDERLYCARE PROX_HAWKER PROX_MRT PROX_PARK PROX_MALL PROX_SUPERMARKET WITHIN_350M_KINDERGARTEN WITHIN_350M_CHILDCARE WITHIN_350M_BUS WITHIN_1KM_PRISCH\n   Number of data points: 10335\n   ***********************************************************************\n   *                    Results of Global Regression                     *\n   ***********************************************************************\n\n   Call:\n    lm(formula = formula, data = data)\n\n   Residuals:\n    Min      1Q  Median      3Q     Max \n-205193  -39120   -1930   36545  472355 \n\n   Coefficients:\n                              Estimate Std. Error t value Pr(>|t|)    \n   (Intercept)              107601.073  10601.261  10.150  < 2e-16 ***\n   floor_area_sqm             2780.698     90.579  30.699  < 2e-16 ***\n   storey_order              14299.298    339.115  42.167  < 2e-16 ***\n   remaining_lease_mths        344.490      4.592  75.027  < 2e-16 ***\n   PROX_CBD                 -16930.196    201.254 -84.124  < 2e-16 ***\n   PROX_ELDERLYCARE         -14441.025    994.867 -14.516  < 2e-16 ***\n   PROX_HAWKER              -19265.648   1273.597 -15.127  < 2e-16 ***\n   PROX_MRT                 -32564.272   1744.232 -18.670  < 2e-16 ***\n   PROX_PARK                 -5712.625   1483.885  -3.850 0.000119 ***\n   PROX_MALL                -14717.388   2007.818  -7.330 2.47e-13 ***\n   PROX_SUPERMARKET         -26881.938   4189.624  -6.416 1.46e-10 ***\n   WITHIN_350M_KINDERGARTEN   8520.472    632.812  13.464  < 2e-16 ***\n   WITHIN_350M_CHILDCARE     -4510.650    354.015 -12.741  < 2e-16 ***\n   WITHIN_350M_BUS             813.493    222.574   3.655 0.000259 ***\n   WITHIN_1KM_PRISCH         -8010.834    491.512 -16.298  < 2e-16 ***\n\n   ---Significance stars\n   Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 \n   Residual standard error: 61650 on 10320 degrees of freedom\n   Multiple R-squared: 0.7373\n   Adjusted R-squared: 0.737 \n   F-statistic:  2069 on 14 and 10320 DF,  p-value: < 2.2e-16 \n   ***Extra Diagnostic information\n   Residual sum of squares: 3.922202e+13\n   Sigma(hat): 61610.08\n   AIC:  257320.2\n   AICc:  257320.3\n   BIC:  247249\n   ***********************************************************************\n   *          Results of Geographically Weighted Regression              *\n   ***********************************************************************\n\n   *********************Model calibration information*********************\n   Kernel function: gaussian \n   Adaptive bandwidth: 40 (number of nearest neighbours)\n   Regression points: the same locations as observations are used.\n   Distance metric: Euclidean distance metric is used.\n\n   ****************Summary of GWR coefficient estimates:******************\n                                   Min.     1st Qu.      Median     3rd Qu.\n   Intercept                -3.2594e+08 -4.7727e+05 -8.3004e+03  5.5025e+05\n   floor_area_sqm           -2.8714e+04  1.4475e+03  2.3011e+03  3.3900e+03\n   storey_order              3.3186e+03  8.5899e+03  1.0826e+04  1.3397e+04\n   remaining_lease_mths     -1.4431e+03  2.6063e+02  3.9048e+02  5.2865e+02\n   PROX_CBD                 -1.0837e+07 -5.7697e+04 -1.3787e+04  2.6552e+04\n   PROX_ELDERLYCARE         -3.2291e+07 -4.0643e+04  1.0562e+04  6.1054e+04\n   PROX_HAWKER              -2.3985e+08 -5.1365e+04  3.0026e+03  6.4287e+04\n   PROX_MRT                 -1.1660e+07 -1.0488e+05 -4.9373e+04  5.1037e+03\n   PROX_PARK                -6.5961e+06 -4.8671e+04 -8.8128e+02  5.3498e+04\n   PROX_MALL                -1.8112e+07 -7.4238e+04 -1.3982e+04  4.9779e+04\n   PROX_SUPERMARKET         -4.5761e+06 -6.3461e+04 -1.7429e+04  3.5616e+04\n   WITHIN_350M_KINDERGARTEN -4.1881e+05 -6.0040e+03  9.0209e+01  4.7127e+03\n   WITHIN_350M_CHILDCARE    -1.0273e+05 -2.2375e+03  2.6668e+02  2.6388e+03\n   WITHIN_350M_BUS          -1.1757e+05 -1.4719e+03  1.1626e+02  1.7584e+03\n   WITHIN_1KM_PRISCH        -6.6465e+05 -5.5959e+03  2.6916e+02  5.7500e+03\n                                  Max.\n   Intercept                1.6493e+08\n   floor_area_sqm           5.0907e+04\n   storey_order             2.9537e+04\n   remaining_lease_mths     1.8119e+03\n   PROX_CBD                 2.2489e+07\n   PROX_ELDERLYCARE         8.2444e+07\n   PROX_HAWKER              5.9654e+06\n   PROX_MRT                 2.0189e+08\n   PROX_PARK                1.5224e+07\n   PROX_MALL                1.0443e+07\n   PROX_SUPERMARKET         3.8330e+06\n   WITHIN_350M_KINDERGARTEN 6.6799e+05\n   WITHIN_350M_CHILDCARE    1.0802e+05\n   WITHIN_350M_BUS          3.7313e+04\n   WITHIN_1KM_PRISCH        5.0262e+05\n   ************************Diagnostic information*************************\n   Number of data points: 10335 \n   Effective number of parameters (2trace(S) - trace(S'S)): 1730.101 \n   Effective degrees of freedom (n-2trace(S) + trace(S'S)): 8604.899 \n   AICc (GWR book, Fotheringham, et al. 2002, p. 61, eq 2.33): 238871.8 \n   AIC (GWR book, Fotheringham, et al. 2002,GWR p. 96, eq. 4.22): 237036.9 \n   BIC (GWR book, Fotheringham, et al. 2002,GWR p. 61, eq. 2.34): 238209 \n   Residual sum of squares: 4.829177e+12 \n   R-square value:  0.9676571 \n   Adjusted R-square value:  0.9611535 \n\n   ***********************************************************************\n   Program stops at: 2024-10-22 22:59:01.411642 \n```\n\n\n:::\n:::\n\n\n\n### **14.8.5 Converting the test data from sf data.frame to SpatialPointDataFrame**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_data_sp <- test_data %>%\n  as_Spatial()\n\ntest_data_sp\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nclass       : SpatialPointsDataFrame \nfeatures    : 10335 \nextent      : 11597.31, 42623.63, 28217.39, 48741.06  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 17\nnames       : resale_price, floor_area_sqm, storey_order, remaining_lease_mths,          PROX_CBD,     PROX_ELDERLYCARE,        PROX_HAWKER,           PROX_MRT,          PROX_PARK,   PROX_GOOD_PRISCH,        PROX_MALL,            PROX_CHAS,     PROX_SUPERMARKET, WITHIN_350M_KINDERGARTEN, WITHIN_350M_CHILDCARE, ... \nmin values  :       218000,             74,            1,                  555, 0.999393538715878, 1.98943787433087e-08, 0.0333358643817954, 0.0220407324774434, 0.0441643212802781, 0.0652540365486641,                0, 6.20621206270077e-09, 1.21715176356525e-07,                        0,                     0, ... \nmax values  :      1186888,            133,           17,                 1164,  19.6500691667807,     3.30163731686804,   2.86763031236184,   2.13060636038504,   2.41313695915468,   10.6223726149914, 2.27100643784442,    0.808332738794272,     1.57131703651196,                        7,                    20, ... \n```\n\n\n:::\n:::\n\n\n\n### **14.8.6 Computing adaptive bandwidth for the test data**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr_bw_test_adaptive <- bw.gwr(resale_price ~ floor_area_sqm +\n                  storey_order + remaining_lease_mths +\n                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +\n                  PROX_MRT + PROX_PARK + PROX_MALL + \n                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                  WITHIN_1KM_PRISCH,\n                  data=test_data_sp, #\n                  approach=\"CV\",  # gwr 1.cv 2.aic method \n                  kernel=\"gaussian\",\n                  adaptive=TRUE,\n                  longlat=FALSE) \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsaveRDS(gwr_bw_test_adaptive,\"data/model/gwr_bw_test_adaptive.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr_bw_test_adaptive <- readRDS(\"data/model/gwr_bw_test_adaptive.rds\")\n```\n:::\n\n\n\n### **14.8.7 Computing predicted values of the test data**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr_pred <- gwr.predict(formula = resale_price ~\n                          floor_area_sqm + storey_order + \n                          remaining_lease_mths + PROX_CBD +  \n                          PROX_ELDERLYCARE + PROX_HAWKER +  \n                          PROX_MRT + PROX_PARK + PROX_MALL +  \n                          PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN + \n                          WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +   \n                          WITHIN_1KM_PRISCH,   \n                        data=train_data_sp,    \n                        predictdata = test_data_sp,    \n                        bw=40,     \n                        kernel = 'gaussian',    \n                        adaptive=TRUE,     \n                        longlat = FALSE)    \n```\n:::\n\n\n\n## **14.9 Preparing coordinates data**\n\n### **14.9.1 Extracting coordinates data**\n\nThe code chunk below extract the x,y coordinates of the full, training and test data sets.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoords <- st_coordinates(mdata)\ncoords_train <- st_coordinates(train_data) #extract the train_data \ncoords_test <- st_coordinates(test_data)\n```\n:::\n\n\n\nBefore continue, we write all the output into rds for future used.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsaveRDS(coords_train, \"data/model/coords_train.rds\" )  \nsaveRDS(coords_test, \"data/model/coords_test.rds\" )    \n```\n:::\n\n\n\n### **14.9.2 Droping geometry field**\n\nFirst, we will drop geometry column of the sf data.frame by using `st_drop_geometry()` of sf package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrain_data <- train_data %>%   ###this package will specific focus on \n  st_drop_geometry()  \n```\n:::\n\n\n\n## **14.10 Calibrating Random Forest Model**\n\nIn this section, we will learn how to calibrate a model to predict HDB resale price by using random forest function of [**ranger**](https://cran.r-project.org/web/packages/ranger/index.html) package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\nrf <- ranger(resale_price ~ floor_area_sqm + storey_order + \n               remaining_lease_mths + PROX_CBD + PROX_ELDERLYCARE + \n               PROX_HAWKER + PROX_MRT + PROX_PARK + PROX_MALL + \n               PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n               WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + \n               WITHIN_1KM_PRISCH,\n             data=train_data)\nrf\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsaveRDS(rf, \"data/model/rf.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrf <- readRDS(\"data/model/rf.rds\")\nrf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRanger result\n\nCall:\n ranger(resale_price ~ floor_area_sqm + storey_order + remaining_lease_mths +      PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER + PROX_MRT + PROX_PARK +      PROX_MALL + PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +      WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + WITHIN_1KM_PRISCH,      data = train_data) \n\nType:                             Regression \nNumber of trees:                  500 \nSample size:                      10335 \nNumber of independent variables:  14 \nMtry:                             3 \nTarget node size:                 5 \nVariable importance mode:         none \nSplitrule:                        variance \nOOB prediction error (MSE):       731404460 \nR squared (OOB):                  0.9493789 \n```\n\n\n:::\n:::\n\n\n\n## **14.11 Calibrating Geographical Random Forest Model**\n\nIn this section, wewill learn how to calibrate a model to predict HDB resale price by using `grf()` of [**SpatialML**](https://cran.r-project.org/web/packages/ranger/index.html) package.\n\n### **14.11.1 Calibrating using training data**\n\nThe code chunk below calibrate a geographic random forest model by using `grf()` of **SpatialML** package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\ngwRF_adaptive <- grf(formula = resale_price ~ floor_area_sqm + storey_order +\n                       remaining_lease_mths + PROX_CBD + PROX_ELDERLYCARE +\n                       PROX_HAWKER + PROX_MRT + PROX_PARK + PROX_MALL +\n                       PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                       WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                       WITHIN_1KM_PRISCH,\n                     dframe=train_data_df, \n                     bw=55,\n                     kernel=\"adaptive\",\n                     coords=coords_train) \n```\n:::\n\n\n\nLetâs save the model output by using the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsaveRDS(gwRF_adaptive, \"data/model/gwRF_adaptive.rds\")\n```\n:::\n\n\n\nThe code chunk below can be used to retrieve the save model in future.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwRF_adaptive <- readRDS(\"data/model/gwRF_adaptive.rds\")\n```\n:::\n\n\n\n### **14.11.2 Predicting by using test data**\n\n#### 14.11.2.1 Preparing the test data\n\nThe code chunk below will be used to combine the test data with its corresponding coordinates data.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_data <- cbind(test_data, coords_test) %>%\n  st_drop_geometry()\n```\n:::\n\n\n\n#### 14.11.2.2 Predicting with test data\n\nNext, `predict.grf()` of spatialML package will be used to predict the resale value by using the test data and gwRF_adaptive model calibrated earlier.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwRF_pred <- predict.grf(gwRF_adaptive, \n                           test_data, #\n                           x.var.name=\"X\",\n                           y.var.name=\"Y\",  \n                           local.w=1,\n                           global.w=0)\n```\n:::\n\n\n\nBefore moving on, let us save the output into rds file for future use.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsaveRDS(gwRF_pred, \"data/model/GRF_pred.rds\")\n```\n:::\n\n\n\n#### 14.11.2.3 Converting the predicting output into a data frame\n\nThe output of the `predict.grf()` is a vector of predicted values. It is wiser to convert it into a data frame for further visualisation and analysis.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nGRF_pred<- readRDS(\"data/model/GRF_pred.rds\")\nGRF_pred_df <- as.data.frame(GRF_pred)\n```\n:::\n\n\n\nIn the code chunk below, `cbind()` is used to append the predicted values onto test_datathe\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_data_p <- cbind(test_data, GRF_pred_df)  # change to data.frame then combine them ,do the comparison\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsaveRDS(test_data_p, \"data/model/test_data_p.rds\")\n```\n:::\n\n\n\n### **14.11.3 Calculating Root Mean Square Error**\n\nThe root mean square error (RMSE) allows us to measure how far predicted values are from observed values in a regression analysis. In the code chunk below, rmse() of Metrics package is used to compute the RMSE.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrmse(test_data_p$resale_price, \n     test_data_p$GRF_pred)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 8561.543\n```\n\n\n:::\n:::\n\n\n\n### **14.11.4 Visualising the predicted values**\n\nAlternatively, scatterplot can be used to visualise the actual resale price and the predicted resale price by using the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = test_data_p,\n       aes(x = GRF_pred,\n           y = resale_price)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex08_files/figure-html/unnamed-chunk-38-1.png){width=672}\n:::\n:::\n\n\n\n::: callout-note\nA better predictive model should have the scatter point close to the diagonal line. The scatter plot can be also used to detect if any outliers in the model.\n:::\n",
    "supporting": [
      "Hands-on_Ex08_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}