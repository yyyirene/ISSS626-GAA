{
  "hash": "90aac7d3d01dde05ffded721b4f7a70e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"In-class exercise 3\"\nauthor: \"yang yayong\"\ndate: \"Sep 9 2024\"\ndate-modified: \"last-modified\"\nexecute:\n  eval: true\n  echo: true\n  message: false\n  freeze: true\n---\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, spNetwork, tmap, tidyverse)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nchildcare2 <- st_read(dsn=\"data/rawdata\", layer=\"Punggol_CC\") %>%\n  st_zm(drop = TRUE,\n        what = \"ZM\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `Punggol_CC' from data source \n  `/Users/yangyayong/Downloads/学校文件/smu文件/Term 3/G/yyyirene/ISSS626-GAA/In-class_EX/In-class_EX03/data/rawdata' \n  using driver `ESRI Shapefile'\nSimple feature collection with 61 features and 1 field\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 34423.98 ymin: 41503.6 xmax: 37619.47 ymax: 44685.77\nz_range:       zmin: 0 zmax: 0\nProjected CRS: SVY21 / Singapore TM\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnetwork <- st_read(dsn=\"data/rawdata\", \n                   layer=\"Punggol_St\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `Punggol_St' from data source \n  `/Users/yangyayong/Downloads/学校文件/smu文件/Term 3/G/yyyirene/ISSS626-GAA/In-class_EX/In-class_EX03/data/rawdata' \n  using driver `ESRI Shapefile'\nSimple feature collection with 2642 features and 2 fields\nGeometry type: LINESTRING\nDimension:     XY\nBounding box:  xmin: 34038.56 ymin: 40941.11 xmax: 38882.85 ymax: 44801.27\nProjected CRS: SVY21 / Singapore TM\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(network)\nplot(childcare2,add=T,col='red',pch = 19)\n```\n\n::: {.cell-output-display}\n![](In-class_EX03_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\nwhich mean x,y  \n\nNetwork: This object is typically a geographic spatial dataset that may contain geometric and attribute data for roads or other network structures.\n\nSt_geometry (network): This function extracts geometric data (such as coordinate points, lines, or polygons) from the network object for drawing or performing spatial operations.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode('plot')  # view is interactive\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap mode set to plotting\n```\n\n\n:::\n\n```{.r .cell-code}\ntm_shape(childcare2) +\n\n tm_dots(col = \"red\") +  #keep the size constant for zoom in and zoom out\n\n tm_shape(network) +\n\n tm_lines()\n```\n\n::: {.cell-output-display}\n![](In-class_EX03_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap mode set to plotting\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlixels <- lixelize_lines(network, \n                         700, \n                         mindist = 375)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nkfun_childcare <- kfunctions(network, \n                             childcare,\n                             start = 0, \n                             end = 1000, \n                             step = 50, \n                             width = 50, \n                             nsim = 50, #49\n                             resolution = 50,\n                             verbose = FALSE, \n                             conf_int = 0.05)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nkfun_childcare$plotk\n\nkfun_childcare$plotg\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nacc <- read_csv(\"data/rawdata/thai_road_accident_2019_2022.csv\") %>%\n  mutate(Month_num = month(incident_datetime)) %>%\n  mutate(Month_fac = month(incident_datetime, label = TRUE, abbr = TRUE)) %>%\n  mutate(dayofweek = day(incident_datetime)) %>%\n  filter(!is.na(longitude) & longitude != \"\", \n         !is.na(latitude) & latitude != \"\") %>%  # 确保用 %>% 连接 st_as_sf\n  st_as_sf(coords = c(\"longitude\", \"latitude\"), crs = 4326) %>%\n  st_transform(crs = 32647)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 81735 Columns: 18\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (10): province_th, province_en, agency, route, vehicle_type, presumed_c...\ndbl   (6): acc_code, number_of_vehicles_involved, number_of_fatalities, numb...\ndttm  (2): incident_datetime, report_datetime\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(acc,\"data/rds/acc.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nacc <- read_rds(\"data/rds/acc.rds\")\n```\n:::\n",
    "supporting": [
      "In-class_EX03_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}