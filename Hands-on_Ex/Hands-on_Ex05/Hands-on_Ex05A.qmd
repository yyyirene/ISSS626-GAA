---
title: "Hands-on exercise 5A"
author: "yang yayong"
date: "Sep 17 2024"
date-modified: "last-modified"
execute:
  eval: true
  echo: true
  message: false
  freeze: true
---

# **9  Global Measures of Spatial Autocorrelation**

## **9.1 Overview**

In this hands-on exercise, you will learn how to compute Global Measures of Spatial Autocorrelation (GMSA) by using **spdep** package. By the end to this hands-on exercise, you will be able to:

-   import geospatial data using appropriate function(s) of **sf** package,

-   import csv file using appropriate function of **readr** package,

-   perform relational join using appropriate join function of **dplyr** package,

-   compute Global Spatial Autocorrelation (GSA) statistics by using appropriate functions of **spdep** package,

    -   plot Moran scatterplot,

    -   compute and plot spatial correlogram using appropriate function of **spdep** package.

-   provide statistically correct interpretation of GSA statistics.

## 9.2 Getting Started

In spatial policy, one of the main development objective of the local government and planners is to ensure equal distribution of development in the province. Our task in this study, hence, is to apply appropriate spatial statistical methods to discover if development are even distributed geographically. If the answer is No. Then, our next question will be “is there sign of spatial clustering?”. And, if the answer for this question is yes, then our next question will be “where are these clusters?”

In this case study, we are interested to examine the spatial pattern of a selected development indicator (i.e. GDP per capita) of Hunan Provice, People Republic of China.

### 9.2.2 The Study Area and Data

### Two data sets will be used in this hands-on exercise, they are:

Hunan province administrative boundary layer at county level. This is a geospatial data set in ESRI shapefile format. Hunan_2012.csv: This csv file contains selected Hunan’s local development indicators in 2012.

### 9.2.3 Setting the Analytical Toolls

Before we get started, we need to ensure that spdep, sf, tmap and tidyverse packages of R are currently installed in your R.

sf is use for importing and handling geospatial data in R, tidyverse is mainly use for wrangling attribute data in R, spdep will be used to compute spatial weights, global and local spatial autocorrelation statistics, and tmap will be used to prepare cartographic quality chropleth map. The code chunk below is used to perform the following tasks:

creating a package list containing the necessary R packages, checking if the R packages in the package list have been installed in R, if they have yet to be installed, RStudio will installed the missing packages, launching the packages into R environment.

```{r}
pacman::p_load(sf, spdep, tmap, tidyverse)
```

## 9.3 Getting the Data Into R Environment

### 9.3.1 Import shapefile into r environment

The code chunk below uses st_read() of sf package to import Hunan shapefile into R. The imported shapefile will be simple features Object of sf.

```{r}
hunan <- st_read(dsn = "data/geospatial", 
                 layer = "Hunan")
```

### 9.3.2 Import csv file into r environment

Next, we will import Hunan_2012.csv into R by using read_csv() of readr package. The output is R data frame class.

```{r}
hunan2012 <- read_csv("data/aspatial/Hunan_2012.csv")
```

### 9.3.3 Performing relational join

The code chunk below will be used to update the attribute table of hunan’s SpatialPolygonsDataFrame with the attribute fields of hunan2012 dataframe. This is performed by using left_join() of dplyr package.

```{r}
hunan <- left_join(hunan,hunan2012) %>%
  select(1:4, 7, 15)
```

### 9.3.4 Visualising Regional Development Indicator

Now, we are going to prepare a basemap and a choropleth map showing the distribution of GDPPC 2012 by using qtm() of tmap package.

```{r}
equal <- tm_shape(hunan) +
  tm_fill("GDPPC",
          n = 5,
          style = "equal") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Equal interval classification")

quantile <- tm_shape(hunan) +
  tm_fill("GDPPC",
          n = 5,
          style = "quantile") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Equal quantile classification")

tmap_arrange(equal, 
             quantile, 
             asp=1, 
             ncol=2)
```

Left: Displays the boundaries and names of each county or district in Hunan Province.

Right: Displays the distribution of GDP per capita in each county or district. The two maps are displayed side by side to facilitate intuitive comparison of regional names and economic data.

## 9.4 Global Measures of Spatial Autocorrelation

In this section, we will learn how to compute global spatial autocorrelation statistics and to perform spatial complete randomness test for global spatial autocorrelation.

Before we can compute the global spatial autocorrelation statistics, we need to construct a spatial weights of the study area. The spatial weights is used to define the neighbourhood relationships between the geographical units (i.e. county) in the study area.

In the code chunk below, poly2nb() of spdep package is used to compute contiguity weight matrices for the study area. This function builds a neighbours list based on regions with contiguous boundaries. If you look at the documentation you will see that you can pass a “queen” argument that takes TRUE or FALSE as options. If you do not specify this argument the default is set to TRUE, that is, if you don’t specify queen = FALSE this function will return a list of first order neighbours using the Queen criteria.

More specifically, the code chunk below is used to compute Queen contiguity weight matrix.

```{r}
wm_q <- poly2nb(hunan, 
                queen=TRUE)
summary(wm_q)
```

The summary report above shows that there are 88 area units in Hunan. The most connected area unit has 11 neighbours. There are two area units with only one neighbours.

### 9.4.2 Row-standardised weights matrix

Next, we need to assign weights to each neighboring polygon. In our case, each neighboring polygon will be assigned equal weight (style=“W”). This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values. While this is the most intuitive way to summaries the neighbors’ values it has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data. For this example, we’ll stick with the style=“W” option for simplicity’s sake but note that other more robust options are available, notably style=“B”.

```{r}
rswm_q <- nb2listw(wm_q, 
                   style="W", 
                   zero.policy = TRUE)
rswm_q
```

## 9.5 Global Measures of Spatial Autocorrelation: Moran’s I

In this section, we will learn how to perform Moran’s I statistics testing by using moran.test() of spdep.

### 9.5.1 Maron’s I test

The code chunk below performs Moran’s I statistical testing using moran.test() of spdep.

```{r}
moran.test(hunan$GDPPC, 
           listw=rswm_q, 
           zero.policy = TRUE, 
           na.action=na.omit)
```

In this result, Moran's I is positive (0.3007), indicating that there is a certain degree of positive spatial autocorrelation, that is, GDPPC values ​​have a tendency to cluster spatially.

The p-value is very small, much smaller than commonly used significance levels (e.g. 0.05), and there is very strong evidence to support the presence of significant positive spatial autocorrelation in the data .

The expected value is -0.011494253, which means that under random conditions the expected value of Moran's I should be close to 0.

In general, data based on GDPPC have significant positive spatial autocorrelation, which means that GDPPC values ​​are clustered in space and are not randomly distributed.

### 9.5.2 Computing Monte Carlo Moran’s I

The code chunk below performs permutation test for Moran’s I statistic by using moran.mc() of spdep. A total of 1000 simulation will be performed.

```{r}
set.seed(1234)
bperm= moran.mc(hunan$GDPPC, 
                listw=rswm_q, 
                nsim=999, 
                zero.policy = TRUE, 
                na.action=na.omit)
bperm
```

There is a significant positive spatial autocorrelation of the GDPPC values ​​in the data. This means that regions with high GDPPC tend to be adjacent to other regions with high GDPPC, while regions with low GDPPC also tend to cluster.

### 9.5.3 Visualising Monte Carlo Moran’s I

It is always a good practice for us the examine the simulated Moran’s I test statistics in greater detail. This can be achieved by plotting the distribution of the statistical values as a histogram by using the code chunk below.

In the code chunk below hist() and abline() of R Graphics are used.

```{r}
mean(bperm$res[1:999])
```

This shows that under the assumption of no spatial autocorrelation, the expected value of Moran's I is 0 or close to 0.

```{r}
var(bperm$res[1:999])
```

The variance is small, indicating that the fluctuation of Moran's I value is not large during the simulation process, and Moran's I value is mainly concentrated in a smaller range.

```{r}
summary(bperm$res[1:999])
```

```{r}
hist(bperm$res, 
     freq=TRUE, 
     breaks=20, 
     xlab="Simulated Moran's I")
abline(v=0, 
       col="red") 
```

Assumption of no spatial autocorrelation: The distribution of Moran's I values ​​for stochastic simulations shows that Moran's I is close to 0 under stochastic conditions. That is, if there is no spatial autocorrelation, the observed Moran's I value should be close to 0. Spatial autocorrelation in real data: The actual observed Moran's I value (red line) is significantly higher than the mean and median of the simulated values, indicating that there is significant positive spatial autocorrelation in your data.

## 9.6 Global Measures of Spatial Autocorrelation: Geary’s C

In this section, you will learn how to perform Geary’s C statistics testing by using appropriate functions of spdep package.

### 9.6.1 Geary’s C test

The code chunk below performs Geary’s C test for spatial autocorrelation by using geary.test() of spdep.

```{r}
geary.test(hunan$GDPPC, listw=rswm_q)
```

### 9.6.2 Computing Monte Carlo Geary’s C

The code chunk below performs permutation test for Geary’s C statistic by using geary.mc() of spdep.

```{r}
set.seed(1234)
bperm=geary.mc(hunan$GDPPC, 
               listw=rswm_q, 
               nsim=999)
bperm
```

### 9.6.3 Visualising the Monte Carlo Geary’s C

Next, we will plot a histogram to reveal the distribution of the simulated values by using the code chunk below.

```{r}
mean(bperm$res[1:999])
```

```{r}
var(bperm$res[1:999])
```

```{r}
var(bperm$res[1:999])
```

```{r}
hist(bperm$res, freq=TRUE, breaks=20, xlab="Simulated Geary c")
abline(v=1, col="red") 
```

Assumption of no spatial autocorrelation: The mean value of Geary's C value is close to 1, and most of the simulation results are concentrated between 0.9 and 1.1, supporting the assumption of no spatial autocorrelation.

Geary's C value for actual data: The red line shows that the actual calculated Geary's C value is close to 1, indicating that there is no significant spatial autocorrelation in the data.

```{r}

# Create a data frame from the simulated Geary's C results
geary_c_data <- data.frame(GearyC = bperm$res[1:999])

# Plot the histogram
ggplot(geary_c_data, aes(x = GearyC)) +
  geom_histogram(binwidth = 0.02, color = "black", fill = "gray", alpha = 0.7) +  # Adjust binwidth for better control
  geom_vline(xintercept = 1.0044, color = "red", linetype = "solid", size = 1) +  # Add vertical line for observed Geary's C
  labs(title = "Histogram of Simulated Geary's C",
       x = "Simulated Geary's C",
       y = "Frequency") +
  theme_minimal()  # Optional: Choose a theme for styling
```

## 9.7 Spatial Correlogram

Spatial correlograms are great to examine patterns of spatial autocorrelation in your data or model residuals. They show how correlated are pairs of spatial observations when you increase the distance (lag) between them - they are plots of some index of autocorrelation (Moran’s I or Geary’s c) against distance.Although correlograms are not as fundamental as variograms (a keystone concept of geostatistics), they are very useful as an exploratory and descriptive tool. For this purpose they actually provide richer information than variograms.

### 9.7.1 Compute Moran’s I correlogram 

In the code chunk below, sp.correlogram() of spdep package is used to compute a 6-lag spatial correlogram of GDPPC. The global spatial autocorrelation used in Moran’s I. The plot() of base Graph is then used to plot the output.

```{r}
MI_corr <- sp.correlogram(wm_q, 
                          hunan$GDPPC, 
                          order=6, 
                          method="I", 
                          style="W")
plot(MI_corr)
```

By plotting the output might not allow us to provide complete interpretation. This is because not all autocorrelation values are statistically significant. Hence, it is important for us to examine the full analysis report by printing out the analysis results as in the code chunk below.

```{r}
print(MI_corr)
```

There is significant positive spatial autocorrelation in the first three distance strata, especially the autocorrelation in the first and second strata is extremely significant (the p value is very small).

As the distance level increases, the spatial autocorrelation gradually becomes negative, especially at the fifth and sixth levels, which show significant negative spatial autocorrelation.

9.7.2 Compute Geary’s C correlogram and plot In the code chunk below, sp.correlogram() of spdep package is used to compute a 6-lag spatial correlogram of GDPPC. The global spatial autocorrelation used in Geary’s C. The plot() of base Graph is then used to plot the output.

```{r}
GC_corr <- sp.correlogram(wm_q, 
                          hunan$GDPPC, 
                          order=6, 
                          method="C", 
                          style="W")
plot(GC_corr)

```

```{r}
print(GC_corr)
```
